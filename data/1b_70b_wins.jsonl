{"prompt": "Write a function to find the longest chain which can be formed from the given set of pairs. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5", "target": 0.0}
{"prompt": "Write a python function to find the first repeated character in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"", "target": 0.0}
{"prompt": "Write a function to get a lucid number smaller than or equal to n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]", "target": 0.0}
{"prompt": "Write a function to reverse words in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")", "target": 0.0}
{"prompt": "Write a function to check if the given integer is a prime number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False", "target": 0.2}
{"prompt": "Write a function to convert degrees to radians. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953", "target": 0.2}
{"prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)", "target": 0.5}
{"prompt": "Write a python function to find nth bell number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15", "target": 0.5}
{"prompt": "Write a python function to find minimum possible value for the given periodic function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9", "target": 0.0}
{"prompt": "Write a python function to remove the k'th element from a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]", "target": 0.4}
{"prompt": "Write a function to find the maximum of nth column from the given tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11", "target": 0.0}
{"prompt": "Write a python function to merge the first and last elements separately in a list of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]", "target": 0.9}
{"prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]", "target": 0.0}
{"prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44", "target": 1.0}
{"prompt": "Write a function to find average value of the numbers in a given tuple of tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]", "target": 0.3}
{"prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)", "target": 0.1}
{"prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1", "target": 0.0}
{"prompt": "Write a function to divide two lists using map and lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]", "target": 0.2}
{"prompt": "Write a function to move all the numbers in it to the given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "target": 0.1}
{"prompt": "Write a function to find the largest subset where each pair is divisible. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4", "target": 0.0}
{"prompt": "Write a function to increment the numeric values in the given strings by k. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']", "target": 0.0}
{"prompt": "Write a function to find the median of two sorted arrays of same size. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0", "target": 0.7}
{"prompt": "Write a function to find the n-th power of individual elements in a list using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])", "target": 0.2}
{"prompt": "Write a python function to convert the given string to upper case. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"", "target": 0.5}
{"prompt": "Write a python function to interchange first and last elements in a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]", "target": 0.8}
{"prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4", "target": 0.0}
{"prompt": "Write a python function to find the smallest missing number from the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0", "target": 0.0}
{"prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'", "target": 0.8}
{"prompt": "Write a python function to find even numbers from a mixed list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]", "target": 1.0}
{"prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "target": 0.0}
{"prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'", "target": 1.0}
{"prompt": "Write a python function to move all zeroes to the end of the given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]", "target": 0.0}
{"prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4", "target": 0.7}
{"prompt": "Write a python function to find the sum of fourth power of first n even natural numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664", "target": 0.0}
{"prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]", "target": 0.6}
{"prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"", "target": 0.8}
{"prompt": "Write a function to check whether the given amount has no profit and no loss Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False", "target": 0.0}
{"prompt": "Write a function to calculate wind chill index. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116", "target": 0.0}
{"prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6", "target": 0.0}
{"prompt": "Write a function to remove the parenthesis area in a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")", "target": 0.1}
{"prompt": "Write a function to find the nth nonagonal number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089", "target": 0.0}
{"prompt": "Write a function to remove similar rows from the given tuple matrix. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}", "target": 0.0}
{"prompt": "Write a function that matches a word containing 'z', not at the start or end of the word. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')", "target": 0.0}
{"prompt": "Write a python function to reverse an array upto a given position. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]", "target": 0.0}
{"prompt": "Write a function to find the product of it\u2019s kth index in the given tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210", "target": 0.2}
{"prompt": "Write a python function to count number of cubes of size k in a cube of size n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1", "target": 0.0}
{"prompt": "Write a function to split a string at uppercase letters. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']", "target": 1.0}
{"prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ", "target": 0.9}
{"prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11", "target": 0.0}
{"prompt": "Write a python function to check whether the given two arrays are equal or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False", "target": 0.5}
{"prompt": "Write a function to check if one tuple is a subset of another tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True", "target": 0.0}
{"prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'", "target": 0.6}
{"prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})", "target": 0.0}
{"prompt": "Write a function to find the perimeter of a rectangle. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12", "target": 0.0}
{"prompt": "Write a python function to find the sum of fifth power of n natural numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276", "target": 0.0}
{"prompt": "Write a python function to find the minimum sum of absolute differences of two arrays. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6", "target": 0.0}
{"prompt": "Write a python function to find the first digit in factorial of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5", "target": 1.0}
{"prompt": "Write a function to find the item with maximum occurrences in a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1", "target": 0.0}
{"prompt": "Write a python function to print duplicants from a list of integers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]", "target": 0.9}
{"prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)", "target": 0.1}
{"prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27", "target": 0.7}
{"prompt": "Write a function to sort a list in a dictionary. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}", "target": 0.0}
{"prompt": "Write a function to find the largest possible value of k such that k modulo x is y. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12", "target": 0.0}
{"prompt": "Write a python function to find the average of even numbers till a given even number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51", "target": 0.0}
{"prompt": "Write a python function to shift first element to the end of given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]", "target": 0.4}
{"prompt": "Write a function to count occurrence of a character in a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2", "target": 0.1}
{"prompt": "Write a python function to count number of vowels in the string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2", "target": 0.0}
{"prompt": "Write a python function to replace multiple occurence of character by single. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'", "target": 0.1}
{"prompt": "Write a function to check whether the given ip address is valid or not using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'", "target": 0.0}
{"prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False", "target": 0.8}
{"prompt": "Write a python function to set the right most unset bit. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15", "target": 0.6}
{"prompt": "Write a function to find maximum of three numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49", "target": 0.6}
{"prompt": "Write a python function to convert a list of multiple integers into a single integer. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789", "target": 0.2}
{"prompt": "Write a function to remove duplicate words from a given string using collections module. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")", "target": 0.0}
{"prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20", "target": 0.0}
{"prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'", "target": 0.4}
{"prompt": "Write a function to check if the triangle is valid or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True", "target": 0.1}
{"prompt": "Write a python function to remove spaces from a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"", "target": 1.0}
{"prompt": "Write a function to access dictionary key\u2019s element by index. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'", "target": 0.0}
{"prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True", "target": 0.0}
{"prompt": "Write a python function to find the smallest prime divisor of a number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31", "target": 0.9}
{"prompt": "Write a function to multiply two lists using map and lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]", "target": 0.2}
{"prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True", "target": 0.7}
{"prompt": "Write a python function to count occurences of a character in a repeated string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7", "target": 0.1}
{"prompt": "Write a python function to find sum of prime numbers between 1 to n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10", "target": 0.0}
{"prompt": "Write a function to find the frequency of each element in the given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'", "target": 0.7}
{"prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3", "target": 0.0}
{"prompt": "Write a function to get the length of a complex number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138", "target": 0.1}
{"prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10", "target": 0.3}
{"prompt": "Write a function to multiply consecutive numbers of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]", "target": 0.6}
{"prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}", "target": 0.0}
{"prompt": "Write a python function to find the last two digits in factorial of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2", "target": 0.1}
{"prompt": "Write a function to remove multiple spaces in a string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'", "target": 0.0}
{"prompt": "Write a function to extract unique values from the given dictionary values. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]", "target": 0.0}
{"prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True", "target": 0.8}
{"prompt": "Write a function to zip two given lists of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]", "target": 0.0}
{"prompt": "Write a function to find number of even elements in the given list using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3", "target": 0.3}
{"prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}", "target": 0.4}
{"prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3", "target": 0.0}
{"prompt": "Write a function to count the number of elements in a list which are within a specific range. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3", "target": 0.7}
{"prompt": "Write a function to find the equilibrium index of the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1", "target": 0.0}
{"prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2", "target": 0.8}
{"prompt": "Write a function to check whether the given key is present in the dictionary or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False", "target": 0.2}
{"prompt": "Write a function to calculate the harmonic sum of n-1. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ", "target": 0.0}
{"prompt": "Write a function to sort a list of lists by length and value. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]", "target": 0.2}
{"prompt": "Write a function to find whether an array is subset of another array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False", "target": 0.0}
{"prompt": "Write a python function to count the total set bits from 1 to n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28", "target": 0.0}
{"prompt": "Write a python function to convert a string to a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']", "target": 0.7}
{"prompt": "Write a function to count unique keys for each value present in the tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'", "target": 0.7}
{"prompt": "Write a function to access the initial and last data of the given tuple record. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)", "target": 0.5}
{"prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False", "target": 0.0}
{"prompt": "Write a function to remove duplicates from a list of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]", "target": 0.5}
{"prompt": "Write a function to check if the given tuple contains all valid values or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True", "target": 0.0}
{"prompt": "Write a python function to count the number of distinct power of prime factor of given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1", "target": 0.0}
{"prompt": "Write a function to convert the given string of integers into a tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)", "target": 0.0}
{"prompt": "Write a function to find the perimeter of a rombus. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16", "target": 0.0}
{"prompt": "Write a function to calculate the standard deviation. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577", "target": 0.8}
{"prompt": "Write a function to create a list taking alternate elements from another given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "target": 0.0}
{"prompt": "Write a function that matches a string that has an a followed by zero or more b's. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')", "target": 0.0}
{"prompt": "Write a function to add a dictionary to the tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})", "target": 0.7}
{"prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ", "target": 0.2}
{"prompt": "Write a function to filter the height and width of students which are stored in a dictionary. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}", "target": 0.0}
{"prompt": "Write a function to count the same pair in two given lists using map function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1", "target": 0.6}
{"prompt": "Write a function to calculate the sum of all digits of the base to the specified power. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62", "target": 0.0}
{"prompt": "Write a function to extract values between quotation marks of the given string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']", "target": 0.1}
{"prompt": "Write a function to multiply the adjacent elements of the given tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)", "target": 0.0}
{"prompt": "Write a function to remove all characters except letters and numbers using regex Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ", "target": 0.8}
{"prompt": "Write a function to sum elements in two lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "target": 0.1}
{"prompt": "Write a function to add two lists using map and lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]", "target": 0.3}
{"prompt": "Write a function to remove consecutive duplicates of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "target": 0.6}
{"prompt": "Write a function to find the lateral surface area of a cone. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388", "target": 0.0}
{"prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')", "target": 0.4}
{"prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "target": 0.0}
{"prompt": "Write a python function to find sum of products of all possible subarrays. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84", "target": 0.2}
{"prompt": "Write a python function to toggle bits of the number except the first and the last bit. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13", "target": 0.0}
{"prompt": "Write a function to locate the left insertion point for a specified value in sorted order. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4", "target": 0.0}
{"prompt": "Write a function to check whether the given string is starting with a vowel or not using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'", "target": 0.0}
{"prompt": "Write a function to calculate the geometric sum of n-1. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375", "target": 0.3}
{"prompt": "Write a python function to find the index of smallest triangular number with n digits. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45", "target": 0.0}
{"prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}", "target": 0.2}
{"prompt": "Write a python function to check whether all the characters are same or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False", "target": 0.0}
{"prompt": "Write a function to caluclate the area of a tetrahedron. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772", "target": 0.0}
{"prompt": "Write a function to rotate a given list by specified number of items to the right direction. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "target": 0.9}
{"prompt": "Write a function to check if the given tuple has any none value or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True", "target": 0.5}
{"prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]", "target": 0.6}
{"prompt": "Write a function to find area of a sector. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None", "target": 0.3}
{"prompt": "Write a function to find the longest common subsequence for the given three string sequence. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3", "target": 0.0}
{"prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'", "target": 0.7}
{"prompt": "Write a function to sort a given list of strings of numbers numerically. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]", "target": 0.4}
{"prompt": "Write a function to add the given tuple to the given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]", "target": 0.0}
{"prompt": "Write a function to check if the given array represents min heap or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False", "target": 0.1}
{"prompt": "Write a function to find the nth jacobsthal number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5", "target": 0.2}
{"prompt": "Write a function to find minimum k records from tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "target": 0.0}
{"prompt": "Write a function to find common index elements from three lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "target": 0.1}
{"prompt": "Write a function to find the second smallest number in a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None", "target": 0.0}
{"prompt": "Write a function that matches a string that has an a followed by zero or one 'b'. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')", "target": 0.3}
{"prompt": "Write a function to count the pairs of reverse strings in the given string list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ", "target": 0.0}
{"prompt": "Write a function to count number of unique lists within a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}", "target": 0.0}
{"prompt": "Write a function to check a decimal with a precision of 2. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False", "target": 0.4}
{"prompt": "Write a python function to check whether an array contains only one distinct element or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'", "target": 0.6}
{"prompt": "Write a function to caluclate arc length of an angle. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285", "target": 0.0}
{"prompt": "Write a function to check whether the given month number contains 30 days or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False", "target": 0.6}
{"prompt": "Write a python function to find the minimum difference between any two elements in a given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4", "target": 0.0}
{"prompt": "Write a python function to count numeric values in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3", "target": 0.8}
{"prompt": "Write a function to find nth polite number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13", "target": 1.0}
{"prompt": "Write a function to iterate over all pairs of consecutive items in a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "target": 0.0}
{"prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1", "target": 1.0}
{"prompt": "Write a python function to check for odd parity of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False", "target": 0.1}
{"prompt": "Write a python function to get the difference between two lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]", "target": 1.0}
{"prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108", "target": 0.0}
{"prompt": "Write a function to check if the given expression is balanced or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True", "target": 0.2}
{"prompt": "Write a function to remove all the words with k length in the given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'", "target": 0.0}
{"prompt": "Write a function to find the occurrence and position of the substrings within a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)", "target": 0.0}
{"prompt": "Write a function to check if the string is a valid email address or not using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'", "target": 0.0}
{"prompt": "Write a python function to check whether every odd index contains odd numbers of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False", "target": 0.0}
{"prompt": "Write a function to count those characters which have vowels as their neighbors in the given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5", "target": 1.0}
{"prompt": "Write a python function to find the sum of non-repeated elements in a given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78", "target": 1.0}
{"prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "target": 0.0}
{"prompt": "Write a function to count the number of unique lists within a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "target": 0.1}
{"prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]", "target": 0.2}
{"prompt": "Write a python function to check whether the count of divisors is even or odd. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"", "target": 0.0}
{"prompt": "Write a python function to find the sum of all odd length subarrays. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8", "target": 0.4}
{"prompt": "Write a function to convert rgb color to hsv color. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "target": 0.0}
{"prompt": "Write a function to find the product of first even and odd number of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10", "target": 0.0}
{"prompt": "Write a function to convert tuple string to integer tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)", "target": 0.0}
{"prompt": "Write a function to locate the right insertion point for a specified value in sorted order. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4", "target": 0.1}
{"prompt": "Write a function that matches a string that has an a followed by three 'b'. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')", "target": 0.0}
{"prompt": "Write a function to create a new tuple from the given string and list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')", "target": 0.0}
{"prompt": "Write a function to calculate the perimeter of a regular polygon. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63", "target": 0.0}
{"prompt": "Write a python function to check whether every even index contains even numbers of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True", "target": 0.1}
{"prompt": "Write a function to remove the nested record from the given tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)", "target": 0.3}
{"prompt": "Write a python function to count the number of lists in a given number of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2", "target": 0.0}
{"prompt": "Write a python function to find the last position of an element in a sorted array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3", "target": 0.8}
{"prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')", "target": 0.4}
{"prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]", "target": 0.6}
{"prompt": "Write function to find the sum of all items in the given dictionary. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "target": 0.0}
{"prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40", "target": 1.0}
{"prompt": "Write a python function to find the sum of an array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3", "target": 1.0}
{"prompt": "Write a python function to left rotate the bits of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792", "target": 0.7}
{"prompt": "Write a function to remove all whitespaces from a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')", "target": 0.6}
{"prompt": "Write a python function to count the number of equal numbers from three given integers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2", "target": 0.0}
{"prompt": "Write a python function to count the number of rotations required to generate a sorted array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3", "target": 0.8}
{"prompt": "Write a python function to check whether the given number is a perfect square or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False", "target": 0.0}
{"prompt": "Write a python function to check whether the product of numbers is even or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False", "target": 0.0}
{"prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ", "target": 0.1}
{"prompt": "Write a function to find maximum run of uppercase characters in the given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4", "target": 0.0}
{"prompt": "Write a python function to find the first odd number in a given list of numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9", "target": 0.1}
{"prompt": "Write a function to check if the given tuples contain the k or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True", "target": 0.0}
{"prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True", "target": 0.1}
{"prompt": "Write a function to iterate over elements repeating each as many times as its count. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']", "target": 0.1}
{"prompt": "Write a function to check if two lists of tuples are identical or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True", "target": 1.0}
{"prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')", "target": 0.0}
{"prompt": "Write a function to find length of the string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8", "target": 0.5}
{"prompt": "Write a function to find the area of a rombus. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4", "target": 0.0}
{"prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]", "target": 0.0}
{"prompt": "Write a function to clear the values of the given tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()", "target": 0.8}
{"prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]", "target": 0.6}
{"prompt": "Write a python function to count lower case letters in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5", "target": 0.1}
{"prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])", "target": 1.0}
{"prompt": "Write a function to check whether the given month number contains 28 days or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False", "target": 0.0}
{"prompt": "Write a function to merge two dictionaries into a single expression. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}", "target": 1.0}
{"prompt": "Write a function to return true if the password is valid. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False", "target": 0.3}
{"prompt": "Write a function to check if the given string starts with a substring using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'", "target": 0.0}
{"prompt": "Write a python function to remove even numbers from a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]", "target": 0.2}
{"prompt": "Write a python function to access multiple elements of specified index from a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]", "target": 0.0}
{"prompt": "Write a python function to find the type of triangle from the given sides. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"", "target": 0.0}
{"prompt": "Write a function to sum a specific column of a list in a given list of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9", "target": 0.0}
{"prompt": "Write a function to count alphabets,digits and special charactes in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)", "target": 0.0}
{"prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'", "target": 0.8}
{"prompt": "Write a function to round up a number to specific digits. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02", "target": 0.8}
{"prompt": "Write a python function to count equal element pairs from the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0", "target": 0.8}
{"prompt": "Write a function to extract the maximum numeric value from a string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343", "target": 0.0}
{"prompt": "Write a function to get dictionary keys as a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]", "target": 0.7}
{"prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]", "target": 0.6}
{"prompt": "Write a python function to find the slope of a line. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0", "target": 0.1}
{"prompt": "Write a function to find length of the subarray having maximum sum. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3", "target": 0.0}
{"prompt": "Write a python function to find the cube sum of first n odd natural numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496", "target": 0.0}
{"prompt": "Write a python function to find minimum number swaps required to make two binary strings equal. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0", "target": 0.1}
{"prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]", "target": 1.0}
{"prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"", "target": 1.0}
{"prompt": "Write a function to count the number of inversions in the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2", "target": 0.5}
{"prompt": "Write a function to find the number which occurs for odd number of times in the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5", "target": 0.4}
{"prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408", "target": 0.0}
{"prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3", "target": 0.0}
{"prompt": "Write a python function to count the number of digits in factorial of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2", "target": 0.2}
{"prompt": "Write a function to find the minimum number of platforms required for a railway/bus station. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1", "target": 0.1}
{"prompt": "Write a python function to copy a list from a singleton tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n", "target": 0.8}
{"prompt": "Write a function to find the area of a trapezium. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700", "target": 0.0}
{"prompt": "Write a python function to find sum of all prime divisors of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7", "target": 0.7}
{"prompt": "Write a function to check if a triangle of positive area is possible with the given angles. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False", "target": 0.0}
{"prompt": "Write a python function to find sum of inverse of divisors. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4", "target": 0.6}
{"prompt": "Write a python function to remove negative numbers from a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]", "target": 1.0}
{"prompt": "Write a python function to find sum of odd factors of a number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1", "target": 0.0}
{"prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]", "target": 0.3}
{"prompt": "Write a python function to check for even parity of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True", "target": 0.1}
{"prompt": "Write a python function to find minimum adjacent swaps required to sort binary array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2", "target": 0.9}
{"prompt": "Write a function to list out the list of given strings individually using map function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]", "target": 0.9}
{"prompt": "Write a function to count number of lists in a given list of lists and square the count. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9", "target": 0.0}
{"prompt": "Write a function to generate all sublists of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]", "target": 0.3}
{"prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'", "target": 0.2}
{"prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]", "target": 0.0}
{"prompt": "Write a function to find the occurrences of n most common words in a given text. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]", "target": 0.0}
{"prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5", "target": 0.0}
{"prompt": "Write a function to find palindromes in a given list of strings using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']", "target": 0.3}
{"prompt": "Write a function to print n-times a list using map function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]", "target": 0.0}
{"prompt": "Write a function to check whether the given month name contains 31 days or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True", "target": 0.0}
{"prompt": "Write a python function to add a minimum number such that the sum of array becomes even. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2", "target": 0.1}
{"prompt": "Write a python function to find the length of the last word in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0", "target": 0.7}
{"prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]", "target": 0.0}
{"prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522", "target": 0.0}
{"prompt": "Write a python function to check whether the given strings are rotations of each other or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True", "target": 0.0}
{"prompt": "Write a function to check if a nested list is a subset of another nested list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False", "target": 0.0}
{"prompt": "Write a function to solve the fibonacci sequence using recursion. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34", "target": 0.0}
{"prompt": "Write a python function to check if the string is a concatenation of another string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False", "target": 0.0}
{"prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6", "target": 0.0}
{"prompt": "Write a python function to find lcm of two positive integers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6", "target": 0.0}
{"prompt": "Write a python function to sort the given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"", "target": 0.1}
{"prompt": "Write a function to check if the given tuple contains only k elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False", "target": 0.0}
{"prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'", "target": 0.0}
{"prompt": "Write a python function to find number of solutions in quadratic equation. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"", "target": 0.0}
{"prompt": "Write a function to find the sum of first even and odd number of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11", "target": 1.0}
{"prompt": "Write a function to caluclate perimeter of a parallelogram. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144", "target": 0.2}
{"prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]", "target": 0.8}
{"prompt": "Write a python function to check whether all the bits are within a given range or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ", "target": 0.2}
{"prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False", "target": 1.0}
{"prompt": "Write a function to add all the numbers in a list and divide it with the length of the list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332", "target": 0.2}
{"prompt": "Write a python function to check whether the given number is odd or not using bitwise operator. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True", "target": 0.1}
{"prompt": "Write a function to substract the elements of the given nested tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))", "target": 0.0}
{"prompt": "Write a function to reverse each list in a given list of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]", "target": 0.1}
{"prompt": "Write a python function to find the index of an extra element present in one sorted array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5", "target": 0.1}
{"prompt": "Write a python function to check whether the given two numbers have same number of digits or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True", "target": 0.3}
{"prompt": "Write a function to remove multiple spaces in a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')", "target": 0.0}
{"prompt": "Write a python function to get the last element of each sublist. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]", "target": 0.2}
{"prompt": "Write a function to convert the given string of float type into tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)", "target": 0.3}
{"prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44", "target": 0.0}
{"prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ", "target": 0.5}
{"prompt": "Write a python function to check whether the word is present in a given sentence or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False", "target": 0.0}
{"prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]", "target": 0.3}
{"prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True", "target": 1.0}
{"prompt": "Write a function where a string will start with a specific number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False", "target": 0.1}
{"prompt": "Write a function to find the smallest multiple of the first n numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1", "target": 0.8}
{"prompt": "Write a function to combine two dictionaries by adding values for common keys. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})", "target": 0.1}
{"prompt": "Write a python function to count the total unset bits from 1 to n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17", "target": 0.9}
{"prompt": "Write a function to return true if the given number is even else return false. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False", "target": 0.6}
{"prompt": "Write a python function to find the sum of squares of binomial co-efficients. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6", "target": 0.4}
{"prompt": "Write a function to extract year, month and date from a url by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]", "target": 0.0}
{"prompt": "Write a function to print the first n lucky numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]", "target": 0.0}
{"prompt": "Write a function to find the fixed point in the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0", "target": 0.0}
{"prompt": "Write a function to find the previous palindrome of a specified number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111", "target": 0.4}
{"prompt": "Write a function to validate a gregorian date. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True", "target": 0.0}
{"prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520", "target": 0.0}
{"prompt": "Write a function to find ln, m lobb number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20", "target": 0.3}
{"prompt": "Write a function to check for a number at the end of a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False", "target": 0.5}
{"prompt": "Write a python function to check whether the given string is made up of two alternating characters or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False", "target": 0.1}
{"prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]", "target": 0.0}
{"prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)", "target": 0.0}
{"prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')", "target": 0.0}
{"prompt": "Write a function to count coin change. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1", "target": 0.1}
{"prompt": "Write a python function to multiply all items in the list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18", "target": 0.0}
{"prompt": "Write a function to remove all tuples with all none values in the given tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'", "target": 0.6}
{"prompt": "Write a function to perform chunking of tuples each of size n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]", "target": 0.0}
{"prompt": "Write a function to find a pair with the highest product from a given array of integers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)", "target": 0.3}
{"prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6", "target": 0.6}
{"prompt": "Write a function to find maximum of two numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10", "target": 0.2}
{"prompt": "Write a python function to calculate the product of all the numbers of a given tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48", "target": 0.0}
{"prompt": "Write a function to find n-th rencontres number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3", "target": 1.0}
{"prompt": "Write a function to calculate the height of the given binary tree. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nroot = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot1 = Node(1);  \r\nroot1.left = Node(2);  \r\nroot1.right = Node(3);  \r\nroot1.left.left = Node(4);  \r\nroot1.right.left = Node(5);  \r\nroot1.right.right = Node(6);  \r\nroot1.right.right.right= Node(7);  \r\nroot1.right.right.right.right = Node(8)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(6)\r\nroot2.left.left.right = Node(7)\n\nassert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4", "target": 0.0}
{"prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'", "target": 0.0}
{"prompt": "Write a function to count repeated items of a tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4", "target": 0.0}
{"prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'", "target": 0.1}
{"prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400", "target": 0.0}
{"prompt": "Write a function to remove duplicate words from a given list of strings. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']", "target": 0.0}
{"prompt": "Write a function to convert camel case string to snake case string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'", "target": 0.0}
{"prompt": "Write a function to find the nth delannoy number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681", "target": 0.0}
{"prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650", "target": 0.1}
{"prompt": "Write a function to re-arrange the given tuples based on the given ordered list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]", "target": 0.0}
{"prompt": "Write a function to count the most common character in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')", "target": 0.6}
{"prompt": "Write a function to find three closest elements from three sorted arrays. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)", "target": 0.0}
{"prompt": "Write a function to sort a list of dictionaries using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])", "target": 0.2}
{"prompt": "Write a function to sort the given array by using heap sort. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]", "target": 0.0}
{"prompt": "Write a function to count the elements in a list until an element is a tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0", "target": 0.0}
{"prompt": "Write a function to check if any list element is present in the given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False", "target": 0.0}
{"prompt": "Write a function to combine two given sorted lists using heapq module. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]", "target": 0.6}
{"prompt": "Write a function to separate and print the numbers and their position of a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9", "target": 0.0}
{"prompt": "Write a function to convert the given tuples into set. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}", "target": 0.2}
{"prompt": "Write a function to find the most common elements and their counts of a specified text. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]", "target": 0.0}
{"prompt": "Write a python function to find the length of the shortest word. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2", "target": 0.1}
{"prompt": "Write a function to get an item of a tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')", "target": 0.0}
{"prompt": "Write a function to sort the given tuple list basis the total digits in tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'", "target": 0.0}
{"prompt": "Write a function to display sign of the chinese zodiac for given year. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')", "target": 1.0}
{"prompt": "Write a function to find the maximum of similar indices in two lists of tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]", "target": 0.0}
{"prompt": "Write a function to compute the value of ncr mod p. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1", "target": 0.3}
{"prompt": "Write a python function to find the minimun number of subsets with distinct elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1", "target": 0.0}
{"prompt": "Write a function that gives profit amount if the given amount has profit else return none. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None", "target": 0.6}
{"prompt": "Write a function to find out, if the given number is abundant. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False", "target": 0.0}
{"prompt": "Write a function to split the given string at uppercase letters by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']", "target": 0.0}
{"prompt": "Write a python function to get the position of rightmost set bit. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5", "target": 0.0}
{"prompt": "Write a function to convert an integer into a roman numeral. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")", "target": 0.9}
{"prompt": "Write a python function to find the average of a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2", "target": 0.3}
{"prompt": "Write a function to solve tiling problem. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5", "target": 0.0}
{"prompt": "Write a function to convert a roman numeral to an integer. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100", "target": 0.3}
{"prompt": "Write a python function to find the sum of all even natural numbers within the range l and r. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10", "target": 0.0}
{"prompt": "Write a function to calculate the discriminant value. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)", "target": 0.4}
{"prompt": "Write a python function to check whether the length of the word is even or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True", "target": 0.1}
{"prompt": "Write a function to convert camel case string to snake case string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')", "target": 1.0}
{"prompt": "Write a function to remove an empty tuple from a list of tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ", "target": 0.3}
{"prompt": "Write a python function to accept the strings which contains all vowels. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"", "target": 0.0}
{"prompt": "Write a python function to find maximum possible value for the given periodic function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1", "target": 0.0}
{"prompt": "Write a function to join the tuples if they have similar initial elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]", "target": 0.0}
{"prompt": "Write a function to find minimum of two numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20", "target": 0.2}
{"prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6", "target": 0.0}
{"prompt": "Write a function to concatenate the given two tuples to a nested tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)", "target": 0.0}
{"prompt": "Write a python function to left rotate the string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ", "target": 0.0}
{"prompt": "Write a function to find the minimum total path sum in the given triangle. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9", "target": 0.0}
