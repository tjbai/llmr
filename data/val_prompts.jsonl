{"prompt": "Write a python function to find minimum sum of factors of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2", "target": 0}
{"prompt": "Write a function to count the element frequency in the mixed nested tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}", "target": 0}
{"prompt": "Write a function to convert tuple into list by adding the given string after every element. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']", "target": 0}
{"prompt": "Write a function to find the summation of tuple elements in the given tuple list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95", "target": 0}
{"prompt": "Write a function to check if there is a subset with sum divisible by m. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False", "target": 0}
{"prompt": "Write a function to sort a list of elements using radix sort. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]", "target": 0}
{"prompt": "Write a python function to find the largest postive number from the given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1", "target": 0}
{"prompt": "Write a function to find the square root of a perfect number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20", "target": 0}
{"prompt": "Write a function to calculate volume of a tetrahedron. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81", "target": 0}
{"prompt": "Write a function to find the lcm of the given array elements. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120", "target": 0}
{"prompt": "Write a function to print check if the triangle is scalene or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True", "target": 0}
{"prompt": "Write a function to find the longest bitonic subsequence for the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5", "target": 0}
{"prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']", "target": 0}
{"prompt": "Write a function to find the sum of maximum increasing subsequence of the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10", "target": 0}
{"prompt": "Write a python function to check whether two given lines are parallel or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True", "target": 0}
{"prompt": "Write a python function to capitalize first and last letters of each word of a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"", "target": 0}
{"prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6", "target": 0}
{"prompt": "Write a function to find the list of lists with minimum length. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])", "target": 0}
{"prompt": "Write a function to find the nth jacobsthal-lucas number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17", "target": 0}
{"prompt": "Write a function to find the ration of negative numbers in an array of integers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44", "target": 0}
{"prompt": "Write a function to find minimum number of coins that make a given value. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2", "target": 0}
{"prompt": "Write a function to check if the two given strings are permutations of each other. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True", "target": 0}
{"prompt": "Write a function to remove particular data type elements from the given tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]", "target": 0}
{"prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)", "target": 0}
{"prompt": "Write a function to find the top or bottom surface area of a cylinder. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264", "target": 0}
{"prompt": "Write a function to select the nth items of a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]", "target": 0}
{"prompt": "Write a python function to find the first repeated word in a given string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"", "target": 0}
{"prompt": "Write a python function to convert a given string list to a tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')", "target": 0}
{"prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]", "target": 0}
{"prompt": "Write a python function to find the difference between highest and least frequencies in a given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0", "target": 0}
{"prompt": "Write a function to find if the given number is abundant or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True", "target": 0}
{"prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'", "target": 0}
{"prompt": "Write a function to add two numbers and print number of digits of sum. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)", "target": 0}
{"prompt": "Write a function to flatten the tuple list to a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'", "target": 0}
{"prompt": "Write a python function to toggle only first and last bits of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5", "target": 0}
{"prompt": "Write a function to find the last occurrence of a character in a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None", "target": 0}
{"prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8", "target": 0}
{"prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ", "target": 0}
{"prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369", "target": 0}
{"prompt": "Write a python function to find the maximum element in a sorted and rotated array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3", "target": 0}
{"prompt": "Write a function to extract a specified column from a given nested list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]", "target": 0}
{"prompt": "Write a python function to check whether a given sequence is linear or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"", "target": 0}
{"prompt": "Write a function to convert the given tuple to a floating-point number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123", "target": 0}
{"prompt": "Write a python function to find odd numbers from a mixed list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]", "target": 0}
{"prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6", "target": 0}
{"prompt": "Write a python function to count the pairs with xor as an odd number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2", "target": 0}
{"prompt": "Write a function to toggle characters case in a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")", "target": 0}
{"prompt": "Write a python function to find the digit distance between two integers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7", "target": 0}
{"prompt": "Write a function to find the largest sum of contiguous subarray in the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10", "target": 0}
{"prompt": "Write a function to find the union of elements of the given tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)", "target": 0}
{"prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}", "target": 0}
{"prompt": "Write a python function to find the maximum length of sublist. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5", "target": 0}
{"prompt": "Write a function to extract values between quotation marks of a string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']", "target": 0}
{"prompt": "Write a python function to count unequal element pairs from the given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10", "target": 0}
{"prompt": "Write a python function to split a string into characters. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']", "target": 0}
{"prompt": "Write a function to get the sum of a non-negative integer. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16", "target": 0}
{"prompt": "Write a function to check whether a specified list is sorted or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "target": 0}
{"prompt": "Write a function to create a list of empty dictionaries. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]", "target": 0}
{"prompt": "Write a function to sort each sublist of strings in a given list of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]", "target": 0}
{"prompt": "Write a function to remove words from a given list of strings containing a character or string. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']", "target": 0}
{"prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21", "target": 0}
{"prompt": "Write a python function to remove two duplicate numbers from a given number of lists. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "target": 0}
{"prompt": "Write a python function to calculate the product of the unique numbers of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0", "target": 0}
{"prompt": "Write a function to find the surface area of a cylinder. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848", "target": 0}
{"prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16", "target": 0}
{"prompt": "Write a python function to check whether an array is subarray of another or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False", "target": 0}
{"prompt": "Write a python function to find the last digit in factorial of a given number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0", "target": 0}
{"prompt": "Write a function to interleave lists of the same length. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]", "target": 0}
{"prompt": "Write a function to find the dissimilar elements in the given two tuples. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)", "target": 0}
{"prompt": "Write a function to extract the even elements in the nested mixed tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)", "target": 0}
{"prompt": "Write a python function to find the surface area of the square pyramid. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5", "target": 0}
{"prompt": "Write a function to check if a dictionary is empty or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True", "target": 0}
{"prompt": "Write a function for nth catalan number. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429", "target": 0}
{"prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'", "target": 0}
{"prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]", "target": 0}
{"prompt": "Write a python function to split the array and add the first part to the end. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]", "target": 0}
{"prompt": "Write a function to convert a list to a tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)", "target": 0}
{"prompt": "Write a python function to find the difference between largest and smallest value in a given array. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7", "target": 0}
{"prompt": "Write a function to find perfect squares between two given numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "target": 0}
{"prompt": "Write a function to convert polar coordinates to rectangular coordinates. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))", "target": 0}
{"prompt": "Write a python function to interchange the first and last elements in a list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]", "target": 0}
{"prompt": "Write a python function to find sum of product of binomial co-efficients. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1", "target": 0}
{"prompt": "Write a function to remove leading zeroes from an ip address. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ", "target": 0}
{"prompt": "Write a function to find the difference of first even and odd number of a given list. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9", "target": 0}
{"prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"", "target": 0}
{"prompt": "Write a function to find the size of the given tuple. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))", "target": 0}
{"prompt": "Write a function to find kth element from the given two sorted arrays. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8", "target": 0}
{"prompt": "Write a function to check whether the given number is armstrong or not. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False", "target": 0}
{"prompt": "Write a function to find sum and average of first n natural numbers. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)", "target": 0}
{"prompt": "Write a python function to check whether the given number is even or not using bitwise operator. Your code should satisfy the following tests. Aim for a concise and clean solution. Only return code.\n\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False", "target": 0}
