{"item": {"task_id": 601, "text": "Write a function to find the longest chain which can be formed from the given set of pairs.", "code": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max", "test_list": ["assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3", "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4", "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nfrom typing import List\n\nclass Pair:\n    def __init__(self, num1: int, num2: int):\n        self.num1 = num1\n        self.num2 = num2\n\ndef max_chain_length(pairs: List[Pair], m: int) -> int:\n    pairs.sort(key=lambda x: x.num2)\n    dp = [1] * m\n    for i in range(1, m):\n        for j in range(i):\n            if pairs[i].num1 > pairs[j].num2:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```", "\nclass Pair:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\ndef max_chain_length(pairs, max_length):\n    pairs.sort(key=lambda x: x.end)\n    dp = [1] * max_length\n    for pair in pairs:\n        for i in range(pair.start, pair.end):\n            dp[i] = max(dp[i], dp[i-1] + 1)\n    return max(dp)\n```", "\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef max_chain_length(pairs, n):\n    pairs.sort(key=lambda x: x.y)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if pairs[j].y < pairs[i].x:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```", "\nclass Pair:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\ndef max_chain_length(pairs, k):\n    pairs.sort(key=lambda x: x.end)\n    max_length = 0\n    current_length = 1\n    last_end = pairs[0].end\n    for pair in pairs[1:]:\n        if pair.start > last_end:\n            max_length = max(max_length, current_length)\n            current_length = 1\n        else:\n            current_length += 1\n        last_end = max(last_end, pair.end)\n    return max(max_length, current_length)\n```", "\nclass Pair:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\ndef max_chain_length(pairs, k):\n    pairs.sort(key=lambda x: x.end)\n    longest_chain = 1\n    current_chain = 1\n    last_end = pairs[0].end\n    for pair in pairs[1:]:\n        if pair.start > last_end:\n            current_chain += 1\n            longest_chain = max(longest_chain, current_chain)\n        last_end = max(last_end, pair.end)\n    return longest_chain\n```", "\nfrom typing import List\n\nclass Pair:\n    def __init__(self, a: int, b: int):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(pairs: List[Pair], k: int) -> int:\n    pairs.sort(key=lambda x: x.a)\n    dp = [1] * k\n    for pair in pairs:\n        for i in range(k):\n            if pair.a <= i + 1:\n                dp[i] = max(dp[i], dp[i - 1] + 1 if i > 0 else 1)\n    return max(dp)\n```", "\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef max_chain_length(pairs, k):\n    pairs.sort(key=lambda x: x.y)\n    chain_length = 1\n    max_length = 1\n    prev_end = pairs[0].y\n    for pair in pairs[1:]:\n        if pair.x > prev_end:\n            chain_length += 1\n            prev_end = pair.y\n        if chain_length > max_length:\n            max_length = chain_length\n        if chain_length == k:\n            break\n    return max_length\n```", "\nfrom typing import List, Tuple\n\nclass Pair:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\ndef max_chain_length(pairs: List[Pair], k: int) -> int:\n    pairs.sort(key=lambda x: x.y)\n    dp = [1] * k\n    for i in range(len(pairs)):\n        for j in range(i):\n            if pairs[i].x > pairs[j].y:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```", "\nfrom typing import List\n\nclass Pair:\n    def __init__(self, start: int, end: int):\n        self.start = start\n        self.end = end\n\ndef max_chain_length(pairs: List[Pair], target: int) -> int:\n    pairs.sort(key=lambda x: x.end)\n    dp = [1] * target\n    for pair in pairs:\n        for i in range(pair.start, pair.end):\n            dp[i] = max(dp[i], dp[i-1] + 1)\n    return max(dp)\n```", "\nclass Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(pairs, n):\n    pairs.sort(key=lambda x: x.a)\n    max_length = 0\n    current_length = 1\n    last_end = pairs[0].a\n\n    for pair in pairs[1:]:\n        if pair.a > last_end:\n            current_length += 1\n            last_end = pair.b\n        max_length = max(max_length, current_length)\n\n    return min(max_length, n)\n```"], "num_tokens": [134, 99, 107, 136, 123, 130, 132, 126, 115, 121]}
{"item": {"task_id": 602, "text": "Write a python function to find the first repeated character in a given string.", "code": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "test_list": ["assert first_repeated_char(\"abcabc\") == \"a\"", "assert first_repeated_char(\"abc\") == \"None\"", "assert first_repeated_char(\"123123\") == \"1\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return \"None\"", "\ndef first_repeated_char(s):\n    for char in s:\n        if s.count(char) > 1:\n            return char\n    return \"None\"", "\ndef first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return \"None\"", "\ndef first_repeated_char(s):\n    char_dict = {}\n    for char in s:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return \"None\"", "\ndef first_repeated_char(s):\n    char_dict = {}\n    for char in s:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return \"None\"", "\ndef first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return \"None\"", "\ndef first_repeated_char(s):\n    for char in s:\n        if s.count(char) > 1:\n            return char\n    return \"None\"\n```", "\ndef first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return \"None\"", "\ndef first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return \"None\"", "\ndef first_repeated_char(s):\n    seen = {}\n    for char in s:\n        if char in seen:\n            return char\n        seen[char] = True\n    return \"None\""], "num_tokens": [45, 34, 40, 44, 47, 45, 35, 44, 47, 41]}
{"item": {"task_id": 603, "text": "Write a function to get a lucid number smaller than or equal to n.", "code": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_ludic(n):\n    lucid_numbers = []\n    i = 1\n    while i * i <= n:\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i * i > n:\n            break\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_numbers = [i for i in range(1, n) if all(i % j!= 0 for j in range(2, int(i**0.5) + 1))]\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_numbers = [1]\n    i = 2\n    while lucid_numbers[-1] * 10 < n:\n        if all(i % num > 0 for num in lucid_numbers):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_numbers = [1, 2, 3, 5, 7]\n    i = 11\n    while i <= n:\n        if all(i % j for j in lucid_numbers):\n            lucid_numbers.append(i)\n        i += 2\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_numbers = [i for i in range(1, n + 1) if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1))]\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_nums = [i for i in range(1, n + 1) if all(i % j for j in range(2, int(i ** 0.5) + 1))]\n    return lucid_nums\n```", "\ndef get_ludic(n):\n    lucid_numbers = [i for i in range(1, n+1) if all(i % j for j in range(2, int(i**0.5) + 1))]\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_numbers = [i for i in range(1, n+1) if all(i % j!= 0 for j in range(2, int(i**0.5) + 1))]\n    return lucid_numbers\n```", "\ndef get_ludic(n):\n    lucid_nums = [i for i in range(1, n+1) if all(i % j!= 0 for j in range(2, int(i**0.5) + 1))]\n    return lucid_nums\n```"], "num_tokens": [76, 83, 57, 72, 73, 61, 58, 56, 59, 59]}
{"item": {"task_id": 604, "text": "Write a function to reverse words in a given string.", "code": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))", "test_list": ["assert reverse_words(\"python program\")==(\"program python\")", "assert reverse_words(\"java language\")==(\"language java\")", "assert reverse_words(\"indian man\")==(\"man indian\")"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n```", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n```", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n```", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n```", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n```", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n```", "\ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n```"], "num_tokens": [18, 18, 18, 17, 18, 17, 18, 17, 18, 18]}
{"item": {"task_id": 605, "text": "Write a function to check if the given integer is a prime number.", "code": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False", "test_list": ["assert prime_num(13)==True", "assert prime_num(7)==True", "assert prime_num(-1010)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```", "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```"], "num_tokens": [92, 101, 92, 92, 101, 92, 92, 92, 101, 92]}
{"item": {"task_id": 606, "text": "Write a function to convert degrees to radians.", "code": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian", "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef radian_degree(deg):\n    return deg * 3.14159265359 / 180\n```", "\nimport math\ndef radian_degree(deg):\n    return deg * math.pi / 180\n```", "\nimport math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180\n```", "\nimport math\n\ndef radian_degree(deg):\n    return deg * math.pi / 180\n```", "\nimport math\n\ndef radian_degree(degree):\n    return math.radians(degree)\n```", "\nimport math\n\ndef radian_degree(deg):\n    return deg * math.pi / 180\n```", "\nimport math\ndef radian_degree(deg):\n    return deg * math.pi / 180", "\nimport math\n\ndef radian_degree(deg):\n    return deg * math.pi / 180\n```", "\nimport math\n\ndef radian_degree(degrees):\n    return math.radians(degrees)\n```", "\nimport math\n\ndef radian_degree(angle):\n    return math.pi * angle / 180\n```"], "num_tokens": [24, 22, 23, 22, 20, 22, 20, 22, 20, 22]}
{"item": {"task_id": 607, "text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "code": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)", "test_list": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)", "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n```", "\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n```", "\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n```", "\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n```", "\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n```", "\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n```", "\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n```", "\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n```", "\nimport re\n\ndef find_literals(s, literals):\n    match = re.search(literals, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n```", "\nimport re\n\ndef find_literals(s, literals):\n    match = re.search(re.escape(literals), s)\n    return match.group(0), match.start(), match.end()\n```"], "num_tokens": [41, 44, 41, 44, 44, 44, 41, 41, 45, 38]}
{"item": {"task_id": 608, "text": "Write a python function to find nth bell number.", "code": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "test_list": ["assert bell_Number(2) == 2", "assert bell_Number(3) == 5", "assert bell_Number(4) == 15"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sum(bell_Number(i) * bell_Number(n-i) for i in range(1, n))\n```", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n+1):\n            a, b = b, a+b\n        return b", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(3, n):\n            a, b = b, a + b\n        return b\n```", "\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(binomial(n, k) * bell_Number(n - k) for k in range(n + 1))\n```", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    else:\n        return sum(binomial(n-1, r) for r in range(n))\n```", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    else:\n        return sum(bell_Number(i) * bell_Number(n-i) for i in range(1, n))", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(3, n):\n            a, b = b, a + b\n        return b\n```", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n+1):\n            a, b = b, a+b\n        return b\n```", "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum(2**k * math.comb(n-1, k) for k in range(n))\n```"], "num_tokens": [58, 70, 71, 71, 48, 40, 45, 71, 72, 58]}
{"item": {"task_id": 609, "text": "Write a python function to find minimum possible value for the given periodic function.", "code": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B", "test_list": ["assert floor_Min(10,20,30) == 15", "assert floor_Min(1,2,1) == 0", "assert floor_Min(11,10,9) == 9"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef floor_Min(a, b, c):\n    return math.floor(min(a, b, c) / 10) * 10\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c) - 0.5\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c) - 1 if min(a, b, c) % 2 == 1 else min(a, b, c)\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Min(a, b, c):\n    return min(a, b, c) - 1 if min(a, b, c) % 2!= 0 else min(a, b, c)\n```", "\nimport math\n\ndef floor_Min(a, b, c):\n    return math.floor((a + b + c) / 3)\n```"], "num_tokens": [34, 21, 21, 27, 46, 21, 21, 21, 46, 30]}
{"item": {"task_id": 610, "text": "Write a python function to remove the k'th element from a given list.", "code": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]", "test_list": ["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]", "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```", "\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```", "\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```", "\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]", "\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```", "\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]", "\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```", "\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```", "\ndef remove_kth_element(lst, k):\n    lst.pop(k-1)\n    return lst\n```", "\ndef remove_kth_element(lst, k):\n    lst.pop(k-1)\n    return lst\n```"], "num_tokens": [24, 24, 24, 23, 24, 23, 24, 24, 23, 23]}
{"item": {"task_id": 611, "text": "Write a function to find the maximum of nth column from the given tuple list.", "code": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ", "test_list": ["assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19", "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10", "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_of_nth(lst, n):\n    return max(row[n] for row in lst)\n```", "\ndef max_of_nth(lst, n):\n    return max(t[n] for t in lst)\n```", "\ndef max_of_nth(tuples, n):\n    return max(t[n] for t in tuples)\n```", "\ndef max_of_nth(lst, n):\n    return max(x[n] for x in lst)\n```", "\ndef max_of_nth(tuples, n):\n    return max(t[n] for t in tuples)\n```", "\ndef max_of_nth(tuples, n):\n    return max(row[n] for row in tuples)\n```", "\ndef max_of_nth(lst, n):\n    return max(x[n] for x in lst)\n```", "\ndef max_of_nth(tuples, n):\n    return max(tuple[n] for tuple in tuples)\n```", "\ndef max_of_nth(tuples, n):\n    return max(row[n] for row in tuples)\n```", "\ndef max_of_nth(tuples, n):\n    return max(row[n] for row in tuples)\n```"], "num_tokens": [22, 22, 23, 22, 23, 23, 22, 23, 23, 23]}
{"item": {"task_id": 612, "text": "Write a python function to merge the first and last elements separately in a list of lists.", "code": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ", "test_list": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]", "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef merge(lst):\n    return [x[:1] + y[-1:] + z[1:-1] for x, y, z in zip(*[i for i in lst])]\n```", "\ndef merge(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][0] + lst[i][-1])\n    return [x for pair in result for x in pair]\n```", "\ndef merge(lists):\n    return [[x[0] + (y[-1] for y in lists) if i == 0 else y[:-1] + [x[-1]] for i, x in enumerate(lists)]\n```", "\ndef merge(lst):\n    return [l[:1] + l[-1:] + l[1:-1] for l in lst]\n```", "\ndef merge(lst):\n    return [x + y[-1:] for x, y in zip(*[i + [i[-1:]] for i in lst])]\n```", "\ndef merge(list_of_lists):\n    return [first + last for first, last in zip(*[l[0] + l[-1] for l in list_of_lists])]\n```", "\ndef merge(lst):\n    return [first + last for first, last in zip(*[x for x in lst]) if len(x) > 0]\n```", "\ndef merge(list_of_lists):\n    return [[sublist[0], sublist[-1]] for sublist in list_of_lists]\n```", "\ndef merge(lst):\n    return [list(map(lambda x: x[:1] + x[-1:], lst))]\n```", "\ndef merge(lists):\n    return [lst[:1] + lst[-1:] + lst[1:-1] for lst in lists]\n```"], "num_tokens": [42, 46, 51, 31, 37, 39, 35, 28, 26, 32]}
{"item": {"task_id": 613, "text": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "code": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ", "test_list": ["assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]", "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]", "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef maximum_value(record_list):\n    return [(key, max(value)) for key, value in record_list]\n```", "\ndef maximum_value(record_list):\n    return [(k, max(v)) for k, v in record_list]\n```", "\ndef maximum_value(record_list):\n    return tuple((k, max(v)) for k, v in record_list)\n```", "\ndef maximum_value(record_list):\n    return [(k, max(v)) for k, v in record_list]\n```", "\ndef maximum_value(record_list):\n    return [(k, max(v)) for k, v in record_list]\n```", "\ndef maximum_value(record_list):\n    return [(k, max(v)) for k, v in record_list]\n```", "\ndef maximum_value(record_list):\n    return [(key, max(value)) for key, value in record_list]\n```", "\ndef maximum_value(record_list):\n    return [(key, max(value)) for key, value in record_list]\n```", "\ndef maximum_value(record_list):\n    return [(k, max(v)) for k, v in record_list]\n```", "\ndef maximum_value(record_list):\n    return [(key, max(value)) for key, value in record_list]\n```"], "num_tokens": [25, 25, 26, 25, 25, 25, 25, 25, 25, 25]}
{"item": {"task_id": 614, "text": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "code": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)", "test_list": ["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37", "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n```", "\ndef cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n```", "\ndef cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n```", "\ndef cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n```", "\ndef cummulative_sum(tuples_list):\n    return sum(sum(t) for t in tuples_list)\n```", "\ndef cummulative_sum(tuples_list):\n    return sum(sum(t) for t in tuples_list)\n```", "\ndef cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n```", "\ndef cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n```", "\ndef cummulative_sum(tuples_list):\n    return sum(sum(t) for t in tuples_list)\n```", "\ndef cummulative_sum(tuple_list):\n    return sum(sum(t) for t in tuple_list)\n```"], "num_tokens": [22, 22, 22, 22, 24, 24, 22, 22, 24, 23]}
{"item": {"task_id": 615, "text": "Write a function to find average value of the numbers in a given tuple of tuples.", "code": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "test_list": ["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]", "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef average_tuple(tuples):\n    return [sum(sub_tuple) / len(sub_tuple) for sub_tuple in tuples]\n```", "\ndef average_tuple(tuples):\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in tuples]\n```", "\ndef average_tuple(tuples):\n    return [sum(i) / len(i) for i in tuples]\n```", "\ndef average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]\n```", "\ndef average_tuple(t):\n    return [sum(i)/len(i) for i in t]\n```", "\ndef average_tuple(tuples):\n    return [sum(sub_tuple) / len(sub_tuple) for sub_tuple in tuples]\n```", "\ndef average_tuple(tuples):\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in tuples]\n```", "\ndef average_tuple(tuples):\n    return [sum(i)/len(i) for i in tuples]\n```", "\ndef average_tuple(tuples):\n    return [sum(i) / len(i) for i in tuples]\n```", "\ndef average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]\n```"], "num_tokens": [27, 27, 24, 24, 22, 27, 27, 23, 24, 24]}
{"item": {"task_id": 616, "text": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "code": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "test_list": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)", "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(i % j for i, j in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(i % j for i, j in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(i1 % i2 for i1, i2 in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(i % j for i, j in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple((a % b for a, b in zip(t1, t2)))\n```", "\ndef tuple_modulo(t1, t2):\n    return tuple(i % j for i, j in zip(t1, t2))\n```"], "num_tokens": [31, 31, 31, 35, 31, 31, 31, 31, 32, 31]}
{"item": {"task_id": 617, "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "code": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2", "test_list": ["assert min_Jumps(3,4,11)==3.5", "assert min_Jumps(3,4,0)==0", "assert min_Jumps(11,14,11)==1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef min_Jumps(x, y, d):\n    if d > max(x, y):\n        return float('inf')\n    if d == 0:\n        return 0\n    return math.ceil(math.sqrt((x**2 + y**2) / (2 * d)))\n```", "\ndef min_Jumps(d, h, maxJump):\n    if maxJump == 0:\n        return 0\n    return (d + h - 1) // maxJump + (0 if (d + h - 1) % maxJump == 0 else 1)\n```", "\ndef min_Jumps(d, y, maxJump):\n    if maxJump == 0:\n        return 0\n    jumps = 0\n    while y > 0:\n        y -= d\n        jumps += 1\n        if y <= 0:\n            break\n        maxJump -= d\n        if maxJump <= 0:\n            break\n    return jumps\n```", "\ndef min_Jumps(x, y, d):\n    return (abs(y) + abs(x)) / d\n```", "\ndef min_Jumps(d, max_length, dest):\n    jumps = 0\n    current_distance = 0\n    while current_distance < dest:\n        jumps += 1\n        current_distance += min(max_length, dest - current_distance)\n    return jumps\n```", "\ndef min_Jumps(d, p, length):\n    if p <= 0:\n        return 0\n    jumps = 0\n    while p > 0:\n        p -= length\n        jumps += 1\n        if p <= 0:\n            break\n        d -= length\n        if d <= 0:\n            return jumps + (d + length - 1) / length\n    return jumps\n```", "\ndef min_Jumps(d, maxJump, target):\n    jumps = 0\n    while d < target:\n        if d + maxJump >= target:\n            jumps += (target - 1) // maxJump\n            break\n        jumps += 1\n        d += maxJump\n    return jumps\n```", "\ndef min_Jumps(length, d, max_d):\n    jumps = 0\n    while d > 0:\n        d -= length\n        jumps += 1\n        if d <= 0:\n            break\n        if max_d <= d:\n            d = max_d\n            jumps += 0.5\n            break\n    return jumps\n```", "\ndef min_Jumps(d, x, y):\n    return (abs(y)+abs(x-d)) / d if y > 0 else 0\n```", "\ndef min_Jumps(m, n, d):\n    if d <= 0:\n        return 0\n    jumps = 0\n    while d > 0:\n        if d >= m:\n            d -= m\n            jumps += 1\n        elif d >= n:\n            d -= n\n            jumps += 1\n        else:\n            return jumps + (d / n)\n    return jumps\n```"], "num_tokens": [64, 62, 82, 26, 57, 90, 67, 76, 34, 88]}
{"item": {"task_id": 618, "text": "Write a function to divide two lists using map and lambda function.", "code": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x / y, list1, list2))\n```", "\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x / y, list1, list2))", "\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x/y, list1, list2))", "\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x/y, list1, list2))", "\ndef div_list(lst1, lst2):\n    return list(map(lambda x, y: x / y, lst1, lst2))\n```", "\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x / y, list1, list2))", "\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x/y, list1, list2))\n```", "\ndef div_list(num_list, denom_list):\n    return list(map(lambda x, y: x / y, num_list, denom_list))", "\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x / y, list1, list2))\n```", "\ndef div_list(list1, list2):\n    return list(map(lambda x, y: x / y, list1, list2))\n```"], "num_tokens": [31, 30, 29, 29, 31, 30, 30, 30, 31, 31]}
{"item": {"task_id": 619, "text": "Write a function to move all the numbers in it to the given string.", "code": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ", "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef move_num(s):\n    return re.sub(r'\\d+', lambda x: str(int(x.group())) * len(x.group()), s)\n```", "\ndef move_num(s):\n    return ''.join(c if not c.isdigit() else str(int(c)) for c in s)\n```", "\ndef move_num(s):\n    result = ''\n    num = ''\n    for char in s:\n        if char.isdigit():\n            num += char\n        else:\n            if num:\n                result += num\n                num = ''\n            result += char\n    if num:\n        result += num\n    return result\n```", "\ndef move_num(s):\n    return ''.join(char if not char.isdigit() else str(int(char)) for char in s)\n```", "\ndef move_num(s):\n    return ''.join(c for c in s if not c.isdigit()) + ''.join(str(int(d)) for d in ''.join(c for c in s if c.isdigit()).split())\n```", "\nimport re\n\ndef move_num(s):\n    return re.sub(r'\\d+', lambda x: str(int(x.group())), s)\n```", "\ndef move_num(s):\n    return ''.join(c if not c.isdigit() else str(int(c)) for c in s)\n```", "\ndef move_num(s):\n    return ''.join(c if not c.isdigit() else str(int(c)) for c in s)\n```", "\nimport re\n\ndef move_num(s):\n    return re.sub(r'\\d+', lambda x: str(int(x.group())), s)\n```", "\ndef move_num(s):\n    return ''.join(c if not c.isdigit() else str(int(c)) for c in s)\n```"], "num_tokens": [34, 28, 66, 28, 45, 29, 28, 28, 29, 28]}
{"item": {"task_id": 620, "text": "Write a function to find the largest subset where each pair is divisible.", "code": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)", "test_list": ["assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4", "assert largest_subset([10, 5, 3, 15, 20], 5) == 3", "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef largest_subset(nums, k):\n    nums.sort()\n    max_subset = 0\n    current = 1\n    for num in nums:\n        if num % k == 0:\n            current += 1\n        else:\n            max_subset = max(max_subset, current)\n            current = 1\n    return max(max_subset, current)\n```", "\ndef largest_subset(arr, divisor):\n    arr.sort()\n    count = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] % divisor == 0:\n            count += 1\n            i += 1\n            while i < len(arr) and arr[i] % divisor == 0:\n                i += 1\n        else:\n            i += 1\n    return count\n```", "\ndef largest_subset(lst, divisor):\n    lst.sort()\n    subset = [1]\n    max_len = 1\n    for num in lst:\n        if num % divisor == 0 and len(subset) < len(lst) - lst.index(num):\n            subset.append(num)\n            max_len = max(max_len, len(subset))\n    return max_len\n```", "\ndef largest_subset(nums, k):\n    nums.sort()\n    i = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] % k == 0:\n            count += 1\n            i += 1\n        else:\n            while i < len(nums) and nums[i] % k!= 0:\n                i += 1\n            if i < len(nums):\n                count += 1\n                i += 1\n    return count\n```", "\ndef largest_subset(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % k == 0:\n            count += 1\n            i -= 1\n    return count\n```", "\ndef largest_subset(nums, divisor):\n    nums.sort()\n    subset = []\n    count = 0\n    for num in nums:\n        if num % divisor == 0 and count < len(subset) or not subset:\n            subset.append(num)\n            count += 1\n    return count\n```", "\ndef largest_subset(nums, k):\n    nums.sort()\n    count = 0\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] % k == 0:\n            count += 1\n            i -= 1\n        if count == 4:\n            break\n    return count\n```", "\ndef largest_subset(arr, n):\n    arr.sort()\n    subset = [1]\n    for num in arr:\n        if num % n == 0:\n            subset.append(num)\n    return len(subset)\n```", "\ndef largest_subset(arr, k):\n    arr.sort()\n    max_len = 0\n    current_len = 0\n    for i in range(len(arr)):\n        if arr[i] % k == 0:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len\n```", "\ndef largest_subset(nums, divisor):\n    nums.sort()\n    count = 0\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] % divisor == 0:\n            count += 1\n            i -= 1\n    return count\n```"], "num_tokens": [75, 92, 77, 105, 65, 64, 75, 46, 80, 65]}
{"item": {"task_id": 621, "text": "Write a function to increment the numeric values in the given strings by k.", "code": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ", "test_list": ["assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']", "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']", "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef increment_numerics(lst, k):\n    return [str(int(i) + k) if i.isdigit() else i for i in lst]\n```", "\ndef increment_numerics(lst, k):\n    return [str(int(x) + k) if x.isdigit() else x for x in lst]\n```", "\ndef increment_numerics(lst, k):\n    return [str(int(i) + k) if i.isdigit() else i for i in lst]\n```", "\ndef increment_numerics(lst, k):\n    result = []\n    for s in lst:\n        if s.isdigit():\n            result.append(str(int(s) + k))\n        else:\n            result.append(s)\n    return result\n```", "\ndef increment_numerics(lst, k):\n    return [s if not s.isdigit() else str(int(s) + k) if int(s) + k < 10 else str(int(s) + k - 9) if int(s) + k >= 10 and int(s) + k < 100 else str(int(s) + k - 99) if int(s) + k >= 100 and int(s) + k < 1000 else str(int(s) + k - 999) for s in lst]\n```", "\ndef increment_numerics(lst, k):\n    return [str(int(i) + k) if i.isdigit() else i for i in lst]\n```", "\ndef increment_numerics(lst, k):\n    return [str(int(x) + k) if x.isdigit() else x for x in lst]\n```", "\ndef increment_numerics(lst, k):\n    result = []\n    for item in lst:\n        if item.isdigit():\n            result.append(str(int(item) + k))\n        else:\n            result.append(item)\n    return result\n```", "\ndef increment_numerics(lst, k):\n    return [str(int(i) + k) if i.isdigit() else i for i in lst]\n```", "\ndef increment_numerics(lst, k):\n    return [s if not s.isdigit() else str(int(s) + k) for s in lst]\n```"], "num_tokens": [32, 32, 32, 48, 112, 32, 32, 48, 32, 33]}
{"item": {"task_id": 622, "text": "Write a function to find the median of two sorted arrays of same size.", "code": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_median(arr1, arr2, n):\n    merged = sorted(arr1 + arr2)\n    return float(merged[n//2] + merged[(n-1)//2]) / 2 if n % 2 == 1 else float(merged[n//2])\n```", "\ndef get_median(arr1, arr2, n):\n    merged = sorted(arr1 + arr2)\n    return float(sum(merged[i] for i in range(n-1)) / n) if n % 2!= 0 else float(merged[n//2])\n```", "\ndef get_median(arr1, arr2, size):\n    merged = sorted(arr1 + arr2)\n    return float(merged[size//2] + merged[(size//2 + 1)] / 2) if size % 2!= 0 else float(merged[size//2])\n```", "\ndef get_median(arr1, arr2, n):\n    merged = sorted(arr1 + arr2)\n    return float(merged[n//2] if n%2 else (merged[n//2-1]+merged[n//2])/2)\n```", "\ndef get_median(arr1, arr2, size):\n    merged = sorted(arr1 + arr2)\n    return sum(merged[size//2 - 1:size//2 + 1]) / 2 if size % 2 == 1 else merged[size//2]\n```", "\ndef get_median(arr1, arr2, n):\n    merged = sorted(arr1 + arr2)\n    return sum(merged[i-1] for i in range(1, n+1)) / n\n```", "\ndef get_median(arr1, arr2, n):\n    merged = sorted(arr1 + arr2)\n    return sum(merged[i] for i in range(n-1)) / n if n % 2!= 0 else merged[n//2]\n```", "\ndef get_median(arr1, arr2, size):\n    merged = sorted(arr1 + arr2)\n    return float(merged[size // 2] + merged[(size // 2 + 1) % size] / 2) if size % 2 == 1 else float(merged[size // 2])\n```", "\ndef get_median(arr1, arr2, size):\n    merged = sorted(arr1 + arr2)\n    return sum(merged[i] for i in range(size)) / size\n```", "\ndef get_median(arr1, arr2, size):\n    merged = sorted(arr1 + arr2)\n    return float(merged[size//2] + merged[(size//2 + 1)%size]) / 2\n```"], "num_tokens": [61, 59, 63, 53, 59, 47, 55, 69, 40, 49]}
{"item": {"task_id": 623, "text": "Write a function to find the n-th power of individual elements in a list using lambda function.", "code": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```", "\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```", "\nlambda lst, n: [i**n for i in lst]\n```", "\nlambda lst, n: [i**n for i in lst]\n```", "\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```", "\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```", "\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```", "\ndef nth_nums(lst, n):\n    return [i**n for i in lst]\n```", "\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```", "\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```"], "num_tokens": [23, 23, 17, 17, 23, 23, 23, 21, 23, 23]}
{"item": {"task_id": 624, "text": "Write a python function to convert the given string to upper case.", "code": "def is_upper(string):\r\n  return (string.upper())", "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_upper(s):\n    return s.upper()", "\ndef is_upper(s):\n    return s.upper()\n```", "\ndef is_upper(s):\n    return s.upper()\n```", "\ndef is_upper(s):\n    return s.upper()", "\ndef is_upper(s):\n    return s.upper()\n```", "\ndef is_upper(s):\n    return s.upper()\n```", "\ndef is_upper(s):\n    return s.upper()\n```", "\ndef is_upper(s):\n    return s.upper()", "\ndef is_upper(s):\n    return s.upper()\n```", "\ndef is_upper(s):\n    return s.upper()"], "num_tokens": [12, 13, 13, 12, 13, 13, 13, 12, 13, 12]}
{"item": {"task_id": 625, "text": "Write a python function to interchange first and last elements in a given list.", "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef swap_List(lst):\n    return [lst[-1]] + lst[1:-1] + [lst[0]]\n```", "\ndef swap_List(lst):\n    return [lst[-1]] + lst[1:-1] + [lst[0]]\n```", "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```", "\ndef swap_List(lst):\n    return [lst[-1]] + lst[1:-1] + [lst[0]]\n```", "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```", "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```", "\ndef swap_List(lst):\n    return [lst[-1]] + lst[1:-1] + [lst[0]]\n```", "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst", "\ndef swap_List(lst):\n    return [lst[-1]] + lst[1:-1] + [lst[0]]\n```", "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"], "num_tokens": [28, 28, 39, 28, 39, 39, 28, 37, 28, 39]}
{"item": {"task_id": 626, "text": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "code": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "test_list": ["assert triangle_area(0) == 0", "assert triangle_area(-1) == -1", "assert triangle_area(2) == 4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return -1\n    else:\n        return 0.5 * radius ** 2\n```", "\nimport math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    return 0.5 * r * r\n```", "\nimport math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    return 0.5 * r ** 2\n```", "\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return -1\n    return 0.5 * radius ** 2\n```", "\nimport math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    return (r**2) * math.sqrt(3) / 4\n```", "\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return -1\n    return 0.5 * radius ** 2 * math.sin(math.pi/2)", "\nimport math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    return (r * r) / 2\n```", "\nimport math\n\ndef triangle_area(radius):\n    return 0.5 * radius**2 if radius >= 0 else -1\n```", "\nimport math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    return (r**2 * math.sqrt(3)) / 4\n```", "\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return -1\n    return (radius**2) * math.sqrt(3) / 4\n```"], "num_tokens": [38, 34, 35, 35, 40, 41, 34, 30, 39, 40]}
{"item": {"task_id": 627, "text": "Write a python function to find the smallest missing number from the given array.", "code": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "test_list": ["assert find_First_Missing([0,1,2,3],0,3) == 4", "assert find_First_Missing([0,1,2,6,9],0,4) == 3", "assert find_First_Missing([2,3,5,8,9],0,4) == 0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_First_Missing(arr, start, end):\n    return next(i for i in range(start, end+1) if i not in arr)\n```", "\ndef find_First_Missing(arr, start, end):\n    for i in range(start, end + 1):\n        if i not in arr:\n            return i\n```", "\ndef find_First_Missing(arr, start, end):\n    for i in range(start, end+1):\n        if i not in arr:\n            return i\n```", "\ndef find_First_Missing(nums, start, end):\n    for i in range(start, end + 1):\n        if i not in nums:\n            return i\n```", "\ndef find_First_Missing(arr, start, end):\n    for i in range(start, end + 1):\n        if i not in arr:\n            return i\n```", "\ndef find_First_Missing(arr, start, end):\n    for i in range(start, end+1):\n        if i not in arr:\n            return i\n```", "\ndef find_First_Missing(arr, start, end):\n    for i in range(start, end + 1):\n        if i not in arr:\n            return i\n```", "\ndef find_First_Missing(arr, start, end):\n    for i in range(start, end+1):\n        if i not in arr:\n            return i\n```", "\ndef find_First_Missing(nums, start, end):\n    for i in range(start, end + 1):\n        if i not in nums:\n            return i\n```", "\ndef find_First_Missing(nums, start, end):\n    for i in range(start, end+1):\n        if i not in nums:\n            return i\n```"], "num_tokens": [34, 37, 36, 37, 37, 36, 37, 36, 37, 36]}
{"item": {"task_id": 628, "text": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "code": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)", "test_list": ["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'", "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```", "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```"], "num_tokens": [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]}
{"item": {"task_id": 629, "text": "Write a python function to find even numbers from a mixed list.", "code": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "test_list": ["assert Split([1,2,3,4,5]) == [2,4]", "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]", "assert Split ([8,12,15,19]) == [8,12]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]\n```", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]\n```", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]\n```", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]\n```", "\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]\n```"], "num_tokens": [23, 24, 24, 23, 23, 24, 23, 23, 24, 24]}
{"item": {"task_id": 630, "text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "code": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```", "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n```"], "num_tokens": [81, 82, 82, 81, 82, 82, 81, 81, 82, 82]}
{"item": {"task_id": 631, "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "code": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)", "test_list": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assert replace_spaces('The Avengers') == 'The_Avengers'", "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\s|_)', lambda m: '_' if m.group() =='' else'', s)\n```", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\s|_)', lambda x: '_' if x.group() =='' else'', s)\n```", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\s|_)', lambda m: '_' if m.group() =='' else'', s)", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(' ', '_', re.sub('_','', s))\n```", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\s|_)', lambda m: '_' if m.group() =='' else'', s)\n```", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\s|_)', lambda m: '_' if m.group() =='' else'', s)", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\W)', lambda m: '_' if m.group() =='' else'', s)\n```", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(' ', '_', re.sub('_','', s))", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(\\s)', lambda x: '_' if x.group() =='' else'', s)\n```", "\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'([A-Za-z])\\s|(?<!^)(?<!\\s)\\s', lambda m: '_' if m.group(0) =='' else m.group(1), s)\n```"], "num_tokens": [36, 36, 35, 24, 36, 35, 34, 23, 34, 56]}
{"item": {"task_id": 632, "text": "Write a python function to move all zeroes to the end of the given list.", "code": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)", "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef move_zero(nums):\n    return [x for x in filter(lambda x: x!= 0, nums) + [0] * nums.count(0)]\n```", "\ndef move_zero(nums):\n    return [x for x in nums if x!= 0] + [x for x in nums if x == 0]", "\ndef move_zero(lst):\n    return [x for x in filter(lambda x: x!= 0, lst) + [0] * lst.count(0)]\n```", "\ndef move_zero(lst):\n    return [i for i in filter(lambda x: x!= 0, lst) + [0] * lst.count(0)]", "\ndef move_zero(nums):\n    return [num for num in nums if num!= 0] + [0] * nums.count(0)", "\ndef move_zero(lst):\n    return [i for i in filter(lambda x: x!= 0, lst) + [0] * lst.count(0)]\n```", "\ndef move_zero(lst):\n    return [x for x in filter(lambda x: x!= 0, lst) + [0] * (len(lst) - len(filter(lambda x: x!= 0, lst)))]\n```", "\ndef move_zero(lst):\n    return [i for i in filter(lambda x: x!= 0, lst) + [i for i in filter(lambda x: x == 0, lst)]]\n```", "\ndef move_zero(lst):\n    return [i for i in filter(lambda x: x!= 0, lst) + [0] * (len(lst) - len(lst) - len(filter(lambda x: x!= 0, lst)))]\n```", "\ndef move_zero(lst):\n    return [x for x in lst if x!= 0] + [x for x in lst if x == 0]\n```"], "num_tokens": [36, 34, 36, 35, 31, 36, 49, 44, 53, 35]}
{"item": {"task_id": 633, "text": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "code": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "test_list": ["assert pair_OR_Sum([5,9,7,6],4) == 47", "assert pair_OR_Sum([7,3,5],3) == 12", "assert pair_OR_Sum([7,3],2) == 4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef pair_OR_Sum(arr, target):\n    return sum(a ^ b for a in arr for b in arr) - target * (len(arr) * (len(arr) - 1) // 2)", "\ndef pair_OR_Sum(arr, n):\n    return sum(a^b for a in arr for b in arr) - n*(n-1)*(2**n)//2\n```", "\ndef pair_OR_Sum(arr, k):\n    return sum(a ^ b for a in arr for b in arr) - k * len(arr)\n```", "\ndef pair_OR_Sum(arr, n):\n    return sum(a ^ b for a in arr for b in arr) - n * (n - 1) * (n & 1)", "\ndef pair_OR_Sum(arr, n):\n    return sum((x ^ y) for x in arr for y in arr if x!= y) % n\n```", "\ndef pair_OR_Sum(nums, k):\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result ^= nums[i] ^ nums[j]\n    return result ^ k\n```", "\ndef pair_OR_Sum(arr, k):\n    total_xor = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            total_xor += arr[i] ^ arr[j]\n    return total_xor\n```", "\ndef pair_OR_Sum(arr, k):\n    return sum(x ^ y for x in arr for y in arr) - k * len(arr)\n```", "\ndef pair_OR_Sum(arr, target):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum % target\n```", "\ndef pair_OR_Sum(arr, k):\n    return sum((x ^ y) for x in arr for y in arr) - k\n```"], "num_tokens": [46, 40, 33, 42, 36, 54, 55, 33, 57, 32]}
{"item": {"task_id": 634, "text": "Write a python function to find the sum of fourth power of first n even natural numbers.", "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "test_list": ["assert even_Power_Sum(2) == 272", "assert even_Power_Sum(3) == 1568", "assert even_Power_Sum(4) == 5664"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n, 2))", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n, 2))", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n, 2))\n```", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n+1, 2))\n```", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n+1, 2))", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n+1, 2))\n```", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n+1, 2))\n```", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n+1, 2))", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n+1, 2))\n```", "\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n, 2))"], "num_tokens": [30, 30, 31, 33, 32, 33, 33, 32, 33, 30]}
{"item": {"task_id": 635, "text": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "code": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "test_list": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport heapq\n\ndef heap_sort(arr):\n    heap = []\n    for val in arr:\n        heapq.heappush(heap, val)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result\n```", "\nimport heapq\n\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n```", "\nimport heapq\n\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n```", "\nimport heapq\n\ndef heap_sort(lst):\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n```", "\nimport heapq\n\ndef heap_sort(lst):\n    heap = []\n    for value in lst:\n        heapq.heappush(heap, value)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result\n```", "\nimport heapq\n\ndef heap_sort(lst):\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n```", "\nimport heapq\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result\n```", "\nimport heapq\n\ndef heap_sort(lst):\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n    sorted_lst = []\n    while heap:\n        sorted_lst.append(heapq.heappop(heap))\n    return sorted_lst\n```", "\nimport heapq\n\ndef heap_sort(lst):\n    return [heapq.heappop(heap) for heap in ([i for i in lst] for _ in range(len(lst)))]\n```", "\nimport heapq\n\ndef heap_sort(lst):\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n```"], "num_tokens": [52, 48, 48, 28, 52, 28, 53, 55, 39, 28]}
{"item": {"task_id": 636, "text": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "code": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "test_list": ["assert Check_Solution(2,0,2) == \"Yes\"", "assert Check_Solution(2,-5,2) == \"Yes\"", "assert Check_Solution(1,2,3) == \"No\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\nimport math\n\ndef Check_Solution(a, b, c):\n    D = math.sqrt(b**2 - 4*a*c)\n    if D == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    discriminant = (b**2) - (4*a*c)\n    if discriminant == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\nimport math\n\ndef Check_Solution(a, b, c):\n    d = math.sqrt(b**2 - 4*a*c)\n    r1 = (-b + d) / (2*a)\n    r2 = (-b - d) / (2*a)\n    return \"Yes\" if r1 == 1/r2 or r2 == 1/r1 else \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return \"No\"\n    elif D == 0:\n        return \"Yes\"\n    else:\n        r1 = (-b + D**0.5) / (2*a)\n        r2 = (-b - D**0.5) / (2*a)\n        return \"Yes\" if r1 == 1/r2 or r2 == 1/r1 else \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    d = (b**2) - (4*a*c)\n    if d == 0:\n        root1 = -b / (2*a)\n        root2 = root1\n    else:\n        root1 = (-b + d**0.5) / (2*a)\n        root2 = (-b - d**0.5) / (2*a)\n    if root1 == 1/root2 or root2 == 1/root1:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return \"No\"\n    elif D == 0:\n        return \"Yes\"\n    else:\n        root1 = (-b + D**0.5) / (2*a)\n        root2 = (-b - D**0.5) / (2*a)\n        return \"Yes\" if root1 == 1/root2 or root2 == 1/root1 else \"No\"\n```", "\nimport math\n\ndef Check_Solution(a, b, c):\n    D = math.sqrt(b**2 - 4*a*c)\n    root1 = (-b + D) / (2*a)\n    root2 = (-b - D) / (2*a)\n    return \"Yes\" if root1 == 1 / root2 or root2 == 1 / root1 else \"No\"\n```"], "num_tokens": [45, 50, 45, 45, 49, 83, 113, 122, 113, 85]}
{"item": {"task_id": 637, "text": "Write a function to check whether the given amount has no profit and no loss", "code": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef noprofit_noloss(amount, cost):\n    return cost <= amount <= cost + cost\n```", "\ndef noprofit_noloss(amount, cost):\n    return amount == cost or amount < cost\n```", "\ndef noprofit_noloss(cost, selling_price):\n    return cost == selling_price\n```", "\ndef noprofit_noloss(cost, selling_price):\n    return cost <= selling_price\n```", "\ndef noprofit_noloss(cost, selling):\n    return cost == selling\n```", "\ndef noprofit_noloss(selling_price, buying_price):\n    return selling_price <= buying_price\n```", "\ndef noprofit_noloss(cost, selling):\n    return cost == selling\n```", "\ndef noprofit_noloss(amount, cost):\n    return cost <= amount <= cost + cost\n```", "\ndef noprofit_noloss(cost, selling):\n    return cost == selling\n```", "\ndef noprofit_noloss(cost, selling_price):\n    return cost == selling_price\n```"], "num_tokens": [24, 24, 22, 22, 20, 25, 20, 24, 20, 22]}
{"item": {"task_id": 638, "text": "Write a function to calculate wind chill index.", "code": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,70)==86", "assert wind_chill(10,100)==116"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50:\n        return 35.74 + 0.6215*temperature - 35.75*wind_speed**0.16 + 0.4275*temperature*wind_speed**0.16\n    else:\n        return temperature\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50 and wind_speed > 120:\n        wind_chill_index = 35.74 + 0.6215*temperature - 35.75*wind_speed**0.16 + 0.4275*temperature*wind_speed**0.16\n    else:\n        wind_chill_index = temperature\n    return round(wind_chill_index)\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50 and wind_speed > 3:\n        wind_chill_index = 35.74 + 0.6215*temperature - 35.75*wind_speed**0.16 + 0.4275*temperature*wind_speed**0.16\n    else:\n        wind_chill_index = temperature\n    return round(wind_chill_index)\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50:\n        wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * wind_speed**0.16 + 0.4275 * temperature * wind_speed**0.16\n        return round(wind_chill_index)\n    else:\n        return temperature\n```", "\ndef wind_chill(temp, wind_speed):\n    if temp < 50 and wind_speed > 120:\n        return 35.74 + 0.6215 * temp - 35.75 * wind_speed**(0.16) + 0.4275 * temp * wind_speed**(0.16)\n    else:\n        return None\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50:\n        return 35.74 + 0.6215*temperature - 35.75*wind_speed**0.16 + 0.4275*temperature*wind_speed**0.16\n    else:\n        return temperature\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50:\n        return round(35.74 + 0.6215*temperature - 35.75*wind_speed**0.16 + 0.4275*temperature*wind_speed**0.16)\n    else:\n        return temperature\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50 and wind_speed > 40:\n        return 35.74 + 0.6215*temperature - 35.75*(wind_speed**0.16) + 0.4275*temperature*(wind_speed**0.16)\n    else:\n        return temperature\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50:\n        return 35.74 + 0.6215*temperature - 35.75*(wind_speed**0.16) + 0.4275*temperature*(wind_speed**0.16)\n    else:\n        return temperature\n```", "\ndef wind_chill(temperature, wind_speed):\n    if temperature < 50:\n        wind_chill_index = 35.74 + 0.6215*temperature - 35.75*(wind_speed**0.16) + 0.4275*temperature*(wind_speed**0.16)\n        return round(wind_chill_index)\n    else:\n        return temperature\n```"], "num_tokens": [69, 92, 92, 82, 75, 69, 70, 76, 70, 83]}
{"item": {"task_id": 639, "text": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "code": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))", "test_list": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10", "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```", "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```", "\ndef sample_nam(lst):\n    return sum(len(name) for name in lst if name[0].isupper())\n```", "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```", "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```", "\ndef sample_nam(lst):\n    return sum(len(name) for name in lst if name[0].isupper())\n```", "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```", "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```", "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```", "\ndef sample_nam(lst):\n    return sum(len(name) for name in lst if name[0].isupper())\n```"], "num_tokens": [27, 27, 27, 27, 27, 27, 27, 27, 27, 27]}
{"item": {"task_id": 640, "text": "Write a function to remove the parenthesis area in a string.", "code": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "test_list": ["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")", "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_parenthesis(lst):\n    return [s.lstrip('()').rstrip('()') for s in lst]\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.find('(')] + s[s.rfind(')')+1:]\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.find(\"(\")] + s[s.rfind(\")\") + 1:]\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.index('(')].strip() + s[s.index(')')+1:]\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.find(\"(\")].strip() if \"(\" in s else s\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.find('(')] + s[s.find(')')+1:]\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.find('(')] + s[s.find(')')+1:]\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.index('(')].strip() + s[s.index(')')+1:].strip()\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.find('(')].strip() if '(' in s else s\n```", "\ndef remove_parenthesis(s):\n    return s[0:s.find('(')].strip() if '(' in s else s\n```"], "num_tokens": [28, 29, 30, 30, 28, 28, 28, 32, 28, 28]}
{"item": {"task_id": 641, "text": "Write a function to find the nth nonagonal number.", "code": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ", "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_nonagonal(n):\n    return int(((n * (n + 3 * (n - 1)))/2) + 1)\n```", "\ndef is_nonagonal(n):\n    return int(((n * (2*n - 1)) >> 1)\n```", "\ndef is_nonagonal(n):\n    return int((n*(8*n-1))//2)\n```", "\ndef is_nonagonal(n):\n    return sum(range(1, n+1)) * (2*n - 1) // 2\n```", "\ndef is_nonagonal(n):\n    return sum(range(1, n + 1)) * (2*n - 1)\n```", "\ndef is_nonagonal(n):\n    return (n * (2*n - 1)) ** 2\n```", "\ndef is_nonagonal(n):\n    return sum(range(1, n+1)) * (2*n - 1)\n```", "\ndef is_nonagonal(n):\n    return int(((9*n**2 - n) // 2))\n```", "\ndef is_nonagonal(n):\n    return int((n*(8*n-1))//2)\n```", "\ndef is_nonagonal(n):\n    return sum(range(1, n+1)) * (2*n - 1)\n```"], "num_tokens": [34, 26, 23, 32, 29, 25, 28, 24, 23, 28]}
{"item": {"task_id": 642, "text": "Write a function to remove similar rows from the given tuple matrix.", "code": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) ", "test_list": ["assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}", "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}", "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_similar_row(matrix):\n    seen = set()\n    result = []\n    for row in matrix:\n        if tuple(sorted(row)) not in seen:\n            seen.add(tuple(sorted(row)))\n            result.append(tuple(row))\n    return tuple(result)\n```", "\ndef remove_similar_row(matrix):\n    seen = set()\n    result = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            result.add(tuple(sorted(row)))\n    return result\n```", "\ndef remove_similar_row(matrix):\n    seen = set()\n    result = set()\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.add(tuple(sorted(row)))\n    return result\n```", "\ndef remove_similar_row(matrix):\n    result = []\n    for row in matrix:\n        is_similar = False\n        for r in result:\n            if set(row) == set(r):\n                is_similar = True\n                break\n        if not is_similar:\n            result.append(tuple(row))\n    return tuple(result)\n```", "\ndef remove_similar_row(matrix):\n    result = set()\n    for row in matrix:\n        if not any(row in r for r in result):\n            result.add(tuple(sorted(row)))\n    return result\n```", "\ndef remove_similar_row(matrix):\n    seen = set()\n    result = []\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.append(row)\n    return tuple(result)\n```", "\ndef remove_similar_row(matrix):\n    seen = set()\n    result = set()\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.add(tuple(sorted(row)))\n    return result\n```", "\ndef remove_similar_row(matrix):\n    seen = set()\n    result = []\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.append(row)\n    return tuple(result)\n```", "\ndef remove_similar_row(matrix):\n    seen = set()\n    result = set()\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.add(tuple(row))\n    return result\n```", "\ndef remove_similar_row(matrix):\n    seen = set()\n    result = []\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.append(tuple(row))\n    return tuple(result)\n```"], "num_tokens": [53, 59, 59, 70, 44, 57, 59, 57, 58, 58]}
{"item": {"task_id": 643, "text": "Write a function that matches a word containing 'z', not at the start or end of the word.", "code": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')", "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')", "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word and word[0]!= 'z' and word[-1]!= 'z':\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_match_wordz_middle(text):\n    if 'z' in text and not text.startswith('z') and not text.endswith('z'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_wordz_middle(text):\n    if 'z' in text and text.index('z') > 0 and text.index('z') < len(text) - 1:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word and word[0]!= 'z' and word[-1]!= 'z':\n            return 'Found a match!'\n    return 'Not matched!'", "\ndef text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word and not word[0].lower() == 'z' and not word[-1].lower() == 'z':\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_match_wordz_middle(text):\n    if 'z' in text and not text[0].lower() == 'z' and not text[-1].lower() == 'z':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word and not word[0].lower() == 'z' and not word[-1].lower() == 'z':\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_match_wordz_middle(text):\n    if 'z' in text and text[0]!= 'z' and text[-1]!= 'z':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_match_wordz_middle(text):\n    if 'z' in text[1:-1]:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_wordz_middle(text):\n    if 'z' in text and text[0]!= 'z' and text[-1]!= 'z':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"], "num_tokens": [59, 47, 56, 58, 67, 57, 67, 50, 38, 49]}
{"item": {"task_id": 644, "text": "Write a python function to reverse an array upto a given position.", "code": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ", "test_list": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]", "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```", "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```"], "num_tokens": [26, 26, 26, 25, 26, 26, 26, 25, 26, 26]}
{"item": {"task_id": 645, "text": "Write a function to find the product of it\u2019s kth index in the given tuples.", "code": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ", "test_list": ["assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665", "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280", "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_k_product(tuples, k):\n    return functools.reduce(lambda x, y: x[0]*y[0] if k == 0 else x[1]*y[1] if k == 1 else x[2]*y[2], tuples)\n```", "\ndef find_k_product(tuples, k):\n    return prod(tup[k] for tup in tuples)\n```", "\ndef find_k_product(tuples, k):\n    return prod(t[0] * t[1] * t[2] for t in tuples)[k-1]\n```", "\ndef find_k_product(tuples, k):\n    return reduce(lambda x, y: x[0]*y[0], zip(*tuples)) if k == 0 else reduce(lambda x, y: x[1]*y[1], zip(*tuples))\n```", "\ndef find_k_product(tuples, k):\n    return reduce(lambda x, y: x * y, [t[k] for t in tuples])\n```", "\ndef find_k_product(tuples, k):\n    return eval('*'.join(map(str, [t[k] for t in tuples]))\n```", "\ndef find_k_product(tuples, k):\n    return prod(t[0] for t in tuples[:k]) if k > 0 else 1\n```", "\ndef find_k_product(tuples, k):\n    return reduce(lambda x, y: x[0]*y[0], [tuples[i] for i in range(len(tuples))][::-1][:k])\n```", "\ndef find_k_product(tuples, k):\n    return tuples[k][0] * tuples[k][1] * tuples[k][2]\n```", "\ndef find_k_product(tuples, k):\n    return reduce(lambda x, y: x * y, [tuples[i][k] for i in range(len(tuples))])\n```"], "num_tokens": [59, 24, 38, 58, 33, 30, 35, 47, 31, 40]}
{"item": {"task_id": 646, "text": "Write a python function to count number of cubes of size k in a cube of size n.", "code": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No", "test_list": ["assert No_of_cubes(2,1) == 8", "assert No_of_cubes(5,2) == 64", "assert No_of_cubes(1,1) == 1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef No_of_cubes(n, k):\n    return k**3*(n//k+1)**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3 * n**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3 * (n//k+1)**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3 * n**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3 * (n//k + 1)**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3*(n//k+1)**3\n```", "\ndef No_of_cubes(n, k):\n    return n**3 // k**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3 * (n//k)**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3 * (n//k+1)**3\n```", "\ndef No_of_cubes(n, k):\n    return k**3 * (n//k + 1)**3\n```"], "num_tokens": [26, 22, 27, 22, 28, 26, 22, 25, 27, 28]}
{"item": {"task_id": 647, "text": "Write a function to split a string at uppercase letters.", "code": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))", "test_list": ["assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']", "assert split_upperstring(\"PythonProgram\")==['Python','Program']", "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef split_upperstring(s):\n    return [s[:i] +'' + s[i].lower() + s[i+1:] if s[i].isupper() else s[:i+1] for i in range(len(s))]\n```", "\ndef split_upperstring(s):\n    return [s[:i] +'' + s[i] if s[i].isupper() else s[:i+1] for i in range(len(s)) if s[i].isupper()]\n```", "\ndef split_upperstring(s):\n    return s.split('(?=[A-Z])')\n```", "\ndef split_upperstring(s):\n    return s.split('(?=[A-Z])')", "\ndef split_upperstring(s):\n    return s.split('(?=[A-Z])')\n```", "\ndef split_upperstring(s):\n    return s.split('(?=[A-Z])')\n```", "\ndef split_upperstring(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.isupper():\n            if temp:\n                result.append(temp)\n                temp = \"\"\n        temp += char\n    if temp:\n        result.append(temp)\n    return result\n```", "\ndef split_upperstring(s):\n    return s.split('(?=[A-Z])')", "\ndef split_upperstring(s):\n    return s.split('(?=[A-Z])')\n```", "\ndef split_upperstring(s):\n    return s.split('(?=[A-Z])')\n```"], "num_tokens": [51, 50, 20, 19, 20, 20, 60, 19, 20, 20]}
{"item": {"task_id": 648, "text": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "code": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "test_list": ["assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ", "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ", "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef exchange_elements(lst):\n    return [lst[i] if i % 2 else lst[i+1] for i in range(len(lst)-1)] + [lst[-1]]\n```", "\ndef exchange_elements(lst):\n    return [lst[i+1] if i % 2 == 0 else lst[i-1] for i in range(len(lst))]\n```", "\ndef exchange_elements(lst):\n    return [lst[i-1] if i % 2 else lst[i] for i in range(1, len(lst)+1)]\n```", "\ndef exchange_elements(lst):\n    return [lst[i-1] if i % 2 == 0 else lst[i] for i in range(1, len(lst)+1)]\n```", "\ndef exchange_elements(lst):\n    for i in range(0, len(lst), 2):\n        if i + 1 < len(lst):\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n```", "\ndef exchange_elements(lst):\n    result = []\n    for i in range(0, len(lst), 2):\n        if i + 1 < len(lst):\n            result.append(lst[i+1])\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n    return result\n```", "\ndef exchange_elements(lst):\n    return [lst[i+1] if i % 2 == 0 else lst[i-1] for i in range(len(lst))]\n```", "\ndef exchange_elements(lst):\n    return [lst[i-1] if i % 2 else lst[i] for i in range(1, len(lst)+1)]\n```", "\ndef exchange_elements(lst):\n    return [lst[i+1] if i % 2 else lst[i-1] for i in range(len(lst))]\n```", "\ndef exchange_elements(lst):\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i+1])\n        else:\n            result.append(lst[i-1])\n    return result\n```"], "num_tokens": [40, 37, 37, 40, 54, 63, 37, 37, 34, 53]}
{"item": {"task_id": 649, "text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "code": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "test_list": ["assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29", "assert sum_Range_list([1,2,3,4,5],1,2) == 5", "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])\n```", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])\n```", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])\n```", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])\n```", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])\n```", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])\n```", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])\n```", "\ndef sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])"], "num_tokens": [23, 23, 23, 23, 23, 22, 22, 23, 23, 22]}
{"item": {"task_id": 650, "text": "Write a python function to check whether the given two arrays are equal or not.", "code": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True", "test_list": ["assert are_Equal([1,2,3],[3,2,1],3,3) == True", "assert are_Equal([1,1,1],[2,2,2],3,3) == False", "assert are_Equal([8,9],[4,5,6],2,3) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef are_Equal(arr1, arr2, m, n):\n    return len(arr1) == len(arr2) and sorted(arr1) == sorted(arr2)\n```", "\ndef are_Equal(arr1, arr2, m, n):\n    if len(arr1)!= len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if len(arr1[i])!= m or len(arr2[i])!= n:\n            return False\n        if sorted(arr1[i])!= sorted(arr2[i]):\n            return False\n    return True\n```", "\ndef are_Equal(arr1, arr2, k, m):\n    return sorted(arr1[:k]) == sorted(arr2[:m])\n```", "\ndef are_Equal(arr1, arr2, m, n):\n    if len(arr1)!= len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if len(set(arr1[i:i+m]))!= 1 or len(set(arr2[i:i+n]))!= 1:\n            return False\n    return True\n```", "\ndef are_Equal(arr1, arr2, n, m):\n    if len(arr1)!= len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            return False\n    return True\n```", "\ndef are_Equal(arr1, arr2, m, n):\n    if len(arr1)!= len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            if arr1[i]!= m and arr2[i]!= n:\n                return False\n    return True\n```", "\ndef are_Equal(arr1, arr2, k, n):\n    return sorted(arr1[:k]) == sorted(arr2[:n])\n```", "\ndef are_Equal(arr1, arr2, m, n):\n    if len(arr1)!= len(arr2):\n        return False\n    for i in range(min(m,n)):\n        if arr1[i]!= arr2[i]:\n            return False\n    return True\n```", "\ndef are_Equal(arr1, arr2, n, m):\n    if len(arr1)!= len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if sorted(str(arr1[i]))!= sorted(str(arr2[i])):\n            return False\n    return True\n```", "\ndef are_Equal(arr1, arr2, k, m):\n    return sorted(arr1[:k]) == sorted(arr2[:m])\n```"], "num_tokens": [38, 83, 32, 74, 58, 72, 32, 58, 63, 32]}
{"item": {"task_id": 651, "text": "Write a function to check if one tuple is a subset of another tuple.", "code": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ", "test_list": ["assert check_subset((10, 4, 5, 6), (5, 10)) == True", "assert check_subset((1, 2, 3, 4), (5, 6)) == False", "assert check_subset((7, 8, 9, 10), (10, 8)) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_subset(t1, t2):\n    return set(t1).issubset(set(t2))\n```", "\ndef check_subset(t1, t2):\n    return set(t2).issubset(set(t1))\n```", "\ndef check_subset(t1, t2):\n    return set(t1).issubset(set(t2))", "\ndef check_subset(tuple1, tuple2):\n    return set(tuple1).issubset(set(tuple2))\n```", "\ndef check_subset(tuple1, tuple2):\n    return set(tuple1).issubset(set(tuple2))\n```", "\ndef check_subset(t1, t2):\n    return set(t1).issubset(set(t2))\n```", "\ndef check_subset(tuple1, tuple2):\n    return set(tuple1).issubset(set(tuple2))\n```", "\ndef check_subset(tuple1, tuple2):\n    return set(tuple1).issubset(set(tuple2))\n```", "\ndef check_subset(t1, t2):\n    return set(t1).issubset(set(t2))", "\ndef check_subset(t1, t2):\n    return set(t1).issubset(set(t2))\n```"], "num_tokens": [25, 25, 24, 25, 25, 25, 25, 25, 24, 25]}
{"item": {"task_id": 652, "text": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "code": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))", "test_list": ["assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'", "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'", "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef matrix_to_list(matrix):\n    return tuple([tuple(column) for column in zip(*matrix)])\n```", "\ndef matrix_to_list(matrix):\n    return [tuple(column) for column in zip(*matrix)]\n```", "\ndef matrix_to_list(matrix):\n    return [tuple(map(lambda x: x[i] for i in range(len(matrix[0])))) for x in zip(*matrix)]\n```", "\ndef matrix_to_list(matrix):\n    return [tuple(x) for x in zip(*matrix)]\n```", "\ndef matrix_to_list(matrix):\n    return tuple([tuple(column) for column in zip(*matrix)])\n```", "\ndef matrix_to_list(matrix):\n    return [tuple(column) for column in zip(*matrix)]\n```", "\ndef matrix_to_list(matrix):\n    return tuple(map(tuple, zip(*matrix)))\n```", "\ndef matrix_to_list(matrix):\n    return tuple(zip(*matrix))\n```", "\ndef matrix_to_list(matrix):\n    return [tuple(map(lambda x: x[i] for x in matrix)) for i in range(len(matrix[0]))]\n```", "\ndef matrix_to_list(matrix):\n    return [tuple(x) for x in zip(*matrix)]\n```"], "num_tokens": [23, 22, 37, 22, 23, 22, 19, 16, 35, 22]}
{"item": {"task_id": 653, "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "code": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d", "test_list": ["assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})", "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})", "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for key, value in seq:\n        result[key].append(value)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for key, value in seq:\n        result[key].append(value)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for k, v in seq:\n        result[k].append(v)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for key, value in seq:\n        result[key].append(value)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for key, value in seq:\n        result[key].append(value)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for key, value in seq:\n        result[key].append(value)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for key, value in seq:\n        result[key].append(value)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(seq):\n    result = defaultdict(list)\n    for key, value in seq:\n        result[key].append(value)\n    return dict(result)\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(lst):\n    return dict(defaultdict(list, dict(map(lambda x: (x[0], x[1]), lst))))\n```", "\nfrom collections import defaultdict\n\ndef grouping_dictionary(lst):\n    d = defaultdict(list)\n    for k, v in lst:\n        d[k].append(v)\n    return dict(d)\n```"], "num_tokens": [39, 39, 39, 39, 39, 39, 39, 39, 36, 39]}
{"item": {"task_id": 654, "text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter", "test_list": ["assert rectangle_perimeter(10,20)==60", "assert rectangle_perimeter(10,5)==30", "assert rectangle_perimeter(4,2)==12"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef rectangle_perimeter(length, width):\n    return 2 * (length + width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2 * (length + width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)\n```", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)", "\ndef rectangle_perimeter(length, width):\n    return 2*(length+width)"], "num_tokens": [21, 20, 20, 20, 20, 21, 20, 20, 19, 19]}
{"item": {"task_id": 655, "text": "Write a python function to find the sum of fifth power of n natural numbers.", "code": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ", "test_list": ["assert fifth_Power_Sum(2) == 33", "assert fifth_Power_Sum(4) == 1300", "assert fifth_Power_Sum(3) == 276"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))\n```", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))\n```", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))\n```", "\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))\n```"], "num_tokens": [27, 28, 27, 28, 27, 27, 27, 27, 28, 28]}
{"item": {"task_id": 656, "text": "Write a python function to find the minimum sum of absolute differences of two arrays.", "code": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum", "test_list": ["assert find_Min_Sum([3,2,1],[2,1,3],3) == 0", "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9", "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_Min_Sum(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort(reverse=True)\n    return sum(abs(a - b) for a, b in zip(arr1[:k], arr2[:k]))\n```", "\ndef find_Min_Sum(arr1, arr2, m):\n    arr1.sort()\n    arr2.sort()\n    i, j = 0, 0\n    min_sum = 0\n    while i < m and j < m:\n        min_sum += abs(arr1[i] - arr2[j])\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return min_sum\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    return sum(min(abs(a - b) for a, b in zip(arr1[:n], arr2[:n])) + min(abs(a - b) for a, b in zip(arr1[n:], arr2[n:])))\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    i = j = 0\n    sum = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            sum += arr1[i]\n            i += 1\n        elif arr2[j] < arr1[i]:\n            sum += arr2[j]\n            j += 1\n        else:\n            sum += arr1[i]\n            i += 1\n            j += 1\n    return sum\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    i, j = 0, 0\n    total = 0\n    while i < n and j < n:\n        if abs(arr1[i] - arr2[j]) < 1e-9:\n            total += 0\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            total += arr1[i]\n            i += 1\n        else:\n            total += arr2[j]\n            j += 1\n    while i < n:\n        total += arr1[i]\n        i += 1\n    while j < n:\n        total += arr2[j]\n        j += 1\n    return total\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    i, j = 0, 0\n    sum = 0\n    while i < n and j < n:\n        if abs(arr1[i] - arr2[j]) <= 1:\n            sum += abs(arr1[i] - arr2[j])\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            sum += arr1[i] - arr2[j]\n            i += 1\n        else:\n            sum += arr2[j] - arr1[i]\n            j += 1\n    return sum\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    return sum(abs(a - b) for a, b in zip(sorted(arr1)[:n], sorted(arr2)[:n]) + zip(sorted(arr1)[n:], sorted(arr2)[n:]))\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    i, j = 0, 0\n    sum = 0\n    while i < n and j < n:\n        sum += abs(arr1[i] - arr2[j])\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return sum\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    i, j = 0, 0\n    min_sum = 0\n    while i < n and j < n:\n        min_sum += abs(arr1[i] - arr2[j])\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return min_sum\n```", "\ndef find_Min_Sum(arr1, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    i, j = 0, 0\n    sum_diff = 0\n    while i < n and j < n:\n        sum_diff += abs(arr1[i] - arr2[j])\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return sum_diff\n```"], "num_tokens": [52, 99, 63, 124, 172, 148, 57, 96, 99, 99]}
{"item": {"task_id": 657, "text": "Write a python function to find the first digit in factorial of a given number.", "code": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ", "test_list": ["assert first_Digit(5) == 1", "assert first_Digit(10) == 3", "assert first_Digit(7) == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])\n```", "\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])\n```", "\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])\n```", "\nimport math\n\ndef first_Digit(n):\n    factorial = math.factorial(n)\n    return int(str(factorial)[0])\n```", "\nimport math\n\ndef first_Digit(n):\n    factorial = math.factorial(n)\n    return int(str(factorial)[0])", "\nimport math\n\ndef first_Digit(n):\n    fac = math.factorial(n)\n    return int(str(fac)[0])\n```", "\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])\n```", "\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])\n```", "\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])", "\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])"], "num_tokens": [23, 23, 23, 29, 28, 29, 23, 23, 22, 22]}
{"item": {"task_id": 658, "text": "Write a function to find the item with maximum occurrences in a given list.", "code": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2", "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1", "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_occurrences(lst):\n    from collections import Counter\n    return Counter(lst).most_common(1)[0][0]\n```", "\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    return max(Counter(lst).keys(), key=Counter(lst).get)\n```", "\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    return max(Counter(lst).keys(), key=Counter(lst).get)\n```", "\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    return max(Counter(lst).keys(), key=Counter(lst).get)\n```", "\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    return max(Counter(lst).keys(), key=Counter(lst).get)\n```", "\ndef max_occurrences(lst):\n    from collections import Counter\n    return Counter(lst).most_common(1)[0][0]\n```", "\ndef max_occurrences(lst):\n    from collections import Counter\n    return Counter(lst).most_common(1)[0][0]\n```", "\ndef max_occurrences(lst):\n    from collections import Counter\n    return Counter(lst).most_common(1)[0][0]\n```", "\ndef max_occurrences(lst):\n    return max(set(lst), key=lst.count)\n```", "\ndef max_occurrences(lst):\n    return max(set(lst), key = lst.count)\n```"], "num_tokens": [29, 30, 30, 30, 30, 29, 29, 29, 20, 20]}
{"item": {"task_id": 659, "text": "Write a python function to print duplicants from a list of integers.", "code": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ", "test_list": ["assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]", "assert Repeat([-1, 1, -1, 8]) == [-1]", "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Repeat(lst):\n    return list(dict.fromkeys([x for x in lst if lst.count(x) > 1]))\n```", "\ndef Repeat(lst):\n    return list(dict.fromkeys([x for x in lst if lst.count(x) > 1]))\n```", "\ndef Repeat(lst):\n    return list(dict.fromkeys([i for i in lst if lst.count(i) > 1]))\n```", "\ndef Repeat(lst):\n    seen = {}\n    duplicants = []\n    for num in lst:\n        if num in seen:\n            if seen[num] == 1:\n                duplicants.append(num)\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return duplicants\n```", "\ndef Repeat(lst):\n    return [x for x in set([i for i in lst if lst.count(i) > 1])]\n```", "\ndef Repeat(lst):\n    seen = {}\n    result = set()\n    for num in lst:\n        if num in seen:\n            result.add(num)\n        else:\n            seen[num] = True\n    return list(result)\n```", "\ndef Repeat(lst):\n    return list(set([i for i in lst if lst.count(i) > 1]))\n```", "\ndef Repeat(lst):\n    return list(set([i for i in lst if lst.count(i) > 1]))\n```", "\ndef Repeat(lst):\n    return [i for i in set([i for i in lst if lst.count(i) > 1])]\n```", "\ndef Repeat(lst):\n    return list(dict.fromkeys(x for x in lst if lst.count(x) > 1))"], "num_tokens": [28, 28, 28, 67, 30, 48, 26, 26, 30, 26]}
{"item": {"task_id": 660, "text": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "code": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)", "test_list": ["assert find_Points(5,10,1,5) == (1,10)", "assert find_Points(3,5,7,9) == (3,9)", "assert find_Points(1,5,2,8) == (1,8)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_Points(x1, x2, y1, y2):\n    return (min(x1, y1), max(x2, y2))\n```", "\ndef find_Points(a1, b1, a2, b2):\n    if a1 > a2:\n        a1, a2 = a2, a1\n        b1, b2 = b2, b1\n    return (a1, min(b1, b2))\n```", "\ndef find_Points(start1, end1, start2, end2):\n    if start1 <= end2 and start2 <= end1:\n        return (start1, end2)\n    elif start1 <= end1 and start2 <= end1:\n        return (start1, end1)\n    elif start2 <= end2 and start1 <= end2:\n        return (start2, end2)\n    else:\n        return (min(start1, start2), max(end1, end2))\n```", "\ndef find_Points(a1, b1, a2, b2):\n    return (min(a1, a2), max(b1, b2))\n```", "\ndef find_Points(a1, b1, a2, b2):\n    return (min(a1, a2), max(b1, b2))\n```", "\ndef find_Points(x1, x2, y1, y2):\n    return (min(x1, y1), max(x2, y2))\n```", "\ndef find_Points(x1, x2, y1, y2):\n    return (min(x1, y1), max(x2, y2))\n```", "\ndef find_Points(a1, b1, a2, b2):\n    return (min(a1, a2), max(b1, b2))\n```", "\ndef find_Points(x1, x2, y1, y2):\n    if x1 <= y1:\n        return (x1, min(x2, y2))\n    else:\n        return (max(y1, x1), y2)\n```", "\ndef find_Points(a1, b1, a2, b2):\n    if a1 < a2:\n        return (a1, min(b1, a2))\n    else:\n        return (max(a2, b2), b2)\n```"], "num_tokens": [36, 66, 108, 36, 36, 36, 36, 36, 56, 56]}
{"item": {"task_id": 661, "text": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "code": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "test_list": ["assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101", "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013", "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_sum_of_three_consecutive(lst, n):\n    if n < 3:\n        return sum(lst)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = lst[0]\n    dp[2] = lst[0] + lst[1]\n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    return dp[n]\n```", "\ndef max_sum_of_three_consecutive(arr, n):\n    if n < 3:\n        return sum(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    dp[2] = max(dp[1], arr[0] + arr[1])\n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i] + arr[i-1])\n    return dp[-1]\n```", "\ndef max_sum_of_three_consecutive(arr, n):\n    if n < 3:\n        return sum(arr)\n    max_sum = 0\n    for i in range(n-2):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += arr[j]\n            if j - i > 2:\n                max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "\ndef max_sum_of_three_consecutive(nums, n):\n    if n < 3:\n        return sum(nums)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = nums[0]\n    dp[2] = nums[0] + nums[1]\n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n    return dp[n]\n```", "\ndef max_sum_of_three_consecutive(arr, n):\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] = max(dp[i], arr[i] + dp[i - 1] if i >= 1 else arr[i])\n    return dp[-1]\n```", "\ndef max_sum_of_three_consecutive(nums, n):\n    if n < 3:\n        return sum(nums)\n    max_sum = 0\n    for i in range(n-2):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += nums[j]\n            if j-i > 2:\n                max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "\ndef max_sum_of_three_consecutive(arr, n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i - 1], dp[i - 3] + arr[i - 1] + arr[i - 2])\n    return dp[-1]\n```", "\ndef max_sum_of_three_consecutive(lst, n):\n    dp = [0] * n\n    dp[0] = lst[0]\n    dp[1] = max(lst[0], lst[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    return dp[-1]\n```", "\ndef max_sum_of_three_consecutive(arr, n):\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]\n```", "\ndef max_sum_of_three_consecutive(nums, n):\n    if n < 3:\n        return sum(nums)\n    max_sum = 0\n    for i in range(n - 2):\n        current_sum = sum(nums[i:i+3])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n```"], "num_tokens": [108, 131, 90, 108, 71, 89, 100, 84, 84, 74]}
{"item": {"task_id": 662, "text": "Write a function to sort a list in a dictionary.", "code": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict", "test_list": ["assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}", "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}", "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```", "\ndef sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}\n```"], "num_tokens": [24, 24, 24, 24, 24, 24, 24, 24, 24, 24]}
{"item": {"task_id": 663, "text": "Write a function to find the largest possible value of k such that k modulo x is y.", "code": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ", "test_list": ["assert find_max_val(15, 10, 5) == 15", "assert find_max_val(187, 10, 5) == 185", "assert find_max_val(16, 11, 1) == 12"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_max_val(x, m, y):\n    return x - (x % m) + y\n```", "\ndef find_max_val(x, y, z):\n    return x - (x % z) if (x % z) <= y else y + (z - (y % z))\n```", "\ndef find_max_val(x, m, y):\n    return m * (x // m) + min(m, x % m - y)\n```", "\ndef find_max_val(x, y, z):\n    return x - (x % z) + z\n```", "\ndef find_max_val(x, y, k):\n    return min(x, k + (y - k) // x * x)\n```", "\ndef find_max_val(x, y, z):\n    return x - (x % z) if x % z == y else x - (x % z) + z\n```", "\ndef find_max_val(x, y, z):\n    return x - (x % z)\n```", "\ndef find_max_val(x, y, z):\n    return x - (x % z) if y <= (x - (x % z)) % z else x - (x % z) + z\n```", "\ndef find_max_val(x, y, k):\n    return x - (x % y) + k\n```", "\ndef find_max_val(x, y, k):\n    return x - (x % y) + k\n```"], "num_tokens": [25, 41, 32, 25, 30, 39, 22, 46, 25, 25]}
{"item": {"task_id": 664, "text": "Write a python function to find the average of even numbers till a given even number.", "code": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ", "test_list": ["assert average_Even(2) == 2", "assert average_Even(4) == 3", "assert average_Even(100) == 51"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef average_Even(n):\n    return sum(i for i in range(2, n+1, 2)) // (n // 2) if n > 0 else 0\n```", "\ndef average_Even(n):\n    even_sum = sum(i for i in range(2, n+1, 2))\n    return even_sum // (n // 2 + 1)\n```", "\ndef average_Even(n):\n    even_sum = sum(i for i in range(2, n+1, 2))\n    return even_sum // len(range(2, n+1, 2))\n```", "\ndef average_Even(n):\n    return sum(i for i in range(2, n+1, 2)) // len(range(2, n+1, 2))\n```", "\ndef average_Even(n):\n    total = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        total += i\n        count += 1\n    return total / count if count > 0 else 0\n```", "\ndef average_Even(n):\n    even_sum = sum(i for i in range(2, n+1, 2))\n    return even_sum // (n // 2 + 1) if n > 0 else 0\n```", "\ndef average_Even(n):\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i\n        count += 1\n    return sum / count", "\ndef average_Even(n):\n    return sum(range(2, n+1, 2)) // (n // 2 + 1)\n```", "\ndef average_Even(n):\n    return sum(i for i in range(2, n+1, 2)) // (n//2 + 1)\n```", "\ndef average_Even(n):\n    even_sum = sum(i for i in range(2, n+1, 2))\n    return even_sum // len(range(2, n+1, 2))\n```"], "num_tokens": [43, 43, 46, 40, 61, 52, 51, 33, 36, 46]}
{"item": {"task_id": 665, "text": "Write a python function to shift first element to the end of given list.", "code": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "test_list": ["assert move_last([1,2,3,4]) == [2,3,4,1]", "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]", "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef move_last(lst):\n    if len(lst) > 1:\n        return lst[1:] + [lst[0]]\n    else:\n        return lst\n```", "\ndef move_last(lst):\n    return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    if len(lst) < 1:\n        return lst\n    return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    if len(lst) == 0:\n        return lst\n    else:\n        return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    return lst[1:] + [lst[0]]\n```", "\ndef move_last(lst):\n    return lst[1:] + [lst[0]]\n```"], "num_tokens": [36, 20, 33, 20, 20, 20, 36, 20, 20, 20]}
{"item": {"task_id": 666, "text": "Write a function to count occurrence of a character in a string.", "code": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count", "test_list": ["assert count_char(\"Python\",'o')==1", "assert count_char(\"little\",'t')==2", "assert count_char(\"assert\",'s')==2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_char(s, c):\n    return s.count(c)\n```", "\ndef count_char(s, c):\n    return s.count(c)\n```", "\ndef count_char(s, c):\n    return s.count(c)", "\ndef count_char(s, char):\n    return s.count(char)", "\ndef count_char(s, c):\n    return s.count(c)", "\ndef count_char(s, char):\n    return s.count(char)\n```", "\ndef count_char(s, c):\n    return s.count(c)", "\ndef count_char(s, char):\n    return s.count(char)\n```", "\ndef count_char(s, char):\n    return s.count(char)\n```", "\ndef count_char(s, char):\n    return s.count(char)\n```"], "num_tokens": [16, 16, 15, 15, 15, 16, 15, 16, 16, 16]}
{"item": {"task_id": 667, "text": "Write a python function to count number of vowels in the string.", "code": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "test_list": ["assert Check_Vow('corner','AaEeIiOoUu') == 2", "assert Check_Vow('valid','AaEeIiOoUu') == 2", "assert Check_Vow('true','AaEeIiOoUu') ==2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s.lower() if char in vowels)", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s if char.lower() in vowels)", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s if char.upper() in vowels)", "\ndef Check_Vow(s, v):\n    return sum(1 for char in s if char.lower() in v)\n```", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s if char.lower() in vowels)", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s if char in vowels)\n```", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s if char.upper() in vowels)", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s if char in vowels)\n```", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s.lower() if char in vowels)", "\ndef Check_Vow(s, vowels):\n    return sum(1 for char in s.lower() if char in vowels)\n```"], "num_tokens": [26, 26, 26, 27, 26, 25, 26, 25, 26, 27]}
{"item": {"task_id": 668, "text": "Write a python function to replace multiple occurence of character by single.", "code": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ", "test_list": ["assert replace('peep','e') == 'pep'", "assert replace('Greek','e') == 'Grek'", "assert replace('Moon','o') == 'Mon'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, c):\n    return s.replace(c, '')", "\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, char):\n    return s.replace(char, '')", "\ndef replace(s, char):\n    return s.replace(char, '')\n```"], "num_tokens": [15, 15, 15, 15, 15, 15, 15, 15, 15, 16]}
{"item": {"task_id": 669, "text": "Write a function to check whether the given ip address is valid or not using regex.", "code": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ", "test_list": ["assert check_IP(\"192.168.0.1\") == 'Valid IP address'", "assert check_IP(\"110.234.52.124\") == 'Valid IP address'", "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef check_IP(ip):\n    pattern = r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = re.compile(r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")\n    if pattern.match(ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = r\"^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = re.compile(r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")\n    if pattern.match(ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = re.compile(r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")\n    if pattern.match(ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```", "\nimport re\n\ndef check_IP(ip):\n    pattern = re.compile(r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")\n    if pattern.match(ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'\n```"], "num_tokens": [162, 161, 166, 104, 104, 161, 104, 104, 161, 161]}
{"item": {"task_id": 670, "text": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "code": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "test_list": ["assert decreasing_trend([-4,-3,-2,-1]) == True", "assert decreasing_trend([1,2,3]) == True", "assert decreasing_trend([3,2,1]) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef decreasing_trend(seq):\n    return all(seq[i] >= seq[i+1] for i in range(len(seq)-1))\n```", "\ndef decreasing_trend(seq):\n    return all(seq[i] <= seq[i+1] for i in range(len(seq)-1)) or all(seq[i] >= seq[i+1] for i in range(len(seq)-1))\n```", "\ndef decreasing_trend(seq):\n    return all(seq[i] >= seq[i+1] for i in range(len(seq)-1)) or all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n```", "\ndef decreasing_trend(lst):\n    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1)) or all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n```", "\ndef decreasing_trend(seq):\n    return all(seq[i] >= seq[i+1] for i in range(len(seq)-1)) or all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n```", "\ndef decreasing_trend(seq):\n    return all(seq[i] >= seq[i+1] for i in range(len(seq)-1)) or all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n```", "\ndef decreasing_trend(sequence):\n    return all(sequence[i] >= sequence[i+1] for i in range(len(sequence)-1))\n```", "\ndef decreasing_trend(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) or all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\n```", "\ndef decreasing_trend(seq):\n    return all(seq[i] >= seq[i+1] for i in range(len(seq)-1)) or all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n```", "\ndef decreasing_trend(seq):\n    return all(seq[i] >= seq[i+1] for i in range(len(seq)-1))\n```"], "num_tokens": [30, 50, 50, 50, 50, 50, 30, 50, 50, 30]}
{"item": {"task_id": 671, "text": "Write a python function to set the right most unset bit.", "code": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ", "test_list": ["assert set_Right_most_Unset_Bit(21) == 23", "assert set_Right_most_Unset_Bit(11) == 15", "assert set_Right_most_Unset_Bit(15) == 15"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)\n```", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)", "\ndef set_Right_most_Unset_Bit(n):\n    return n | (n & -n)"], "num_tokens": [22, 22, 22, 22, 22, 22, 23, 22, 22, 22]}
{"item": {"task_id": 672, "text": "Write a function to find maximum of three numbers.", "code": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "test_list": ["assert max_of_three(10,20,30)==30", "assert max_of_three(55,47,39)==55", "assert max_of_three(10,49,30)==49"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```", "\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```"], "num_tokens": [22, 22, 22, 21, 21, 22, 22, 22, 22, 22]}
{"item": {"task_id": 673, "text": "Write a python function to convert a list of multiple integers into a single integer.", "code": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ", "test_list": ["assert convert([1,2,3]) == 123", "assert convert([4,5,6]) == 456", "assert convert([7,8,9]) == 789"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```", "\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```"], "num_tokens": [18, 18, 18, 18, 18, 18, 18, 18, 18, 18]}
{"item": {"task_id": 674, "text": "Write a function to remove duplicate words from a given string using collections module.", "code": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result", "test_list": ["assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")", "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")", "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```", "\nfrom collections import OrderedDict\n\ndef remove_duplicate(s):\n    return''.join(OrderedDict.fromkeys(s.split()))\n```"], "num_tokens": [25, 25, 25, 25, 25, 25, 25, 25, 25, 25]}
{"item": {"task_id": 675, "text": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "code": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums", "test_list": ["assert sum_nums(2,10,11,20)==20", "assert sum_nums(15,17,1,10)==32", "assert sum_nums(10,15,5,30)==20"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_nums(a, b, min_range, max_range):\n    total = a + b\n    if min_range <= total <= max_range:\n        return 20\n    else:\n        return total\n```", "\ndef sum_nums(a, b, min_range, max_range):\n    total = a + b\n    if min_range <= total <= max_range:\n        return 20\n    else:\n        return total\n```", "\ndef sum_nums(a, b, low, high):\n    return 20 if low <= a + b <= high else a + b\n```", "\ndef sum_nums(a, b, min_val, max_val):\n    total = a + b\n    return 20 if min_val < total < max_val else total\n```", "\ndef sum_nums(a, b, min_val, max_val):\n    total = a + b\n    return 20 if min_val < total < max_val else total\n```", "\ndef sum_nums(a, b, min_range, max_range):\n    total = a + b\n    return 20 if min_range < total < max_range else total\n```", "\ndef sum_nums(a, b, min_range, max_range):\n    return 20 if min_range <= a + b <= max_range else a + b\n```", "\ndef sum_nums(a, b, min_range, max_range):\n    total = a + b\n    if min_range <= total <= max_range:\n        return 20\n    else:\n        return total\n```", "\ndef sum_nums(a, b, min_range, max_range):\n    return 20 if min_range < a + b <= max_range else a + b\n```", "\ndef sum_nums(a, b, min_range, max_range):\n    return 20 if min_range <= a+b <= max_range else a+b\n```"], "num_tokens": [45, 45, 31, 38, 38, 38, 35, 45, 35, 33]}
{"item": {"task_id": 676, "text": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "code": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))", "test_list": ["assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'", "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'", "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef remove_extra_char(s):\n    return re.sub('[^a-zA-Z0-9]+', '', s)\n```", "\nimport re\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)\n```", "\nimport re\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)\n```", "\nimport re\n\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)\n```", "\nimport re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]+', '', s)\n```", "\nimport re\n\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)\n```", "\nimport re\n\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)\n```", "\nimport re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]+', '', s)\n```", "\nimport re\n\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)\n```", "\nimport re\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)\n```"], "num_tokens": [29, 23, 23, 23, 30, 23, 23, 30, 23, 23]}
{"item": {"task_id": 677, "text": "Write a function to check if the triangle is valid or not.", "code": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False", "test_list": ["assert validity_triangle(60,50,90)==False", "assert validity_triangle(45,75,60)==True", "assert validity_triangle(30,50,100)==True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef validity_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n```", "\ndef validity_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n```", "\ndef validity_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n```", "\ndef validity_triangle(a, b, c):\n    return a+b>c and a+c>b and b+c>a\n```", "\ndef validity_triangle(a, b, c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n```", "\ndef validity_triangle(a, b, c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n```", "\ndef validity_triangle(a, b, c):\n    return a+b>c and a+c>b and b+c>a\n```", "\ndef validity_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n```", "\ndef validity_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n```", "\ndef validity_triangle(a, b, c):\n    return a+b>c and a+c>b and b+c>a\n```"], "num_tokens": [32, 43, 32, 26, 37, 37, 26, 32, 32, 26]}
{"item": {"task_id": 678, "text": "Write a python function to remove spaces from a given string.", "code": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1", "test_list": ["assert remove_spaces(\"a b c\") == \"abc\"", "assert remove_spaces(\"1 2 3\") == \"123\"", "assert remove_spaces(\" b c\") == \"bc\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")"], "num_tokens": [14, 14, 14, 14, 14, 14, 14, 14, 14, 14]}
{"item": {"task_id": 679, "text": "Write a function to access dictionary key\u2019s element by index.", "code": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]", "test_list": ["assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'", "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'", "assert access_key({'program':15,'computer':45},1)== 'computer'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef access_key(dictionary, index):\n    return list(dictionary.keys())[index]\n```", "\ndef access_key(d, index):\n    return list(d.keys())[index]\n```", "\ndef access_key(dictionary, index):\n    return list(dictionary.keys())[index]\n```", "\ndef access_key(d, index):\n    return list(d.keys())[index]\n```", "\ndef access_key(dictionary, index):\n    return list(dictionary.keys())[index]\n```", "\ndef access_key(d, index):\n    return list(d.keys())[index]\n```", "\ndef access_key(dictionary, index):\n    return list(dictionary.keys())[index]\n```", "\ndef access_key(dictionary, index):\n    return list(dictionary.keys())[index]\n```", "\ndef access_key(dictionary, index):\n    return list(dictionary.keys())[index]\n```", "\ndef access_key(d, index):\n    return list(d.keys())[index]\n```"], "num_tokens": [18, 18, 18, 18, 18, 18, 18, 18, 18, 18]}
{"item": {"task_id": 680, "text": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "code": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "test_list": ["assert increasing_trend([1,2,3,4]) == True", "assert increasing_trend([4,3,2,1]) == False", "assert increasing_trend([0,1,4,9]) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef increasing_trend(sequence):\n    return all(sequence[i] <= sequence[i+1] for i in range(len(sequence)-1))", "\ndef increasing_trend(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n```", "\ndef increasing_trend(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1))", "\ndef increasing_trend(seq):\n    return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))", "\ndef increasing_trend(sequence):\n    return all(sequence[i] < sequence[i+1] for i in range(len(sequence)-1))\n```", "\ndef increasing_trend(seq):\n    return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))", "\ndef increasing_trend(seq):\n    return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))", "\ndef increasing_trend(seq):\n    return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n```", "\ndef increasing_trend(sequence):\n    return all(sequence[i] < sequence[i+1] for i in range(len(sequence)-1))", "\ndef increasing_trend(seq):\n    return all(seq[i] < seq[i+1] for i in range(len(seq)-1))"], "num_tokens": [29, 30, 29, 29, 30, 29, 29, 30, 29, 29]}
{"item": {"task_id": 681, "text": "Write a python function to find the smallest prime divisor of a number.", "code": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ", "test_list": ["assert smallest_Divisor(10) == 2", "assert smallest_Divisor(25) == 5", "assert smallest_Divisor(31) == 31"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef smallest_Divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n```", "\ndef smallest_Divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n```", "\ndef smallest_Divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n```", "\ndef smallest_Divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n```", "\ndef smallest_Divisor(n):\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "\ndef smallest_Divisor(n):\n    for i in range(2, n+1):\n        if n % i == 0:\n            return i\n```", "\ndef smallest_Divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n```", "\ndef smallest_Divisor(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n```", "\ndef smallest_Divisor(n):\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n```", "\ndef smallest_Divisor(n):\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n```"], "num_tokens": [33, 33, 33, 37, 55, 35, 33, 33, 36, 36]}
{"item": {"task_id": 682, "text": "Write a function to multiply two lists using map and lambda function.", "code": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "test_list": ["assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]", "assert mul_list([1,2],[3,4])==[3,8]", "assert mul_list([90,120],[50,70])==[4500,8400]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))\n```", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))\n```", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))\n```", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))\n```", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x*y, list1, list2))", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x*y, list1, list2))\n```", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x*y, list1, list2))", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x*y, list1, list2))", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))\n```", "\ndef mul_list(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))\n```"], "num_tokens": [31, 31, 31, 31, 29, 30, 29, 29, 31, 31]}
{"item": {"task_id": 683, "text": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "code": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False", "test_list": ["assert sum_Square(25) == True", "assert sum_Square(24) == False", "assert sum_Square(17) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_Square(n):\n    i = 0\n    while i * i <= n:\n        j = 0\n        while j * j <= n - i * i:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n```", "\nimport math\n\ndef sum_Square(n):\n    return any(int(math.sqrt(i)**2 + math.sqrt(j)**2) == n for i in range(int(math.sqrt(n))+1) for j in range(int(math.sqrt(n))+1))\n```", "\ndef sum_Square(n):\n    a = int(n**0.5)\n    while a >= 1:\n        b = int((n - a**2)**0.5)\n        if a*a + b*b == n:\n            return True\n        a -= 1\n    return False\n```", "\ndef sum_Square(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n - i * i:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n```", "\nimport math\n\ndef sum_Square(n):\n    a = 0\n    while a * a <= n:\n        b2 = n - a * a\n        b = int(math.sqrt(b2))\n        if b * b == b2:\n            return True\n        a += 1\n    return False\n```", "\nimport math\n\ndef sum_Square(n):\n    a = 0\n    while a**2 <= n:\n        b = math.sqrt(n - a**2)\n        if b == int(b):\n            return True\n        a += 1\n    return False\n```", "\ndef sum_Square(n):\n    if n < 2:\n        return True\n    for i in range(1, int(n**0.5) + 1):\n        if (n - i**2)**0.5 % 1 == 0:\n            return True\n    return False\n```", "\nimport math\n\ndef sum_Square(n):\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        j = int(math.sqrt(n - i * i))\n        if i * i + j * j == n:\n            return True\n        i += 1\n    return False\n```", "\nimport math\n\ndef sum_Square(n):\n    return any((math.isqrt(i) ** 2 + math.isqrt(n - i ** 2) == n) for i in range(1, int(math.sqrt(n)) + 1))\n```", "\ndef sum_Square(n):\n    a = 0\n    while a * a <= n:\n        b2 = n - a * a\n        b = int(b2 ** 0.5)\n        if b * b == b2:\n            return True\n        a += 1\n    return False\n```"], "num_tokens": [73, 52, 65, 73, 68, 58, 66, 75, 54, 68]}
{"item": {"task_id": 684, "text": "Write a python function to count occurences of a character in a repeated string.", "code": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ", "test_list": ["assert count_Char(\"abcac\",'a') == 4", "assert count_Char(\"abca\",'c') == 2", "assert count_Char(\"aba\",'a') == 7"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_Char(s, char):\n    return s.count(char) * (s.count(char) - 1) + s.count(char)\n```", "\ndef count_Char(s, char):\n    return s.count(char)\n```", "\ndef count_Char(s, char):\n    return s.count(char) * len(s.replace(char, ''))", "\ndef count_Char(s, char):\n    return s.count(char) * (s.replace(char, '').count('/') + 1)", "\ndef count_Char(s, c):\n    return s.count(c) * len(s.split(c))", "\ndef count_Char(s, char):\n    return s.count(char) * (s.count(char) - 1) + s.count(char)", "\ndef count_Char(s, char):\n    return s.count(char) * len(s.replace(char, ''))", "\ndef count_Char(s, char):\n    return s.count(char)\n```", "\ndef count_Char(s, char):\n    return s.count(char) * (s.count(char) - 1) + s.count(char)\n```", "\ndef count_Char(s, c):\n    return s.count(c) * (s.count(c) - 1) + s.count(c)\n```"], "num_tokens": [31, 16, 23, 28, 21, 30, 23, 16, 31, 31]}
{"item": {"task_id": 685, "text": "Write a python function to find sum of prime numbers between 1 to n.", "code": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum", "test_list": ["assert sum_Of_Primes(10) == 17", "assert sum_Of_Primes(20) == 77", "assert sum_Of_Primes(5) == 10"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n + 1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n+1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n + 1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n+1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n+1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n+1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n+1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n + 1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n+1) if is_prime(num))", "\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n + 1) if is_prime(num))"], "num_tokens": [83, 82, 83, 82, 82, 82, 82, 83, 82, 83]}
{"item": {"task_id": 686, "text": "Write a function to find the frequency of each element in the given list.", "code": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ", "test_list": ["assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'", "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'", "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef freq_element(lst):\n    return {x: lst.count(x) for x in set(lst)}\n```", "\ndef freq_element(lst):\n    return {x: lst.count(x) for x in set(lst)}\n```", "\ndef freq_element(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return str(freq)\n```", "\ndef freq_element(lst):\n    return {x: lst.count(x) for x in set(lst)}\n```", "\ndef freq_element(lst):\n    freq = {}\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return str(freq)\n```", "\ndef freq_element(lst):\n    return {i: lst.count(i) for i in set(lst)}\n```", "\ndef freq_element(lst):\n    freq = {}\n    for element in set(lst):\n        freq[element] = lst.count(element)\n    return str(freq)\n```", "\ndef freq_element(lst):\n    return {x: lst.count(x) for x in set(lst)}\n```", "\ndef freq_element(lst):\n    return {i: lst.count(i) for i in set(lst)}\n```", "\ndef freq_element(lst):\n    return {i: lst.count(i) for i in set(lst)}\n```"], "num_tokens": [23, 23, 48, 23, 50, 23, 33, 23, 23, 23]}
{"item": {"task_id": 687, "text": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "code": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)", "test_list": ["assert recur_gcd(12,14) == 2", "assert recur_gcd(13,17) == 1", "assert recur_gcd(9, 3) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n```", "\ndef recur_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return recur_gcd(b, a % b)\n```"], "num_tokens": [37, 37, 36, 37, 37, 37, 36, 36, 37, 37]}
{"item": {"task_id": 688, "text": "Write a function to get the length of a complex number.", "code": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "test_list": ["assert len_complex(3,4)==5.0", "assert len_complex(9,10)==13.45362404707371", "assert len_complex(7,9)==11.40175425099138"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```", "\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)", "\nimport math\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)\n```"], "num_tokens": [25, 25, 25, 24, 25, 25, 25, 25, 24, 25]}
{"item": {"task_id": 689, "text": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "code": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]", "test_list": ["assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3", "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3", "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_jumps(arr, target):\n    jumps = 0\n    current_end = 0\n    current_farthest = 0\n    for i in range(len(arr) - 1):\n        current_farthest = max(current_farthest, i + arr[i])\n        if i == current_end:\n            jumps += 1\n            current_end = current_farthest\n        if i >= target:\n            return jumps\n    return jumps\n```", "\ndef min_jumps(nums, target):\n    jumps = 0\n    current_end = 0\n    current_farthest = 0\n    for i in range(len(nums) - 1):\n        current_farthest = max(current_farthest, i + nums[i])\n        if i == current_end:\n            jumps += 1\n            current_end = current_farthest\n        if i == target - 1:\n            break\n    return jumps\n```", "\ndef min_jumps(arr, target):\n    jumps = 0\n    current_end = 0\n    farthest = 0\n    for i in range(len(arr) - 1):\n        farthest = max(farthest, i + arr[i])\n        if i == current_end:\n            jumps += 1\n            current_end = farthest\n    return jumps\n```", "\ndef min_jumps(arr, end):\n    jumps = 0\n    current_end = 0\n    farthest = 0\n    for i in range(len(arr) - 1):\n        farthest = max(farthest, i + arr[i])\n        if i == current_end:\n            jumps += 1\n            current_end = farthest\n    return jumps\n```", "\ndef min_jumps(arr, n):\n    jumps = [float('inf')] * (n + 1)\n    jumps[0] = 0\n    for i in range(n):\n        for j in range(i + 1, min(i + arr[i] + 1, n) + 1):\n            jumps[j] = min(jumps[j], jumps[i] + 1)\n    return jumps[n]\n```", "\ndef min_jumps(arr, target):\n    if target >= len(arr):\n        return len(arr) - 1\n    jumps = 0\n    curr_end = 0\n    curr_farthest = 0\n    for i in range(target - 1):\n        curr_farthest = max(curr_farthest, i + arr[i])\n        if i == curr_end:\n            jumps += 1\n            curr_end = curr_farthest\n    return jumps\n```", "\ndef min_jumps(arr, end):\n    dp = [float('inf')] * len(arr)\n    dp[0] = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, min(i + arr[i] + 1, len(arr))):\n            dp[j] = min(dp[j], dp[i] + 1)\n    return dp[end]\n```", "\ndef min_jumps(arr, target):\n    jumps = 0\n    current_end = 0\n    current_farthest = 0\n    for i in range(len(arr) - 1):\n        current_farthest = max(current_farthest, i + arr[i])\n        if i == current_end:\n            jumps += 1\n            current_end = current_farthest\n    return jumps\n```", "\ndef min_jumps(arr, target):\n    jumps = 0\n    curr_end = 0\n    curr_farthest = 0\n    for i in range(len(arr) - 1):\n        curr_farthest = max(curr_farthest, i + arr[i])\n        if i == curr_end:\n            jumps += 1\n            curr_end = curr_farthest\n        if i == target - 1:\n            return jumps\n    return -1\n```", "\ndef min_jumps(arr, n):\n    jumps = 0\n    current_end = 0\n    farthest = 0\n    for i in range(n - 1):\n        farthest = max(farthest, i + arr[i])\n        if i == current_end:\n            jumps += 1\n            current_end = farthest\n    return jumps\n```"], "num_tokens": [98, 100, 81, 81, 90, 102, 88, 88, 102, 79]}
{"item": {"task_id": 690, "text": "Write a function to multiply consecutive numbers of a given list.", "code": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "test_list": ["assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]", "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]", "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef mul_consecutive_nums(lst):\n    result = [1]\n    for i in range(1, len(lst)):\n        result.append(result[-1] * lst[i])\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        result.append(lst[i] * (i+1))\n        i += 1\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    result = []\n    i = 0\n    while i < len(lst) - 1:\n        result.append(lst[i] * lst[i+1])\n        i += 1\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    result = [1]\n    for i in range(1, len(lst)):\n        result.append(result[-1] * lst[i])\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    result = []\n    for i in range(1, len(lst)):\n        result.append(lst[i-1] * lst[i])\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    result = [1]\n    for i in range(1, len(lst)):\n        result.append(result[-1] * lst[i])\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        result.append(lst[i] * lst[i+1])\n        i += 2\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    return [lst[i] * lst[i+1] for i in range(len(lst)-1)]\n```", "\ndef mul_consecutive_nums(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        if i + 1 < len(lst) and lst[i] == lst[i+1]:\n            result.append(lst[i] * lst[i+1])\n            i += 2\n        else:\n            result.append(lst[i])\n            i += 1\n    return result\n```", "\ndef mul_consecutive_nums(lst):\n    result = []\n    i = 0\n    while i < len(lst) - 1:\n        result.append(lst[i] * lst[i+1])\n        i += 1\n    return result\n```"], "num_tokens": [42, 49, 53, 42, 41, 42, 49, 31, 84, 53]}
{"item": {"task_id": 691, "text": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "code": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n", "test_list": ["assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}", "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}", "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef group_element(lst):\n    return {v: [k for k, v in lst if k == k] for k, v in set(lst)}\n```", "\ndef group_element(tuples):\n    result = {}\n    for item in tuples:\n        if item[1] in result:\n            result[item[1]].append(item[0])\n        else:\n            result[item[1]] = [item[0]]\n    return result\n```", "\ndef group_element(lst):\n    return {y: [x for x, y in lst if y == i] for i in set(y for x, y in lst)}\n```", "\ndef group_element(lst):\n    return {x[1]: [x[0] for x in lst if x[1] == y] for y in set(x[1] for x in lst)}\n```", "\ndef group_element(lst):\n    result = {}\n    for x, y in lst:\n        if y not in result:\n            result[y] = [x]\n        else:\n            result[y].append(x)\n    return result\n```", "\ndef group_element(lst):\n    result = {}\n    for item in lst:\n        if item[1] not in result:\n            result[item[1]] = [item[0]]\n        else:\n            result[item[1]].append(item[0])\n    return result\n```", "\ndef group_element(lst):\n    return {i[1]: [i[0] for i in lst if i[1] == k] for k in set(i[1] for i in lst)}\n```", "\ndef group_element(lst):\n    return {x[1]: [x[0] for x in lst if x[1] == y] for y in set(x[1] for x in lst)}\n```", "\ndef group_element(lst):\n    return {v: [k for k, v in lst if v == x] for x in set([y for _, y in lst])}\n```", "\ndef group_element(lst):\n    return {k: [i[0] for i in lst if i[1] == k] for k in set(i[1] for i in lst)}\n```"], "num_tokens": [34, 58, 38, 45, 49, 58, 45, 45, 39, 43]}
{"item": {"task_id": 692, "text": "Write a python function to find the last two digits in factorial of a given number.", "code": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ", "test_list": ["assert last_Two_Digits(7) == 40", "assert last_Two_Digits(5) == 20", "assert last_Two_Digits(2) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\nimport math\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\nimport math\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])", "\nimport math\n\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])"], "num_tokens": [24, 21, 24, 21, 21, 24, 21, 21, 21, 24]}
{"item": {"task_id": 693, "text": "Write a function to remove multiple spaces in a string by using regex.", "code": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))", "test_list": ["assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'", "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'", "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +','', s)", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +','', s).strip()", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s+','', s).strip()", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +','', s).strip()\n```", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s+','', s).strip()", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +','', s)", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s+','', s).strip()", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +','', s).strip()", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s+','', s)", "\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s+','', s).strip()"], "num_tokens": [20, 22, 24, 23, 24, 20, 24, 22, 22, 24]}
{"item": {"task_id": 694, "text": "Write a function to extract unique values from the given dictionary values.", "code": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res", "test_list": ["assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]", "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]", "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef extract_unique(d):\n    return list(set().union(*[set(v) for k, v in d.items()]))\n```", "\ndef extract_unique(d):\n    return list(set().union(*map(set, d.values())))\n```", "\ndef extract_unique(d):\n    return list(set().union(*map(set, d.values())))\n```", "\ndef extract_unique(d):\n    return list(set(val for val in set(val for sublist in d.values() for val in sublist)))\n```", "\ndef extract_unique(d):\n    return list(set().union(*[set(v) for v in d.values()]))\n```", "\ndef extract_unique(d):\n    return list(set.union(*map(set, d.values())))\n```", "\ndef extract_unique(d):\n    return list(set().union(*map(set, d.values())))\n```", "\ndef extract_unique(d):\n    return list(set().union(*[set(v) for v in d.values()]))\n```", "\ndef extract_unique(d):\n    return list(set().union(*[set(v) for v in d.values()]))\n```", "\ndef extract_unique(d):\n    return list(set().union(*[set(v) for v in d.values()]))\n```"], "num_tokens": [28, 21, 21, 29, 26, 20, 21, 26, 26, 26]}
{"item": {"task_id": 695, "text": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "code": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "test_list": ["assert check_greater((10, 4, 5), (13, 5, 18)) == True", "assert check_greater((1, 2, 3), (2, 1, 4)) == False", "assert check_greater((4, 5, 6), (5, 6, 7)) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_greater(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_greater(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_greater(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_greater(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_greater(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_greater(t1, t2):\n    return all(i < j for i, j in zip(t1, t2))\n```", "\ndef check_greater(t1, t2):\n    return all(i < j for i, j in zip(t1, t2))\n```", "\ndef check_greater(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_greater(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_greater(t1, t2):\n    return all(i < j for i, j in zip(t1, t2))\n```"], "num_tokens": [32, 32, 32, 32, 32, 30, 30, 32, 32, 30]}
{"item": {"task_id": 696, "text": "Write a function to zip two given lists of lists.", "code": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result", "test_list": ["assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]", "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]", "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef zip_list(list1, list2):\n    result = []\n    for i in range(max(len(x) for x in list1)):\n        temp = []\n        for l in list1:\n            if i < len(l):\n                temp.append(l[i])\n        for l in list2:\n            if i < len(l):\n                temp.append(l[i])\n        result.append(temp)\n    return result\n```", "\ndef zip_list(list1, list2):\n    result = []\n    for i in range(max(len(x) for x in list1)):\n        row = []\n        for j in range(len(list1)):\n            if i < len(list1[j]):\n                row.append(list1[j][i])\n        if i < len(list2[0]):\n            row.extend(list2[i])\n        result.append(row)\n    return result\n```", "\ndef zip_list(list1, list2):\n    result = []\n    for i in range(min(len(list1), len(list2))):\n        result.append(list1[i] + list2[i])\n    if len(list1) > len(list2):\n        result.extend(list1[-(len(list1)-len(list2)):])\n    elif len(list2) > len(list1):\n        result.extend(list2[-(len(list2)-len(list1)):])\n    return result\n```", "\ndef zip_list(list1, list2):\n    return [list1[i] + list2[i] for i in range(min(len(list1), len(list2)))]\n```", "\ndef zip_list(list1, list2):\n    result = []\n    for l1, l2 in zip(list1, list2):\n        result.append(l1 + l2)\n    return result\n```", "\ndef zip_list(list1, list2):\n    result = []\n    for i in range(max(len(x) for x in list1)):\n        row = []\n        for j in range(len(list1)):\n            if i < len(list1[j]):\n                row.append(list1[j][i])\n        if i < len(list2[0]):\n            row.extend(list2[i])\n        result.append(row)\n    return result\n```", "\ndef zip_list(list1, list2):\n    result = []\n    for i in range(max(len(x) for x in list1)):\n        result.append([x[i] for x in list1 + [x for x in list2 if i < len(x)]])\n    return result\n```", "\ndef zip_list(list1, list2):\n    result = []\n    for i in range(max(len(x) for x in list1) if list1 else 0):\n        result.append([x[i] if i < len(x) else None for x in list1 + [list2]])\n    return [x for x in result if None not in x]\n```", "\ndef zip_list(list1, list2):\n    result = []\n    length = min(len(list1), len(list2))\n    for i in range(length):\n        result.append(list1[i] + list2[i])\n    result.append(list1[length:] + list2[length:])\n    return result\n```", "\ndef zip_list(list1, list2):\n    result = []\n    for i in range(max(len(x) for x in list1)):\n        row = []\n        for l in list1 + [None] * (len(list2) - len(list1)):\n            if l:\n                row.append(l[i])\n        for l in list2 + [None] * (len(list1) - len(list2)):\n            if l:\n                row.append(l[i])\n        result.append(row)\n    return [x for x in result if any(x)]\n```"], "num_tokens": [84, 88, 100, 38, 44, 88, 62, 77, 63, 114]}
{"item": {"task_id": 697, "text": "Write a function to find number of even elements in the given list using lambda function.", "code": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "test_list": ["assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3", "assert count_even([10,15,14,13,-18,12,-20])==5", "assert count_even([1, 2, 4, 8, 9])==3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ncount_even = lambda lst: sum(1 for x in lst if x % 2 == 0)", "\ncount_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))", "\ncount_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))\n```", "\ncount_even = lambda lst: len(list(filter(lambda x: x%2==0, lst)))", "\ncount_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))\n```", "\ncount_even = lambda lst: sum(1 for i in lst if i % 2 == 0)", "\ncount_even = lambda lst: sum(1 for x in lst if x % 2 == 0)", "\ncount_even = lambda lst: sum(1 for x in lst if x % 2 == 0)", "\ncount_even = lambda lst: sum(1 for num in lst if num % 2 == 0)\n```", "\ncount_even = lambda lst: sum(1 for x in lst if x % 2 == 0)\n```"], "num_tokens": [24, 24, 25, 22, 25, 24, 24, 24, 25, 25]}
{"item": {"task_id": 698, "text": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "code": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "test_list": ["assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}", "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}", "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda x: x[0][0]*x[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0]*item[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda x: x[0][0]*x[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda x: x[0][0]*x[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda x: x[0][0]*x[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0]*item[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda x: x[0][0]*x[0][1]))\n```", "\ndef sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0]*item[0][1]))\n```"], "num_tokens": [33, 32, 32, 32, 32, 32, 33, 32, 32, 32]}
{"item": {"task_id": 699, "text": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "test_list": ["assert min_Swaps(\"1101\",\"1110\") == 1", "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"", "assert min_Swaps(\"1110000\",\"0001101\") == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            swaps += 1\n    return swaps\n```", "\ndef min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            for j in range(i+1, len(s1)):\n                if s1[j] == s2[i]:\n                    s1 = list(s1)\n                    s1[i], s1[j] = s1[j], s1[i]\n                    s1 = ''.join(s1)\n                    count += 1\n                    break\n            else:\n                return \"Not Possible\"\n    return count\n```", "\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            swaps += 1\n    return swaps\n```", "\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            if s1[i]!= s2[len(s1) - i - 1]:\n                return \"Not Possible\"\n            swaps += 1\n    return swaps\n```", "\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    diff = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            diff += 1\n    return diff // 2\n```", "\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    diff = sum(c1!= c2 for c1, c2 in zip(s1, s2))\n    if diff % 2:\n        return \"Not Possible\"\n    return diff // 2\n```", "\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            swaps += 1\n    return swaps // 2\n```", "\ndef min_Swaps(s1, s2):\n    diff_count = 0\n    swap_count = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            diff_count += 1\n    if diff_count % 2!= 0:\n        return \"Not Possible\"\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            for j in range(i+1, len(s1)):\n                if s1[j] == s2[i] and s1[j]!= s2[j]:\n                    s1 = list(s1)\n                    s1[i], s1[j] = s1[j], s1[i]\n                    s1 = \"\".join(s1)\n                    swap_count += 1\n                    break\n    return swap_count\n```", "\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            if s2.count(s1[i]) == 0:\n                return \"Not Possible\"\n            else:\n                j = s2.index(s1[i])\n                s2 = list(s2)\n                s2[i], s2[j] = s2[j], s2[i]\n                s2 = \"\".join(s2)\n                swaps += 1\n    return swaps\n```", "\ndef min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        return \"Not Possible\"\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            if s2.count(s1[i]) == 0:\n                return \"Not Possible\"\n            j = s2.index(s1[i])\n            s2 = list(s2)\n            s2[i], s2[j] = s2[j], s2[i]\n            s2 = ''.join(s2)\n            swaps += 1\n    return swaps\n```"], "num_tokens": [65, 120, 65, 89, 68, 73, 68, 173, 132, 129]}
{"item": {"task_id": 700, "text": "Write a function to count the number of elements in a list which are within a specific range.", "code": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr", "test_list": ["assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6", "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5", "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_range_in_list(lst, start, end):\n    return sum(1 for x in lst if start <= x <= end)\n```", "\ndef count_range_in_list(lst, start, end):\n    return sum(1 for x in lst if start <= x <= end)\n```", "\ndef count_range_in_list(lst, start, end):\n    return sum(1 for x in lst if start <= x <= end)\n```", "\ndef count_range_in_list(lst, min_val, max_val):\n    return sum(1 for x in lst if min_val <= x <= max_val)\n```", "\ndef count_range_in_list(lst, start, end):\n    return sum(1 for x in lst if start <= x < end)\n```", "\ndef count_range_in_list(lst, start, end):\n    return len([x for x in lst if start <= x <= end])\n```", "\ndef count_range_in_list(lst, min_val, max_val):\n    return sum(1 for x in lst if min_val <= x <= max_val)\n```", "\ndef count_range_in_list(lst, start, end):\n    return sum(1 for x in lst if start <= x <= end)\n```", "\ndef count_range_in_list(lst, start, end):\n    return sum(1 for x in lst if start <= x <= end)\n```", "\ndef count_range_in_list(lst, start, end):\n    return sum(1 for x in lst if start <= x <= end)\n```"], "num_tokens": [30, 30, 30, 34, 30, 30, 34, 30, 30, 30]}
{"item": {"task_id": 701, "text": "Write a function to find the equilibrium index of the given array.", "code": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1", "test_list": ["assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3", "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3", "assert equilibrium_index([1, 2, 3]) == -1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef equilibrium_index(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1\n```", "\ndef equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n```", "\ndef equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n```", "\ndef equilibrium_index(arr):\n    for i in range(len(arr)):\n        left_sum = sum(arr[:i])\n        right_sum = sum(arr[i+1:])\n        if left_sum == right_sum:\n            return i\n    return -1\n```", "\ndef equilibrium_index(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1\n```", "\ndef equilibrium_index(arr):\n    n = len(arr)\n    for i in range(n):\n        left_sum = sum(arr[:i])\n        right_sum = sum(arr[i+1:])\n        if left_sum == right_sum:\n            return i\n    return -1\n```", "\ndef equilibrium_index(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1\n```", "\ndef equilibrium_index(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1\n```", "\ndef equilibrium_index(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1\n```", "\ndef equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n```"], "num_tokens": [40, 61, 61, 52, 40, 57, 40, 40, 40, 61]}
{"item": {"task_id": 702, "text": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "code": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans", "test_list": ["assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5", "assert removals([1, 5, 6, 2, 8], 5, 2) == 3", "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef removals(nums, amax, amin):\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    removals = 0\n    while left < right:\n        if nums[right] - nums[left] > amax - amin:\n            removals += 1\n            left += 1\n        else:\n            right -= 1\n    return removals\n```", "\ndef removals(arr, amin, amax):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    removals = 0\n    while left <= right:\n        if arr[left] <= amin or arr[right] >= amax:\n            if arr[left] <= amin:\n                left += 1\n            else:\n                right -= 1\n        else:\n            if arr[right] - arr[left] > amax - amin:\n                removals += arr[right] - arr[left] - (amax - amin)\n                right -= 1\n            else:\n                left += 1\n    return removals\n```", "\ndef removals(arr, amax, amin):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    removed = 0\n    while left < right:\n        if arr[right] - arr[left] > amax - amin:\n            right -= 1\n        else:\n            removed += 1\n            left += 1\n    return removed\n```", "\ndef removals(arr, amax, amin):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] - amin > k:\n            count += 1\n        else:\n            break\n    return count\n```", "\ndef removals(arr, amin, amax, k):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    removals = 0\n    while left < right:\n        if arr[right] - arr[left] > k:\n            removals += 1\n            left += 1\n        else:\n            right -= 1\n    return removals\n```", "\ndef removals(arr, amax, amin):\n    arr.sort()\n    i = 0\n    count = 0\n    for num in arr:\n        if num > amax:\n            count += 1\n        elif num < amin:\n            continue\n        else:\n            while i < len(arr) - 1 and arr[i + 1] <= amax:\n                i += 1\n            if i < len(arr) - 1 and arr[i + 1] > amax:\n                count += 1\n            i += 1\n    return count\n```", "\ndef removals(arr, amax, amin):\n    arr.sort()\n    count = 0\n    i, j = 0, len(arr) - 1\n    while i <= j:\n        if arr[i] + arr[j] > amax:\n            j -= 1\n        else:\n            i += 1\n            count += 1\n    return len(arr) - count\n```", "\ndef removals(arr, amax, amin):\n    arr.sort()\n    i = 0\n    count = 0\n    while i < len(arr):\n        if arr[i] > amax:\n            break\n        if arr[i] < amin:\n            count += 1\n        i += 1\n    return count\n```", "\ndef removals(arr, amin, amax):\n    arr.sort()\n    i, j = 0, len(arr) - 1\n    removals = 0\n    while i <= j:\n        if arr[i] <= amin or arr[j] >= amax:\n            if arr[i] <= amin:\n                i += 1\n            elif arr[j] >= amax:\n                j -= 1\n            removals += 1\n        else:\n            if arr[i] + arr[j] > amax:\n                j -= 1\n            else:\n                i += 1\n    return removals\n```", "\ndef removals(arr, amax, amin):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left <= right:\n        if arr[right] - arr[left] <= amax - amin:\n            left += 1\n        else:\n            right -= 1\n            count += 1\n    return count\n```"], "num_tokens": [89, 143, 86, 67, 87, 126, 87, 74, 135, 86]}
{"item": {"task_id": 703, "text": "Write a function to check whether the given key is present in the dictionary or not.", "code": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False", "test_list": ["assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True", "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True", "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_key_present(d, key):\n    return key in d\n```", "\ndef is_key_present(d, key):\n    return key in d\n```", "\ndef is_key_present(d, key):\n    return key in d\n```", "\ndef is_key_present(dictionary, key):\n    return key in dictionary\n```", "\ndef is_key_present(dictionary, key):\n    return key in dictionary\n```", "\ndef is_key_present(d, key):\n    return key in d\n```", "\ndef is_key_present(dictionary, key):\n    return key in dictionary\n```", "\ndef is_key_present(d, key):\n    return key in d\n```", "\ndef is_key_present(dictionary, key):\n    return key in dictionary\n```", "\ndef is_key_present(d, key):\n    return key in d\n```"], "num_tokens": [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]}
{"item": {"task_id": 704, "text": "Write a function to calculate the harmonic sum of n-1.", "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))", "test_list": ["assert harmonic_sum(10)==2.9289682539682538", "assert harmonic_sum(4)==2.083333333333333", "assert harmonic_sum(7)==2.5928571428571425 "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```", "\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```"], "num_tokens": [23, 23, 23, 23, 23, 23, 22, 23, 23, 23]}
{"item": {"task_id": 705, "text": "Write a function to sort a list of lists by length and value.", "code": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1", "test_list": ["assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]", "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]", "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: (len(x), tuple(x)))\n```", "\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: (len(x), x))\n```", "\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: (len(x), x))\n```"], "num_tokens": [26, 28, 26, 27, 26, 26, 28, 28, 26, 26]}
{"item": {"task_id": 706, "text": "Write a function to find whether an array is subset of another array.", "code": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t", "test_list": ["assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True", "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True", "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_subset(arr1, m, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    for i in range(m):\n        if bin(arr1[i]).count('1') > n:\n            return False\n    for i in range(n):\n        if bin(arr2[i]).count('1') > m:\n            return False\n    for i in range(m):\n        for j in range(n):\n            if bin(arr1[i] | arr2[j]).count('1') > m:\n                return False\n    return True\n```", "\ndef is_subset(arr1, m, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    for i in range(min(m, n)):\n        if arr1[i]!= arr2[i]:\n            return False\n    return True\n```", "\ndef is_subset(arr1, m, arr2, n):\n    return all(i in arr2[:n] for i in arr1[:m])\n```", "\ndef is_subset(arr1, arr1_size, arr2, arr2_size):\n    for i in range(arr2_size):\n        if not any(arr2[i] == x for x in arr1[:arr1_size]):\n            return False\n    return True\n```", "\ndef is_subset(arr1, m, arr2, n):\n    return set(arr1[:m]) <= set(arr2[:n])\n```", "\ndef is_subset(array1, m, array2, n):\n    array1.sort()\n    array2.sort()\n    i, j = 0, 0\n    while i < m and j < n:\n        if array1[i] < array2[j]:\n            i += 1\n        elif array1[i] > array2[j]:\n            return False\n        else:\n            i += 1\n            j += 1\n    return j == n\n```", "\ndef is_subset(arr1, m, arr2, n):\n    return all(x in arr2 for x in arr1)\n```", "\ndef is_subset(array1, m, array2, n):\n    return set(array1[:m]).issubset(set(array2[:n]))\n```", "\ndef is_subset(array1, size1, array2, size2):\n    for i in range(size1):\n        for j in range(size2):\n            if array1[i] == array2[j]:\n                return True\n    return False\n```", "\ndef is_subset(arr1, m, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    for i in range(min(m, n)):\n        if arr1[i]!= arr2[i]:\n            return False\n    return True\n```"], "num_tokens": [117, 54, 34, 57, 31, 100, 29, 33, 53, 54]}
{"item": {"task_id": 707, "text": "Write a python function to count the total set bits from 1 to n.", "code": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ", "test_list": ["assert count_Set_Bits(16) == 33", "assert count_Set_Bits(2) == 2", "assert count_Set_Bits(14) == 28"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))\n```", "\ndef count_Set_Bits(n):\n    return sum(bin(i).count('1') for i in range(1, n+1))"], "num_tokens": [31, 31, 31, 41, 31, 31, 31, 31, 31, 30]}
{"item": {"task_id": 708, "text": "Write a python function to convert a string to a list.", "code": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ", "test_list": ["assert Convert('python program') == ['python','program']", "assert Convert('Data Analysis') ==['Data','Analysis']", "assert Convert('Hadoop Training') == ['Hadoop','Training']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Convert(s):\n    return s.split()", "\ndef Convert(s):\n    return s.split()", "\ndef Convert(s):\n    return s.split()", "\ndef Convert(s):\n    return s.split()", "\ndef Convert(s):\n    return s.split()", "\ndef Convert(s):\n    return s.split()\n```", "\ndef Convert(s):\n    return s.split()\n```", "\ndef Convert(s):\n    return s.split()\n```", "\ndef Convert(s):\n    return s.split()", "\ndef Convert(s):\n    return s.split()"], "num_tokens": [11, 11, 11, 11, 11, 12, 12, 12, 11, 11]}
{"item": {"task_id": 709, "text": "Write a function to count unique keys for each value present in the tuple.", "code": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ", "test_list": ["assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'", "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'", "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_unique(lst):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for key, value in lst:\n        count_dict[value] += 1\n    return {str(k): v for k, v in count_dict.items()}\n```", "\ndef get_unique(lst):\n    return {k: len(list(g)) for k, g in groupby(sorted(lst))}\n```", "\ndef get_unique(lst):\n    return {k: len(list(g)) for k, g in groupby(sorted(lst))}\n```", "\ndef get_unique(lst):\n    result = {}\n    for i in set(tuple(sorted(x)) for x in set(lst)):\n        result[i[1]] = lst.count(i)\n    return str(result)\n```", "\ndef get_unique(lst):\n    return {k: len([t for t in lst if t[1] == k]) for k in set(t[1] for t in lst)}\n```", "\ndef get_unique(lst):\n    return {k: len(list(g)) for k, g in groupby(sorted((x for y in lst for x in y), key=lambda x: x))}\n```", "\ndef get_unique(lst):\n    return {k: len([x for x in lst if x[1] == k]) for k in set(x[1] for x in lst)}\n```", "\ndef get_unique(lst):\n    result = {}\n    for k, v in lst:\n        if v not in result:\n            result[v] = 1\n        else:\n            result[v] += 1\n    return str(result)\n```", "\ndef get_unique(lst):\n    return {k: len(list(g)) for k, g in itertools.groupby(sorted(lst, key=lambda x: x[1]))}\n```", "\ndef get_unique(lst):\n    count_dict = {}\n    for key, value in lst:\n        if value not in count_dict:\n            count_dict[value] = 1\n        else:\n            count_dict[value] += 1\n    return str(count_dict)\n```"], "num_tokens": [54, 27, 27, 43, 41, 42, 41, 51, 36, 56]}
{"item": {"task_id": 710, "text": "Write a function to access the initial and last data of the given tuple record.", "code": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "test_list": ["assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)", "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)", "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```", "\ndef front_and_rear(record):\n    return record[0], record[-1]\n```"], "num_tokens": [20, 20, 20, 20, 20, 20, 20, 20, 20, 20]}
{"item": {"task_id": 711, "text": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "code": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "test_list": ["assert product_Equal(2841) == True", "assert product_Equal(1234) == False", "assert product_Equal(1212) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef product_Equal(n):\n    digits = [int(d) for d in str(n)]\n    even_product = 1\n    odd_product = 1\n    for i in range(len(digits)):\n        if i % 2 == 0:\n            even_product *= digits[i]\n        else:\n            odd_product *= digits[i]\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    even_product = 1\n    odd_product = 1\n    for i, digit in enumerate(str(n)):\n        if i % 2 == 0:\n            even_product *= int(digit)\n        else:\n            odd_product *= int(digit)\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    digits = [int(i) for i in str(n)]\n    even_product = 1\n    odd_product = 1\n    for i in range(len(digits)):\n        if i % 2 == 0:\n            even_product *= digits[i]\n        else:\n            odd_product *= digits[i]\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    even_product = 1\n    odd_product = 1\n    for i in range(len(str(n))):\n        if i % 2 == 0:\n            even_product *= int(str(n)[i])\n        else:\n            odd_product *= int(str(n)[i])\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    odd_product = 1\n    even_product = 1\n    for i, digit in enumerate(str(n), 1):\n        if i % 2 == 0:\n            even_product *= int(digit)\n        else:\n            odd_product *= int(digit)\n    return odd_product == even_product\n```", "\ndef product_Equal(n):\n    n = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(n)):\n        if i % 2 == 0:\n            even_product *= int(n[i])\n        else:\n            odd_product *= int(n[i])\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    even_product = 1\n    odd_product = 1\n    for i, digit in enumerate(str(n)):\n        if i % 2 == 0:\n            even_product *= int(digit)\n        else:\n            odd_product *= int(digit)\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    n = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(n)):\n        if i % 2 == 0:\n            even_product *= int(n[i])\n        else:\n            odd_product *= int(n[i])\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    digits = [int(d) for d in str(n)]\n    even_product = 1\n    odd_product = 1\n    for i in range(len(digits)):\n        if i % 2 == 0:\n            even_product *= digits[i]\n        else:\n            odd_product *= digits[i]\n    return even_product == odd_product\n```", "\ndef product_Equal(n):\n    even_product = 1\n    odd_product = 1\n    for i in range(len(str(n))):\n        digit = int(str(n)[i])\n        if i % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n    return even_product == odd_product"], "num_tokens": [79, 70, 79, 73, 73, 74, 70, 74, 79, 72]}
{"item": {"task_id": 712, "text": "Write a function to remove duplicates from a list of lists.", "code": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate", "test_list": ["assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ", "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]", "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_duplicate(list_of_lists):\n    seen = set()\n    result = []\n    for lst in list_of_lists:\n        if tuple(lst) not in seen:\n            result.append(lst)\n            seen.add(tuple(lst))\n    return result\n```", "\ndef remove_duplicate(lst):\n    seen = set()\n    return [x for x in lst if not (tuple(x) in seen or seen.add(tuple(x)))]\n```", "\ndef remove_duplicate(list_of_lists):\n    seen = set()\n    return [x for x in (tuple(y) for y in list_of_lists) if tuple(x) not in seen and not seen.add(tuple(x))]\n```", "\ndef remove_duplicate(lst):\n    return [list(x) for x in set(tuple(x) for x in lst)]\n```", "\ndef remove_duplicate(lst):\n    seen = set()\n    return [sublist for sublist in (x for x in lst if tuple(sublist) not in seen and not seen.add(tuple(sublist)))]\n```", "\ndef remove_duplicate(list_of_lists):\n    seen = set()\n    result = []\n    for lst in list_of_lists:\n        tuple_lst = tuple(lst)\n        if tuple_lst not in seen:\n            seen.add(tuple_lst)\n            result.append(lst)\n    return result\n```", "\ndef remove_duplicate(list_of_lists):\n    seen = set()\n    result = []\n    for lst in list_of_lists:\n        if tuple(lst) not in seen:\n            seen.add(tuple(lst))\n            result.append(lst)\n    return result\n```", "\ndef remove_duplicate(lst):\n    seen = set()\n    return [i for i in (t for t in map(tuple, lst) if not (t in seen and seen.add(t)))]\n```", "\ndef remove_duplicate(lst):\n    return [list(x) for x in set(tuple(sorted(x)) for x in lst)]\n```", "\ndef remove_duplicate(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if not (tuple(sorted(item)) in seen or not isinstance(item, list)):\n            seen.add(tuple(sorted(item)))\n            result.append(item)\n    return result\n```"], "num_tokens": [51, 36, 47, 26, 44, 57, 51, 42, 27, 56]}
{"item": {"task_id": 713, "text": "Write a function to check if the given tuple contains all valid values or not.", "code": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ", "test_list": ["assert check_valid((True, True, True, True) ) == True", "assert check_valid((True, False, True, True) ) == False", "assert check_valid((True, True, True, True) ) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```", "\ndef check_valid(t):\n    return all(t)\n```"], "num_tokens": [13, 13, 13, 13, 13, 13, 13, 13, 13, 13]}
{"item": {"task_id": 714, "text": "Write a python function to count the number of distinct power of prime factor of given number.", "code": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ", "test_list": ["assert count_Fac(24) == 3", "assert count_Fac(12) == 2", "assert count_Fac(4) == 1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_Fac(n):\n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count\n```", "\ndef count_Fac(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)", "\ndef count_Fac(n):\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count\n```", "\ndef count_Fac(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                factors.add(i)\n                n //= i\n            i += 1\n    if n > 1:\n        factors.add(n)\n    return len(factors)", "\ndef count_Fac(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                factors.add(i)\n                n //= i\n    if n > 1:\n        factors.add(n)\n    return len(set([i for i in factors if is_prime(i)]))", "\ndef count_Fac(n):\n    def is_prime(i):\n        if i < 2:\n            return False\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                return False\n        return True\n\n    factors = set()\n    for i in range(2, n + 1):\n        while n % i == 0:\n            if is_prime(i):\n                factors.add(i)\n            n //= i\n    return len(factors)\n```", "\ndef count_Fac(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                factors.add(i)\n                n //= i\n    if n > 1:\n        factors.add(n)\n    return len(set([p for p in factors if is_prime(p)]) if factors else 0)", "\ndef count_Fac(n):\n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count\n```", "\ndef count_Fac(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 2\n    count = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                count.add(i)\n                n //= i\n            i += 1\n    if n > 1:\n        count.add(n)\n    return len(count)", "\ndef count_Fac(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)\n```"], "num_tokens": [72, 70, 72, 90, 147, 111, 152, 72, 142, 71]}
{"item": {"task_id": 715, "text": "Write a function to convert the given string of integers into a tuple.", "code": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ", "test_list": ["assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)", "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)", "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef str_to_tuple(s):\n    return tuple(int(x) for x in s.split(','))\n```", "\ndef str_to_tuple(s):\n    return tuple(map(int, s.replace(\",\", \"\").split()))\n```", "\ndef str_to_tuple(s):\n    return tuple(int(x) for x in s.split(','))\n```", "\ndef str_to_tuple(s):\n    return tuple(int(x) for x in s.replace(',', '').split())\n```", "\ndef str_to_tuple(s):\n    return tuple(int(x) for x in s.split(','))\n```", "\ndef str_to_tuple(s):\n    return tuple(int(i) for i in s.split(','))\n```", "\ndef str_to_tuple(s):\n    return tuple(map(int, s.split(',')))\n```", "\ndef str_to_tuple(s):\n    return tuple(int(x) for x in s.split(','))\n```", "\ndef str_to_tuple(s):\n    return tuple(int(x) for x in s.split(','))\n```", "\ndef str_to_tuple(s):\n    return tuple(map(int, s.split(', ')))"], "num_tokens": [22, 21, 22, 24, 22, 22, 19, 22, 22, 19]}
{"item": {"task_id": 716, "text": "Write a function to find the perimeter of a rombus.", "code": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "test_list": ["assert rombus_perimeter(10)==40", "assert rombus_perimeter(5)==20", "assert rombus_perimeter(4)==16"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef rombus_perimeter(a):\n    return 4*a\n```", "\ndef rombus_perimeter(side):\n    return 4*side\n```", "\ndef rombus_perimeter(s):\n    return 4*s\n```", "\ndef rombus_perimeter(s):\n    return 4*s\n```", "\ndef rombus_perimeter(side):\n    return 4 * side\n```", "\nimport math\n\ndef rombus_perimeter(side):\n    return side * 4 * math.sqrt(2)\n```", "\ndef rombus_perimeter(s):\n    return 4*s\n```", "\ndef rombus_perimeter(side):\n    return 4 * side\n```", "\nimport math\n\ndef rombus_perimeter(s):\n    return 4 * s\n```", "\ndef rombus_perimeter(a):\n    return 4*a\n```"], "num_tokens": [16, 17, 16, 16, 17, 25, 16, 17, 20, 16]}
{"item": {"task_id": 717, "text": "Write a function to calculate the standard deviation.", "code": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "test_list": ["assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979", "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287", "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    return math.sqrt(sum((x - mean) ** 2 for x in lst) / len(lst))\n```", "\nimport math\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)\n```", "\nimport math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)\n```", "\nimport math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)\n```", "\nimport math\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)\n```", "\nimport math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)\n```", "\nimport math\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    return math.sqrt(sum((x - mean) ** 2 for x in lst) / len(lst))", "\nimport math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    return math.sqrt(sum((x - mean) ** 2 for x in lst) / len(lst))\n```", "\nimport math\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)", "\nimport math\n\ndef sd_calc(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)\n```"], "num_tokens": [43, 49, 49, 49, 49, 49, 42, 43, 48, 49]}
{"item": {"task_id": 718, "text": "Write a function to create a list taking alternate elements from another given list.", "code": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ", "test_list": ["assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']", "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]", "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef alternate_elements(lst):\n    return [i for i in lst[::2]]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```", "\ndef alternate_elements(lst):\n    return [i for i in lst[::2]]\n```", "\ndef alternate_elements(lst):\n    return lst[::2]\n```"], "num_tokens": [20, 15, 15, 15, 15, 15, 15, 15, 20, 15]}
{"item": {"task_id": 719, "text": "Write a function that matches a string that has an a followed by zero or more b's.", "code": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test_list": ["assert text_match(\"ac\")==('Found a match!')", "assert text_match(\"dc\")==('Not matched!')", "assert text_match(\"abba\")==('Found a match!')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef text_match(s):\n    if re.match('a.*b*', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match(s):\n    if re.match(r\"a(b*)\", s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile('a(b*)')\n    if pattern.fullmatch(s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_match(text):\n    pattern = re.compile('a(b*)')\n    if pattern.fullmatch(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_match(text):\n    import re\n    if re.fullmatch('a*b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile('a(b*)')\n    match = pattern.match(s)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_match(s):\n    if re.match('a(b*)', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_match(s):\n    if re.match('a(b*)', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile('a(b*)')\n    if pattern.match(s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    pattern = re.compile('a(b*)')\n    if pattern.fullmatch(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"], "num_tokens": [37, 34, 43, 44, 38, 48, 35, 35, 43, 44]}
{"item": {"task_id": 720, "text": "Write a function to add a dictionary to the tuple.", "code": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ", "test_list": ["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})", "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```", "\ndef add_dict_to_tuple(t, d):\n    return t + (d,)\n```"], "num_tokens": [19, 19, 19, 19, 19, 19, 19, 19, 19, 19]}
{"item": {"task_id": 721, "text": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "code": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "test_list": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2", "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2", "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef maxAverageOfPath(matrix, n):\n    dp = [[0.0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + matrix[i][j]\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, dp[i][j])\n    return max_sum / (i + 1)\n```", "\ndef maxAverageOfPath(matrix, n):\n    memo = [[0.0] * n for _ in range(n)]\n    memo[0][0] = matrix[0][0]\n    for i in range(1, n):\n        memo[i][0] = memo[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        memo[0][j] = memo[0][j-1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            memo[i][j] = max(memo[i-1][j], memo[i][j-1], memo[i-1][j-1]) + matrix[i][j]\n    return memo[n-1][n-1] / (n * n)\n```", "\ndef maxAverageOfPath(matrix, n):\n    memo = [[float('-inf')] * n for _ in range(n)]\n    memo[0][0] = matrix[0][0]\n    for i in range(1, n):\n        memo[i][0] = memo[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        memo[0][j] = memo[0][j-1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            memo[i][j] = max(memo[i-1][j], memo[i][j-1]) + matrix[i][j]\n    max_sum = memo[n-1][n-1]\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, memo[i][j])\n    return max_sum / (n * n)\n```", "\ndef maxAverageOfPath(matrix, n):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    max_sum = dp[-1][-1]\n    return max_sum / (n * n)\n```", "\ndef maxAverageOfPath(matrix, n):\n    def dfs(i, j, path, total):\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return\n        path.append(matrix[i][j])\n        total += matrix[i][j]\n        if len(path) == n:\n            yield total / n\n            path.pop()\n            total -= matrix[i][j]\n            return\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            dfs(ni, nj, path, total)\n        path.pop()\n        total -= matrix[i][j]\n\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            for avg in dfs(i, j, [], 0):\n                max_avg = max(max_avg, avg)\n    return max_avg\n```", "\ndef maxAverageOfPath(matrix, n):\n    max_sum = float('-inf')\n    for i in range(1 << n):\n        path_sum = sum([matrix[j][i & 1 << j] for j in range(n)])\n        max_sum = max(max_sum, path_sum)\n    return max_sum / n\n```", "\ndef maxAverageOfPath(matrix, n):\n    def dfs(i, j, path, total):\n        if i == 0 and j == 0:\n            return total / len(path)\n        if i > 0:\n            path.append(matrix[i-1][j])\n            total += matrix[i-1][j]\n            avg = dfs(i-1, j, path, total)\n            path.pop()\n            total -= matrix[i-1][j]\n            return max(avg, dfs(i-1, j, path, total))\n        if j > 0:\n            path.append(matrix[i][j-1])\n            total += matrix[i][j-1]\n            avg = dfs(i, j-1, path, total)\n            path.pop()\n            total -= matrix[i][j-1]\n            return max(avg, dfs(i, j-1, path, total))\n    return max(dfs(n-1, n-1, [], 0), key=lambda x: x)\n```", "\ndef maxAverageOfPath(matrix, n):\n    memo = [[0.0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        memo[i][0] = matrix[i][0]\n        for j in range(1, n):\n            memo[i][j] = (memo[i][j-1] + matrix[i][j]) / 2\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                memo[i][j] = (memo[i-1][j] + matrix[i][j]) / 2\n            if j > 0:\n                memo[i][j] = max(memo[i][j], memo[i][j-1] + matrix[i][j]) / (j+1)\n            max_avg = max(max_avg, memo[i][j])\n    return max_avg\n```", "\ndef maxAverageOfPath(matrix, n):\n    def dfs(i, j, path_sum, path_len):\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return 0\n        path_sum += matrix[i][j]\n        path_len += 1\n        max_avg = path_sum / path_len\n        return max(max_avg, dfs(i-1, j, path_sum, path_len), dfs(i+1, j, path_sum, path_len), dfs(i, j-1, path_sum, path_len), dfs(i, j+1, path_sum, path_len))\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            max_avg = max(max_avg, dfs(i, j, 0, 0))\n    return max_avg\n```", "\ndef maxAverageOfPath(matrix, n):\n    dp = [[0.0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + matrix[i][j]\n    return dp[-1][-1] / (n * n)\n```"], "num_tokens": [207, 180, 204, 176, 207, 70, 207, 196, 179, 176]}
{"item": {"task_id": 722, "text": "Write a function to filter the height and width of students which are stored in a dictionary.", "code": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef filter_data(students, height, width):\n    return {name: (h, w) for name, (h, w) in students.items() if h >= height and w >= width}\n```", "\ndef filter_data(students, height, width):\n    return {key: value for key, value in students.items() if value[0] >= height and value[1] >= width}\n```", "\ndef filter_data(students, height, width):\n    return {key: value for key, value in students.items() if value[0] >= height and value[1] >= width}\n```", "\ndef filter_data(students, height, width):\n    return {name: data for name, data in students.items() if data[0] >= height and data[1] >= width}\n```", "\ndef filter_data(students, height, width):\n    return {name: (h, w) for name, (h, w) in students.items() if h >= height and w >= width}\n```", "\ndef filter_data(students, height, width):\n    return {name: data for name, data in students.items() if data[0] >= height and data[1] >= width}\n```", "\ndef filter_data(students, height, width):\n    return {name: (h, w) for name, (h, w) in students.items() if h >= height and w >= width}\n```", "\ndef filter_data(students, height, width):\n    return {name: (h, w) for name, (h, w) in students.items() if h >= height and w >= width}\n```", "\ndef filter_data(students, min_height, min_width):\n    return {name: (h, w) for name, (h, w) in students.items() if h >= min_height and w >= min_width}\n```", "\ndef filter_data(data, height, width):\n    return {name: (h, w) for name, (h, w) in data.items() if h == height or w == width}\n```"], "num_tokens": [44, 42, 42, 42, 44, 42, 44, 44, 48, 43]}
{"item": {"task_id": 723, "text": "Write a function to count the same pair in two given lists using map function.", "code": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result", "test_list": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11", "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nfrom collections import Counter\n\ndef count_same_pair(list1, list2):\n    return sum((Counter(list1) & Counter(list2)).values())\n```", "\ndef count_same_pair(list1, list2):\n    return sum(1 for a in set(list1) for b in list2 if a == b)\n```", "\nfrom collections import Counter\n\ndef count_same_pair(list1, list2):\n    return sum((Counter(list1) & Counter(list2)).values())\n```", "\ndef count_same_pair(list1, list2):\n    return sum(1 for a in set(list1) for b in list2 if a == b)\n```", "\ndef count_same_pair(list1, list2):\n    return sum(map(lambda x: list1.count(x), list(set(list1) & set(list2))))\n```", "\ndef count_same_pair(list1, list2):\n    return sum(1 for x in set(list1) for y in list2 if x == y)\n```", "\nfrom collections import Counter\n\ndef count_same_pair(list1, list2):\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n    return sum((counter1 & counter2).values())\n```", "\ndef count_same_pair(list1, list2):\n    return sum(map(lambda x: list1.count(x), set(list2)))\n```", "\nfrom collections import Counter\n\ndef count_same_pair(list1, list2):\n    return sum((Counter(list1) & Counter(list2)).values())\n```", "\ndef count_same_pair(list1, list2):\n    return sum(1 for x in set(map(lambda x: (x, x in list2), list1)) if x in list2)\n```"], "num_tokens": [33, 35, 33, 35, 35, 35, 46, 29, 33, 43]}
{"item": {"task_id": 724, "text": "Write a function to calculate the sum of all digits of the base to the specified power.", "code": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])", "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base**power))\n```", "\ndef power_base_sum(base, power):\n    result = 0\n    for _ in range(power):\n        result += sum(int(digit) for digit in str(base))\n    return result\n```", "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base**power))\n```", "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```", "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```", "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```", "\ndef power_base_sum(base, power):\n    sum = 0\n    num = 1\n    for _ in range(power):\n        num *= base\n        for digit in str(num):\n            sum += int(digit)\n    return sum\n```", "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```", "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```", "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```"], "num_tokens": [26, 42, 26, 26, 26, 26, 53, 26, 26, 26]}
{"item": {"task_id": 725, "text": "Write a function to extract values between quotation marks of the given string by using regex.", "code": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))", "test_list": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']", "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n```", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)", "\nimport re\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"|\\'[^\\']\\'', s)\n```", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"', s)\n```", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n```", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"', s)", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]+\"', s)\n```", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"', s)", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"|\\'[^\\']*\\',[\\'\\\"]*')\n```", "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"', s)"], "num_tokens": [24, 23, 30, 24, 24, 23, 24, 23, 32, 23]}
{"item": {"task_id": 726, "text": "Write a function to multiply the adjacent elements of the given tuple.", "code": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test_list": ["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)", "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(tup):\n    return tuple(a * b for a, b in zip(tup, tup[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```", "\ndef multiply_elements(t):\n    return tuple(a * b for a, b in zip(t, t[1:]))\n```"], "num_tokens": [27, 27, 27, 27, 27, 29, 27, 27, 27, 27]}
{"item": {"task_id": 727, "text": "Write a function to remove all characters except letters and numbers using regex", "code": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result", "test_list": ["assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'", "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'", "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```", "\nimport re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)", "\nimport re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)", "\nimport re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)", "\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)", "\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)", "\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)", "\nimport re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)", "\nimport re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n```", "\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)"], "num_tokens": [27, 27, 27, 27, 26, 26, 26, 27, 28, 26]}
{"item": {"task_id": 728, "text": "Write a function to sum elements in two lists.", "code": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_list(list1, list2):\n    return [x+y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [x+y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [x+y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n```", "\ndef sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n```"], "num_tokens": [29, 30, 29, 29, 30, 30, 30, 30, 30, 30]}
{"item": {"task_id": 729, "text": "Write a function to add two lists using map and lambda function.", "code": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)", "test_list": ["assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]", "assert add_list([1,2],[3,4])==[4,6]", "assert add_list([10,20],[50,70])==[60,90]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))\n```", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))\n```", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))\n```", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))\n```", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x+y, list1, list2))", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))\n```", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))\n```", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))", "\ndef add_list(list1, list2):\n    return list(map(lambda x, y: x+y, list1, list2))\n```"], "num_tokens": [31, 31, 31, 30, 31, 29, 31, 31, 30, 30]}
{"item": {"task_id": 730, "text": "Write a function to remove consecutive duplicates of a given list.", "code": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ", "test_list": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef consecutive_duplicates(lst):\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item!= result[-1]:\n            result.append(item)\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or i!= result[-1]:\n            result.append(i)\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            result.append(lst[i])\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            result.append(lst[i])\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            result.append(lst[i])\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item!= result[-1]:\n            result.append(item)\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or i!= result[-1]:\n            result.append(i)\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            result.append(lst[i])\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            result.append(lst[i])\n    return result\n```", "\ndef consecutive_duplicates(lst):\n    return [x for i, x in enumerate(lst) if i == 0 or x!= lst[i-1]]\n```"], "num_tokens": [41, 38, 55, 55, 47, 41, 38, 47, 47, 33]}
{"item": {"task_id": 731, "text": "Write a function to find the lateral surface area of a cone.", "code": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA", "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef lateralsurface_cone(radius, height):\n    return math.pi * radius * (radius + math.sqrt(radius**2 + height**2))\n```", "\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, height):\n    pi = math.pi\n    return pi * radius * (radius + math.sqrt(height**2 + radius**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, height):\n    return math.pi * radius * (radius + math.sqrt(height**2 + radius**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, slant_height):\n    return math.pi * radius * (radius + math.sqrt(radius**2 + slant_height**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, height):\n    return math.pi * radius * (radius + math.sqrt(radius**2 + height**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, height):\n    return math.pi * radius * (radius + math.sqrt(radius**2 + height**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, slant_height):\n    return math.pi * radius * (radius + math.sqrt(radius**2 + slant_height**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, height):\n    return math.pi * radius * (radius + math.sqrt(height**2 + radius**2))\n```", "\nimport math\n\ndef lateralsurface_cone(radius, height):\n    return math.pi * radius * (radius + math.sqrt(height**2 + radius**2))\n```"], "num_tokens": [36, 36, 41, 36, 40, 36, 36, 40, 36, 36]}
{"item": {"task_id": 732, "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "code": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r", "test_list": ["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')", "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n```", "\ndef replace_specialchar(s):\n    return ':'.join(s.replace(' ', ':').replace(',', ':').replace('.', ':'))\n```", "\ndef replace_specialchar(s):\n    return ':'.join(c for c in s if c not in ',.')\n```", "\ndef replace_specialchar(s):\n    return ':'.join(s.replace(' ', ':').replace(',', ':').replace('.', ':'))\n```", "\ndef replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n```", "\ndef replace_specialchar(s):\n    return ':'.join(s.replace(' ', ':').replace(',', ':').replace('.', ':'))", "\ndef replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n```", "\ndef replace_specialchar(s):\n    return ':'.join(s.replace(' ', ':').replace(',', ':').replace('.', ':'))\n```", "\ndef replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')", "\ndef replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"], "num_tokens": [25, 28, 25, 28, 25, 27, 25, 28, 24, 24]}
{"item": {"task_id": 733, "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "code": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result", "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            if arr[mid] == target:\n                if mid == 0 or arr[mid - 1]!= target:\n                    return mid\n                right = mid - 1\n            else:\n                right = mid - 1\n    return -1\n```", "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left < len(arr) and arr[left] == target else -1\n```", "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            right = mid - 1\n    return -1\n```", "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            right = mid - 1\n    return -1\n```", "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```", "\ndef find_first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            high = mid - 1\n    return -1\n```", "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            right = mid - 1\n    return -1\n```", "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```", "\ndef find_first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            high = mid - 1\n    return -1\n```"], "num_tokens": [115, 107, 112, 112, 112, 112, 76, 113, 113, 112]}
{"item": {"task_id": 734, "text": "Write a python function to find sum of products of all possible subarrays.", "code": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "test_list": ["assert sum_Of_Subarray_Prod([1,2,3],3) == 20", "assert sum_Of_Subarray_Prod([1,2],2) == 5", "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_Of_Subarray_Prod(nums, k):\n    n = len(nums)\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= nums[j]\n            if j - i + 1 == k:\n                res += prod\n    return res\n```", "\ndef sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            total += arr[i] * arr[j]\n    return total\n```", "\ndef sum_Of_Subarray_Prod(arr, n):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result += arr[i]*arr[j]\n    return result\n```", "\ndef sum_Of_Subarray_Prod(nums, n):\n    res = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            res += math.prod(nums[i:j])\n    return res\n```", "\ndef sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            total_sum += product\n    return total_sum\n```", "\ndef sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n            total += prod\n    return total\n```", "\ndef sum_Of_Subarray_Prod(nums, k):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n    \n    res = 0\n    for i in range(n):\n        for j in range(i + 1, min(i + k + 1, n + 1)):\n            res += nums[i] * nums[i + 1:j][0] * (prefix_sum[j] - prefix_sum[i])\n    \n    return res\n```", "\ndef sum_Of_Subarray_Prod(arr, k):\n    return sum(math.prod(arr[i:i+k]) for i in range(len(arr)-k+1))\n```", "\ndef sum_Of_Subarray_Prod(arr, k):\n    n = len(arr)\n    if k > n:\n        return 0\n    res = 0\n    for i in range(n - k + 1):\n        res += sum(arr[i:i+k])\n    return res\n```", "\ndef sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            total_sum += math.prod(arr[i:j+1])\n    return total_sum\n```"], "num_tokens": [74, 52, 51, 55, 62, 59, 127, 35, 62, 56]}
{"item": {"task_id": 735, "text": "Write a python function to toggle bits of the number except the first and the last bit.", "code": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef toggle_middle_bits(n):\n    return ((n & ~(3 << 1)) | ((~n & 1) << 0) | ((~n & 2) << 1))\n```", "\ndef toggle_middle_bits(n):\n    mask = (1 << 1) - 1\n    return n ^ mask\n```", "\ndef toggle_middle_bits(n):\n    return (n & ~(3 << 1)) | (n & 1) | (n & 2) << 1\n```", "\ndef toggle_middle_bits(n):\n    return (n & ~(3 << 1)) | ((n & 1) << 0) | ((n & 2) << 2)\n```", "\ndef toggle_middle_bits(n):\n    n &= ~(3 << 1)  # clear the middle bits\n    n |= 2  # set the first bit\n    return n\n```", "\ndef toggle_middle_bits(n):\n    mask = (1 << (n.bit_length() - 1)) - 1\n    return n ^ mask\n```", "\ndef toggle_middle_bits(n):\n    mask = (1 << (n.bit_length() - 1) - 1)\n    return n ^ mask\n```", "\ndef toggle_middle_bits(n):\n    mask = (1 << (n.bit_length() - 1)) - 1\n    return n ^ mask\n```", "\ndef toggle_middle_bits(n):\n    return n ^ ((n >> 1) & ((1 << (n.bit_length() - 1)) - 1))\n```", "\ndef toggle_middle_bits(n):\n    n = bin(n)[2:]  # convert to binary and remove '0b' prefix\n    n = n[1:-1]  # remove first and last bit\n    n = ''.join('1' if c == '0' else '0' for c in n)  # toggle bits\n    return int(n + '1', 2)  # add back the last bit and convert back to int\n```"], "num_tokens": [44, 28, 38, 42, 41, 34, 34, 34, 36, 99]}
{"item": {"task_id": 736, "text": "Write a function to locate the left insertion point for a specified value in sorted order.", "code": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i", "test_list": ["assert left_insertion([1,2,4,5],6)==4", "assert left_insertion([1,2,4,5],3)==2", "assert left_insertion([1,2,4,5],7)==4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef left_insertion(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, val):\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```", "\ndef left_insertion(arr, val):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef left_insertion(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```"], "num_tokens": [76, 76, 69, 75, 76, 76, 76, 76, 76, 76]}
{"item": {"task_id": 737, "text": "Write a function to check whether the given string is starting with a vowel or not using regex.", "code": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ", "test_list": ["assert check_str(\"annie\") == 'Valid'", "assert check_str(\"dawood\") == 'Invalid'", "assert check_str(\"Else\") == 'Valid'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU].*', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU].*', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU].*', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU]', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU].*', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU]', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU]', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU].*', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU].*', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```", "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU]', s):\n        return 'Valid'\n    else:\n        return 'Invalid'\n```"], "num_tokens": [39, 39, 39, 38, 39, 38, 38, 39, 39, 38]}
{"item": {"task_id": 738, "text": "Write a function to calculate the geometric sum of n-1.", "code": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef geometric_sum(n):\n    return (1 - 1/2**n) / (1 - 1/2)\n```", "\ndef geometric_sum(n):\n    return (1 - 0.5 ** n) / (1 - 0.5)", "\ndef geometric_sum(n):\n    return 1 - 1/2**(n-1)\n```", "\ndef geometric_sum(n):\n    return (1 - 1/2**n) / (1 - 1/2)\n```", "\ndef geometric_sum(n):\n    return 1 - 0.5 ** n\n```", "\ndef geometric_sum(n):\n    return 1 - 1/2**(n-1)\n```", "\ndef geometric_sum(n):\n    return 1 - 1/(1 - 1/2)**n\n```", "\ndef geometric_sum(n):\n    return 1 - 1 / (1 << n)", "\ndef geometric_sum(n):\n    return (1 - 0.5 ** n) / (1 - 0.5)", "\ndef geometric_sum(n):\n    return 1 - 0.5 ** n\n```"], "num_tokens": [29, 28, 22, 29, 20, 22, 25, 20, 28, 20]}
{"item": {"task_id": 739, "text": "Write a python function to find the index of smallest triangular number with n digits.", "code": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_Index(n):\n    i = 1\n    tri = 0\n    while True:\n        tri += i\n        i += 1\n        if len(str(tri)) == n:\n            return tri\n```", "\ndef find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        t = (i * (i + 1)) // 2\n        count += len(str(t))\n        if count == n:\n            return i\n        i += 1\n```", "\ndef find_Index(n):\n    i = 1\n    while True:\n        t = (i * (i + 1)) // 2\n        if len(str(t)) == n:\n            return i\n        i += 1", "\ndef find_Index(n):\n    i = 1\n    while True:\n        t = sum(range(1, i+1))\n        if len(str(t)) == n:\n            return t\n        i += 1\n```", "\ndef find_Index(n):\n    i = 1\n    while True:\n        t = sum(range(1, i + 1))\n        if len(str(t)) == n:\n            return i\n        i += 1", "\ndef find_Index(n):\n    i = 1\n    while True:\n        t = sum(range(1, i + 1))\n        if len(str(t)) == n:\n            return i\n        i += 1", "\ndef find_Index(n):\n    i = 1\n    while True:\n        t = (i * (i + 1)) // 2\n        if len(str(t)) == n:\n            return i\n        i += 1\n```", "\ndef find_Index(n):\n    i = 1\n    while True:\n        t = (i*(i+1))//2\n        if len(str(t)) == n:\n            return t\n        i += 1\n```", "\ndef find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        tri_num = (i * (i + 1)) // 2\n        count += len(str(tri_num))\n        if count == n:\n            return i\n        i += 1\n```", "\ndef find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        t = sum(range(1, i+1))\n        count += len(str(t))\n        if count == n:\n            return i\n        i += 1\n```"], "num_tokens": [49, 63, 51, 49, 48, 48, 53, 50, 66, 59]}
{"item": {"task_id": 740, "text": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "code": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ", "test_list": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}", "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}\n```", "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}\n```"], "num_tokens": [35, 33, 33, 35, 33, 33, 33, 33, 35, 33]}
{"item": {"task_id": 741, "text": "Write a python function to check whether all the characters are same or not.", "code": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "test_list": ["assert all_Characters_Same(\"python\") == False", "assert all_Characters_Same(\"aaa\") == True", "assert all_Characters_Same(\"data\") == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1", "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1"], "num_tokens": [21, 21, 21, 21, 21, 19, 19, 21, 19, 19]}
{"item": {"task_id": 742, "text": "Write a function to caluclate the area of a tetrahedron.", "code": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area", "test_list": ["assert area_tetrahedron(3)==15.588457268119894", "assert area_tetrahedron(20)==692.8203230275509", "assert area_tetrahedron(10)==173.20508075688772"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) / 12 * math.pow(a, 2)\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2 / (4 * math.sqrt(3 - math.sqrt(2) * a / (2 * a)))\n```", "\nimport math\n\ndef area_tetrahedron(s):\n    return (1.0/3.0)*math.sqrt(3)*s**2\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return (1/math.sqrt(24)) * math.sqrt(a**2*(a**2 - 3*a))\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return (1/math.sqrt(24))*math.sqrt(a**3)\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2 / 4\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return (1/3) * math.sqrt((a*(a+a)*(2*a+a)))\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3)/4 * a**2\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2\n```", "\nimport math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) / 4 * a**2\n```"], "num_tokens": [33, 48, 35, 39, 30, 30, 35, 28, 27, 30]}
{"item": {"task_id": 743, "text": "Write a function to rotate a given list by specified number of items to the right direction.", "code": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result", "test_list": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef rotate_right(lst, n, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, n, k):\n    k %= len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, k, n):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, n, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, n, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, n, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, k, n):\n    k = k % len(lst)\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n```", "\ndef rotate_right(lst, n, k):\n    k %= len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, n, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```", "\ndef rotate_right(lst, n, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n```"], "num_tokens": [31, 29, 31, 31, 31, 31, 39, 29, 31, 31]}
{"item": {"task_id": 744, "text": "Write a function to check if the given tuple has any none value or not.", "code": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "test_list": ["assert check_none((10, 4, 5, 6, None)) == True", "assert check_none((7, 8, 9, 11, 14)) == False", "assert check_none((1, 2, 3, 4, None)) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_none(t):\n    return any(x is None for x in t)\n```", "\ndef check_none(t):\n    return any(i is None for i in t)\n```", "\ndef check_none(t):\n    return any(x is None for x in t)\n```", "\ndef check_none(t):\n    return any(i is None for i in t)\n```", "\ndef check_none(t):\n    return any(i is None for i in t)\n```", "\ndef check_none(t):\n    return any(i is None for i in t)\n```", "\ndef check_none(t):\n    return any(i is None for i in t)\n```", "\ndef check_none(t):\n    return any(i is None for i in t)\n```", "\ndef check_none(t):\n    return any(x is None for x in t)\n```", "\ndef check_none(t):\n    return any(i is None for i in t)\n```"], "num_tokens": [19, 19, 19, 19, 19, 19, 19, 19, 19, 19]}
{"item": {"task_id": 745, "text": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "code": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef divisible_by_digits(start, end):\n    def is_divisible(n):\n        for d in str(n):\n            if n % int(d)!= 0:\n                return False\n        return True\n    return [i for i in range(start, end+1) if is_divisible(i)]\n```", "\ndef divisible_by_digits(start, end):\n    def is_divisible(n):\n        for digit in str(n):\n            if n % int(digit)!= 0:\n                return False\n        return True\n    return [n for n in range(start, end+1) if is_divisible(n)]\n```", "\ndef divisible_by_digits(start, end):\n    def is_divisible(n):\n        for d in str(n):\n            if n % int(d)!= 0:\n                return False\n        return True\n    return [i for i in range(start, end+1) if is_divisible(i)]\n```", "\ndef divisible_by_digits(start, end):\n    def is_divisible(n):\n        for digit in str(n):\n            if n % int(digit)!= 0:\n                return False\n        return True\n    return [n for n in range(start, end+1) if is_divisible(n)]\n```", "\ndef divisible_by_digits(start, end):\n    def is_divisible(n):\n        for digit in str(n):\n            if n % int(digit)!= 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if is_divisible(i)]\n```", "\ndef divisible_by_digits(start, end):\n    def is_divisible_by_digits(n):\n        for digit in str(n):\n            if n % int(digit)!= 0:\n                return False\n        return True\n\n    return [n for n in range(start, end+1) if is_divisible_by_digits(n)]\n```", "\ndef divisible_by_digits(start, end):\n    result = []\n    for i in range(start, end+1):\n        if all(i % int(digit) == 0 for digit in str(i)):\n            result.append(i)\n    return result\n```", "\ndef divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end+1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n```", "\ndef divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end+1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n```", "\ndef divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end+1):\n        digits = set(str(num))\n        if all(int(d) ** len(digits) <= num for d in digits):\n            result.append(num)\n    return result\n```"], "num_tokens": [63, 64, 63, 64, 65, 68, 53, 53, 53, 59]}
{"item": {"task_id": 746, "text": "Write a function to find area of a sector.", "code": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea", "test_list": ["assert sector_area(4,45)==6.285714285714286", "assert sector_area(9,45)==31.82142857142857", "assert sector_area(9,360)==None"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sector_area(radius, angle):\n    if angle == 360:\n        return None\n    return (angle/360) * 3.14159265359 * radius**2\n```", "\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    angle = angle / 180 * 3.14159\n    return (angle/360) * 3.14159 * radius**2\n```", "\nimport math\n\ndef sector_area(radius, angle):\n    if angle >= 360:\n        return None\n    angle = math.radians(angle)\n    return (angle/360) * math.pi * radius**2\n```", "\nimport math\n\ndef sector_area(radius, angle):\n    if angle == 360:\n        return None\n    angle_in_radians = math.radians(angle)\n    area = (radius**2) * (angle_in_radians / 360) * math.pi\n    return area\n```", "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2\n```", "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    angle = math.radians(angle)\n    area = (angle / 360) * math.pi * radius ** 2\n    return area\n```", "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    sector_angle = math.radians(angle)\n    return (sector_angle/360)*math.pi*radius**2\n```", "\nimport math\n\ndef sector_area(radius, angle):\n    if angle == 360:\n        return None\n    angle = math.radians(angle)\n    area = (angle / 360) * math.pi * radius**2\n    return area\n```", "\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    area = (angle/360) * 3.14159 * radius**2\n    return round(area, 8)\n```", "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    area = (angle/360) * math.pi * radius**2\n    return area\n```"], "num_tokens": [41, 53, 46, 60, 41, 53, 47, 52, 48, 44]}
{"item": {"task_id": 747, "text": "Write a function to find the longest common subsequence for the given three string sequence.", "code": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef lcs_of_three(s1, s2, s3, m, n, o):\n    dp = [[[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if s1[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, o):\n    dp = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if s1[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    return dp[m][n][o]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, o):\n    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif s1[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, o):\n    dp = [[[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)] for _ in range(2)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if s1[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[0][i][j][k] = dp[1][i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[0][i][j][k] = max(dp[1][i - 1][j][k], dp[1][i][j - 1][k], dp[1][i][j][k - 1])\n    \n    return dp[1][m][n][o]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, p):\n    dp = [[[[0 for _ in range(p+1)] for _ in range(n+1)] for _ in range(m+1)] for _ in range(3)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if s1[i-1] == s2[j-1] == s3[k-1]:\n                    dp[0][i][j][k] = dp[0][i-1][j-1][k-1] + 1\n                else:\n                    dp[0][i][j][k] = max(dp[0][i-1][j][k], dp[0][i][j-1][k], dp[0][i][j][k-1])\n    return dp[0][m][n][p]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, p):\n    dp = [[[0 for _ in range(p+1)] for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if s1[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][p]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, o):\n    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if s1[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, p):\n    dp = [[[0 for _ in range(p + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif s1[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    return dp[m][n][p]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, o):\n    dp = [[[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)] for _ in range(3)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if s1[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[0][i][j][k] = dp[0][i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[0][i][j][k] = max(dp[0][i - 1][j][k], dp[0][i][j - 1][k], dp[0][i][j][k - 1])\n    \n    return dp[0][m][n][o]\n```", "\ndef lcs_of_three(s1, s2, s3, m, n, p):\n    dp = [[[0 for _ in range(p + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if s1[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    return dp[m][n][p]\n```"], "num_tokens": [187, 200, 205, 231, 214, 185, 185, 220, 231, 200]}
{"item": {"task_id": 748, "text": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "code": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "test_list": ["assert capital_words_spaces(\"Python\") == 'Python'", "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'", "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'([A-Z])', r' \\1', s).strip()\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'([A-Z])', r' \\1', s).strip()\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'([A-Z])', r' \\1', s).strip()\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'([A-Z])', r' \\1', s).strip()\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r\"([A-Z])\", r' \\1', s).strip()\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])','', s)\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])','', s)\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r\"(\\B[A-Z])\", r' \\1', s)\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'([A-Z])', r' \\1', s).strip()\n```", "\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r'([A-Z])', r' \\1', s).strip()\n```"], "num_tokens": [32, 32, 32, 32, 32, 30, 30, 31, 32, 32]}
{"item": {"task_id": 749, "text": "Write a function to sort a given list of strings of numbers numerically.", "code": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result", "test_list": ["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]", "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_numeric_strings(lst):\n    return sorted(map(int, lst))\n```", "\ndef sort_numeric_strings(lst):\n    return [int(x) for x in sorted(lst)]\n```", "\ndef sort_numeric_strings(lst):\n    return sorted(map(int, lst))\n```", "\ndef sort_numeric_strings(lst):\n    return [int(x) for x in sorted(lst)]\n```", "\ndef sort_numeric_strings(lst):\n    return [int(i) for i in sorted(lst)]\n```", "\ndef sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])\n```", "\ndef sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])\n```", "\ndef sort_numeric_strings(lst):\n    return sorted(map(int, lst))\n```", "\ndef sort_numeric_strings(lst):\n    return sorted(map(int, lst))\n```", "\ndef sort_numeric_strings(lst):\n    return [int(x) for x in sorted(lst)]\n```"], "num_tokens": [17, 21, 17, 21, 21, 21, 21, 17, 17, 21]}
{"item": {"task_id": 750, "text": "Write a function to add the given tuple to the given list.", "code": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "test_list": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]", "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef add_tuple(lst, t):\n    return lst + list(t)\n```", "\ndef add_tuple(lst, t):\n    return lst + list(t)\n```", "\ndef add_tuple(lst, t):\n    return lst + list(t)\n```", "\ndef add_tuple(lst, t):\n    return lst + list(t)\n```", "\ndef add_tuple(lst, tup):\n    return lst + list(tup)\n```", "\ndef add_tuple(lst, tup):\n    return lst + list(tup)\n```", "\ndef add_tuple(lst, t):\n    return lst + list(t)\n```", "\ndef add_tuple(lst, t):\n    return lst + list(t)\n```", "\ndef add_tuple(lst, tup):\n    return lst + list(tup)\n```", "\ndef add_tuple(lst, t):\n    return lst + list(t)\n```"], "num_tokens": [17, 17, 17, 17, 18, 18, 17, 17, 18, 17]}
{"item": {"task_id": 751, "text": "Write a function to check if the given array represents min heap or not.", "code": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_min_heap(arr, root):\n    if root >= len(arr):\n        return True\n    for i in range(2 * root + 1, len(arr)):\n        if arr[root] > arr[i]:\n            return False\n    return check_min_heap(arr, 2 * root + 1)\n```", "\ndef check_min_heap(arr, root):\n    if root >= len(arr):\n        return True\n    for i in range(2*root + 1, len(arr)):\n        if arr[i] < arr[root]:\n            return False\n    return True\n```", "\ndef check_min_heap(arr, root):\n    def is_min_heap(i):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        if right < len(arr) and arr[right] < arr[i]:\n            return False\n        if left < len(arr) and right < len(arr) and arr[left] < arr[right]:\n            return is_min_heap(left) and is_min_heap(right)\n        return True\n\n    return is_min_heap(root)\n```", "\ndef check_min_heap(arr, root):\n    if len(arr) <= 1:\n        return True\n\n    def is_min_heap(i, n):\n        if i > n:\n            return True\n        if 2 * i + 1 > n:\n            return is_min_heap(2 * i, n)\n        if 2 * i + 2 > n:\n            return is_min_heap(2 * i + 1, n) and arr[i] <= arr[2 * i + 1]\n        return arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2] and is_min_heap(2 * i, n) and is_min_heap(2 * i + 1, n)\n\n    return is_min_heap(root, len(arr) - 1)\n```", "\ndef check_min_heap(arr, root):\n    if len(arr) == 0:\n        return True\n    if root >= len(arr):\n        return True\n    left = 2 * root + 1\n    right = 2 * root + 2\n    if left < len(arr) and arr[root] > arr[left]:\n        return False\n    if right < len(arr) and arr[root] > arr[right]:\n        return False\n    return check_min_heap(arr, left) and check_min_heap(arr, right)\n```", "\ndef check_min_heap(arr, root):\n    if root >= len(arr):\n        return True\n    for i in range(2 * root + 1, len(arr)):\n        if arr[root] > arr[i]:\n            return False\n    return True\n```", "\ndef check_min_heap(arr, idx=0):\n    if idx >= len(arr) // 2:\n        return True\n    if arr[idx] > arr[2 * idx + 1] or arr[idx] > arr[2 * idx + 2]:\n        return False\n    return check_min_heap(arr, 2 * idx + 1) and check_min_heap(arr, 2 * idx + 2)\n```", "\ndef check_min_heap(arr, idx):\n    left = 2 * idx + 1\n    right = 2 * idx + 2\n    smallest = idx\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    return arr[idx] <= arr[smallest]\n```", "\ndef check_min_heap(arr, idx):\n    if idx >= len(arr):\n        return True\n    if idx * 2 + 1 >= len(arr) or idx * 2 + 2 >= len(arr):\n        return True\n    if arr[idx] > arr[idx * 2 + 1] or arr[idx] > arr[idx * 2 + 2]:\n        return False\n    return check_min_heap(arr, idx * 2 + 1) and check_min_heap(arr, idx * 2 + 2)\n```", "\ndef check_min_heap(arr, root):\n    if root >= len(arr):\n        return True\n    for i in range(2*root + 1, len(arr)):\n        if arr[root] > arr[i]:\n            return False\n    return check_min_heap(arr, 2*root + 1)\n```"], "num_tokens": [66, 55, 123, 176, 112, 55, 90, 93, 113, 66]}
{"item": {"task_id": 752, "text": "Write a function to find the nth jacobsthal number.", "code": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]", "test_list": ["assert jacobsthal_num(5) == 11", "assert jacobsthal_num(2) == 1", "assert jacobsthal_num(4) == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef jacobsthal_num(n):\n    if n == 1:\n        return 1\n    else:\n        return int((1 + 5**0.5)**n / 2**n)\n```", "\ndef jacobsthal_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```", "\ndef jacobsthal_num(n):\n    return int((phi**n - (-1/phi)**n) / math.sqrt(5))\n```", "\ndef jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```", "\ndef jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return int(((1 + 5**0.5) ** n - (1 - 5**0.5) ** n) / 2**0.5)", "\ndef jacobsthal_num(n):\n    return int((phi**n - (1-phi)**n) / phi**(1/2)) if n > 0 else 0\n```", "\ndef jacobsthal_num(n):\n    return 1 if n == 1 else 2 * (jacobsthal_num(n-1) + jacobsthal_num(n-2))\n```", "\ndef jacobsthal_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```", "\ndef jacobsthal_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return int((1 + 5**0.5)**n - (1 - 5**0.5)**n) / 2**0.5\n```", "\ndef jacobsthal_num(n):\n    return int(((1 + 5**0.5) ** n - (1 - 5**0.5) ** n) / 2**0.5)\n```"], "num_tokens": [46, 74, 32, 74, 74, 42, 44, 74, 73, 48]}
{"item": {"task_id": 753, "text": "Write a function to find minimum k records from tuple list.", "code": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ", "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n```", "\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(tuples, k):\n    return sorted(tuples, key=lambda x: x[1])[:k]\n```", "\ndef min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]\n```"], "num_tokens": [28, 26, 28, 28, 28, 28, 28, 28, 28, 26]}
{"item": {"task_id": 754, "text": "Write a function to find common index elements from three lists.", "code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result", "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef extract_index_list(list1, list2, list3):\n    return [i for i in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [i for i in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [index for index in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [index for index in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [i for i in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [i for i in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [i for i in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [index for index in set(list1) & set(list2) & set(list3)]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [i for i in set(list1) & set(list2) & set(list3) if i in list1 and i in list2 and i in list3]\n```", "\ndef extract_index_list(list1, list2, list3):\n    return [index for index in set(list1) & set(list2) & set(list3)]\n```"], "num_tokens": [37, 37, 37, 37, 37, 37, 37, 37, 53, 37]}
{"item": {"task_id": 755, "text": "Write a function to find the second smallest number in a list.", "code": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ", "test_list": ["assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5", "assert second_smallest([2,2])==None"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None\n```", "\ndef second_smallest(lst):\n    if len(set(lst)) < 2:\n        return None\n    return sorted(set(lst))[1]", "\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None\n```", "\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]", "\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    return lst[1] if len(lst) > 1 else None", "\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None\n```", "\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "\ndef second_smallest(lst):\n    if len(set(lst)) <= 1:\n        return None\n    return min(x for x in set(lst) if x!= min(set(lst)))\n```", "\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]\n```"], "num_tokens": [48, 30, 48, 47, 43, 50, 48, 50, 40, 48]}
{"item": {"task_id": 756, "text": "Write a function that matches a string that has an a followed by zero or one 'b'.", "code": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test_list": ["assert text_match_zero_one(\"ac\")==('Found a match!')", "assert text_match_zero_one(\"dc\")==('Not matched!')", "assert text_match_zero_one(\"abbbba\")==('Found a match!')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef text_match_zero_one(text):\n    if re.fullmatch('a(b?)?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match_zero_one(text):\n    pattern = re.compile('a(b?)')\n    if pattern.fullmatch(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_zero_one(text):\n    if len(text) >= 2 and text[0] == 'a' and (len(text) == 2 or text[1]!= 'b'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match_zero_one(s):\n    if re.fullmatch('a(b?)?', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match_zero_one(s):\n    pattern = r'ab?'\n    if re.fullmatch(pattern, s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match_zero_one(text):\n    if re.fullmatch('a(b?)?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match_zero_one(text):\n    pattern = re.compile('a(b*)')\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_match_zero_one(text):\n    if len(text) < 1:\n        return 'Not matched!'\n    if text[0] == 'a':\n        if len(text) == 1 or text[1]!= 'b':\n            return 'Found a match!'\n        else:\n            return 'Not matched!'\n    return 'Not matched!'", "\ndef text_match_zero_one(text):\n    if len(text) < 1 or text[0]!= 'a':\n        return 'Not matched!'\n    if len(text) > 1 and text[1] == 'b':\n        return 'Found a match!'\n    return 'Found a match!'\n```", "\nimport re\n\ndef text_match_zero_one(text):\n    pattern = re.compile('a(b?)?')\n    if pattern.match(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"], "num_tokens": [41, 45, 59, 41, 46, 41, 47, 72, 63, 46]}
{"item": {"task_id": 757, "text": "Write a function to count the pairs of reverse strings in the given string list.", "code": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "test_list": ["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'", "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'", "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n            if lst[j] == lst[i][::-1]:\n                count += 1\n    return str(count)\n```", "\ndef count_reverse_pairs(lst):\n    return str(sum(1 for s in lst if s == s[::-1]))\n```", "\ndef count_reverse_pairs(lst):\n    count = 0\n    for s in lst:\n        if s == s[::-1]:\n            count += 1\n        for t in lst:\n            if s!= t and t == s[::-1]:\n                count += 1\n    return str(count)\n```", "\ndef count_reverse_pairs(lst):\n    return str(sum(1 for s in lst if s == s[::-1]))\n```", "\ndef count_reverse_pairs(lst):\n    return str(sum(1 for s in lst if s == s[::-1]))\n```", "\ndef count_reverse_pairs(lst):\n    return str(sum(1 for s in lst if s == s[::-1]))\n```", "\ndef count_reverse_pairs(lst):\n    count = 0\n    for i in lst:\n        if i == i[::-1]:\n            continue\n        for j in lst:\n            if i!= j and i == j[::-1]:\n                count += 1\n    return str(count)\n```", "\ndef count_reverse_pairs(lst):\n    count = 0\n    for s in lst:\n        if s!= s[::-1]:\n            for t in lst:\n                if s!= t and s[::-1] == t:\n                    count += 1\n    return str(count)\n```", "\ndef count_reverse_pairs(lst):\n    return str(sum(1 for s in lst if s == s[::-1]))\n```", "\ndef count_reverse_pairs(lst):\n    return str(len([x for x in lst if x == x[::-1]])\n```"], "num_tokens": [76, 26, 64, 26, 26, 26, 61, 59, 26, 26]}
{"item": {"task_id": 758, "text": "Write a function to count number of unique lists within a list.", "code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(subl)) for subl in lst)}\n```", "\ndef unique_sublists(lst):\n    from collections import Counter\n    return Counter(tuple(sorted(sublist)) for sublist in set(tuple(sorted(sub)) for sub in lst))\n```", "\ndef unique_sublists(lst):\n    from collections import Counter\n    return Counter(tuple(sorted(sublist)) for sublist in set(map(tuple, lst)))\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sub)) for sublist in lst)}\n```", "\ndef unique_sublists(lst):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for sublst in lst:\n        tuple_sublst = tuple(sublst)\n        count_dict[tuple_sublst] += 1\n    return dict(count_dict)\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(map(tuple, (frozenset(sublist) for sublist in lst)))\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sub)) for sublist in lst)}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sub)) for sublist in lst)}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sub)) for sublist in lst)}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sublist)) for sublist in lst)}\n```"], "num_tokens": [37, 36, 32, 35, 56, 42, 35, 35, 35, 36]}
{"item": {"task_id": 759, "text": "Write a function to check a decimal with a precision of 2.", "code": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)", "test_list": ["assert is_decimal('123.11')==True", "assert is_decimal('e666.86')==False", "assert is_decimal('3.124587')==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_decimal(s):\n    return s.replace('.', '', 1).isdigit()\n```", "\ndef is_decimal(s):\n    try:\n        float(s)\n        if len(s.split('.')[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False\n```", "\nimport re\n\ndef is_decimal(s):\n    return re.match(r'^\\d+\\.\\d{1,2}$', s) is not None\n```", "\nimport re\n\ndef is_decimal(s):\n    return re.match(r'^-?\\d+\\.\\d{1,2}$', s) is not None\n```", "\ndef is_decimal(s):\n    try:\n        float(s)\n        return '.' in s and len(s.split('.')[1]) <= 2\n    except ValueError:\n        return False\n```", "\ndef is_decimal(s):\n    return s.replace('.', '', 1).isdigit()\n```", "\ndef is_decimal(s):\n    try:\n        float(s)\n        if len(s.split('.')[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False\n```", "\ndef is_decimal(s):\n    try:\n        float(s)\n        return '.' in s and len(s.split('.')[1]) <= 2\n    except ValueError:\n        return False\n```", "\nimport re\n\ndef is_decimal(n):\n    return re.match(r'^\\d+\\.\\d{2}$', n) is not None\n```", "\ndef is_decimal(s):\n    try:\n        float(s)\n        if '.' in s:\n            return len(s.split('.')[1]) <= 2\n        return True\n    except ValueError:\n        return False\n```"], "num_tokens": [19, 43, 34, 35, 39, 19, 43, 39, 32, 45]}
{"item": {"task_id": 760, "text": "Write a python function to check whether an array contains only one distinct element or not.", "code": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')", "test_list": ["assert unique_Element([1,1,1],3) == 'YES'", "assert unique_Element([1,2,1,2],4) == 'NO'", "assert unique_Element([1,2,3,4,5],5) == 'NO'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef unique_Element(arr,n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'\n```", "\ndef unique_Element(arr,n):\n    return 'YES' if len(set(arr)) == 1 else 'NO' if len(set(arr)) == n else 'NO'\n```", "\ndef unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'\n```", "\ndef unique_Element(lst, n):\n    return 'YES' if len(set(lst)) == 1 else 'NO'\n```", "\ndef unique_Element(lst, n):\n    return 'YES' if len(set(lst)) == 1 else 'NO'\n```", "\ndef unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'\n```", "\ndef unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'\n```", "\ndef unique_Element(arr,n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'\n```", "\ndef unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'\n```", "\ndef unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'\n```"], "num_tokens": [26, 37, 27, 27, 27, 27, 27, 26, 27, 27]}
{"item": {"task_id": 761, "text": "Write a function to caluclate arc length of an angle.", "code": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength", "test_list": ["assert arc_length(9,45)==3.5357142857142856", "assert arc_length(9,480)==None", "assert arc_length(5,270)==11.785714285714285"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef arc_length(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return radius * math.radians(angle) * math.pi / 180\n```", "\nimport math\n\ndef arc_length(radius, angle):\n    if angle > 360:\n        return None\n    return radius * math.radians(angle) * math.pi / 180\n```", "\ndef arc_length(radius, angle):\n    if angle > 360:\n        return None\n    return radius * (angle / 360) * 3.14159265359\n```", "\nimport math\n\ndef arc_length(radius, angle):\n    if angle > 360:\n        return None\n    return radius * math.pi * (angle / 180)\n```", "\nimport math\n\ndef arc_length(radius, angle):\n    if angle > 360:\n        return None\n    return radius * math.radians(angle) * math.pi / 180\n```", "\nimport math\n\ndef arc_length(radius, angle):\n    if angle > 360:\n        return None\n    return radius * math.radians(angle) * math.pi / 180\n```", "\ndef arc_length(radius, angle):\n    if angle > 180:\n        return None\n    return radius * (angle / 180 * 3.14159)\n```", "\nimport math\n\ndef arc_length(radius, angle):\n    if angle > 180:\n        return None\n    else:\n        return radius * math.radians(angle)\n```", "\ndef arc_length(radius, angle):\n    if angle % 360 == 0:\n        return None\n    return radius * (angle / 180) * 3.14159265359\n```", "\ndef arc_length(radius, angle):\n    if angle > 360:\n        return None\n    return radius * (angle / 180) * 3.14159265359\n```"], "num_tokens": [42, 39, 40, 37, 39, 39, 37, 35, 43, 40]}
{"item": {"task_id": 762, "text": "Write a function to check whether the given month number contains 30 days or not.", "code": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_monthnumber_number(month):\n    return month in [1,3,5,7,8,10,12]\n```", "\ndef check_monthnumber_number(month_number):\n    return month_number in [1,3,5,7,8,10,12]\n```", "\ndef check_monthnumber_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnumber_number(month):\n    return month in [1,3,5,7,8,10,12]\n```", "\ndef check_monthnumber_number(month):\n    return month in [1,3,5,7,8,10,12]\n```", "\ndef check_monthnumber_number(month_number):\n    return month_number in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnumber_number(month):\n    return month not in [4,6,9,11]\n```", "\ndef check_monthnumber_number(month):\n    return month in [1,3,5,7,8,10,12]\n```", "\ndef check_monthnumber_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnumber_number(month_number):\n    return month_number in [1,3,5,7,8,10,12]\n```"], "num_tokens": [29, 31, 35, 29, 29, 37, 24, 29, 35, 31]}
{"item": {"task_id": 763, "text": "Write a python function to find the minimum difference between any two elements in a given array.", "code": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ", "test_list": ["assert find_Min_Diff((1,5,3,19,18,25),6) == 1", "assert find_Min_Diff((4,3,2,6),4) == 1", "assert find_Min_Diff((30,5,20,9),4) == 4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_Min_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr)-1):\n        diff = min(arr[i+1] - arr[i], k - arr[i+1] + arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff\n```", "\ndef find_Min_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff <= k:\n            min_diff = min(min_diff, diff)\n    return min_diff\n```", "\ndef find_Min_Diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff <= n and diff < min_diff:\n            min_diff = diff\n    return min_diff\n```", "\ndef find_Min_Diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = (arr[i + 1] - arr[i]) % n\n        min_diff = min(min_diff, diff)\n    return min_diff\n```", "\ndef find_Min_Diff(lst, n):\n    lst.sort()\n    min_diff = float('inf')\n    for i in range(len(lst)-1):\n        diff = lst[i+1] - lst[i]\n        if diff < min_diff and diff % n == 0:\n            min_diff = diff\n    return min_diff\n```", "\ndef find_Min_Diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        min_diff = min(min_diff, abs(arr[i+1] - arr[i]))\n    return min_diff if min_diff <= k else 0\n```", "\ndef find_Min_Diff(arr, k):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        if abs(arr[i+1] - arr[i]) < min_diff:\n            min_diff = abs(arr[i+1] - arr[i])\n    return min_diff if min_diff <= k else 0\n```", "\ndef find_Min_Diff(arr, k):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff <= k:\n            min_diff = min(min_diff, diff)\n    return min_diff\n```", "\ndef find_Min_Diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff and diff <= n:\n            min_diff = diff\n    return min_diff\n```", "\ndef find_Min_Diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff and diff <= n:\n            min_diff = diff\n    return min_diff\n```"], "num_tokens": [73, 69, 70, 68, 71, 67, 81, 71, 70, 68]}
{"item": {"task_id": 764, "text": "Write a python function to count numeric values in a given string.", "code": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr", "test_list": ["assert number_ctr('program2bedone') == 1", "assert number_ctr('3wonders') ==1", "assert number_ctr('123') == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)", "\ndef number_ctr(s):\n    return len([c for c in s if c.isdigit()])\n```", "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)", "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)", "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)", "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)", "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)", "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)", "\ndef number_ctr(s):\n    return len([i for i in s if i.isdigit()])\n```", "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)"], "num_tokens": [18, 21, 18, 18, 18, 18, 18, 18, 21, 18]}
{"item": {"task_id": 765, "text": "Write a function to find nth polite number.", "code": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "test_list": ["assert is_polite(7) == 11", "assert is_polite(4) == 7", "assert is_polite(9) == 13"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_polite(n):\n    polite_num = 0\n    i = 0\n    while True:\n        if sum(int(digit) for digit in str(i)) + i == n:\n            polite_num = i\n            break\n        i += 1\n    return polite_num\n```", "\ndef is_polite(n):\n    count = 0\n    i = 1\n    while True:\n        if sum(int(digit) for digit in str(i)) == 0 or sum(int(digit) for digit in str(i)) > 9:\n            i += 1\n            continue\n        if sum(int(digit) for digit in str(i)) % 10 == 0:\n            count += 1\n        if count == n:\n            return i\n        i += 1\n```", "\ndef is_polite(n):\n    i = 0\n    while True:\n        if sum(int(digit) for digit in str(i)) + i % 10 == 7:\n            if n == 1:\n                return i\n            n -= 1\n        i += 1\n```", "\ndef is_polite(n):\n    polite = 0\n    i = 1\n    while True:\n        polite += i\n        if polite % i == 0 and polite > n:\n            return polite\n        i += 1\n```", "\ndef is_polite(n):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, int(k**0.5) + 1):\n            if k % i == 0:\n                return False\n        return True\n\n    polite_numbers = [i for i in range(2, 10000) if is_prime(i)]\n    return polite_numbers[n-1]\n```", "\ndef is_polite(n):\n    count = 0\n    i = 1\n    while True:\n        if is_sum_of_divisors(i):\n            count += 1\n        if count == n:\n            return i\n        i += 1\n\ndef is_sum_of_divisors(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum == num + 1\n```", "\ndef is_polite(n):\n    polite_num = 0\n    i = 0\n    while True:\n        polite_num += i\n        i += 1\n        if polite_num >= n:\n            return polite_num\n```", "\ndef is_polite(n):\n    i = 1\n    while True:\n        if sum(int(digit) for digit in str(i)) > n:\n            return i - 1\n        i += 1\n```", "\ndef is_polite(n):\n    polite_nums = [i for i in range(1, 1000000) if sum(int(digit) for digit in str(i)) % 7 == 0]\n    return polite_nums[n-1]\n```", "\ndef is_polite(n):\n    polite_numbers = [i for i in range(1, 1000) if sum(int(digit) for digit in str(i)) == 10]\n    return polite_numbers[n-1]\n```"], "num_tokens": [64, 108, 64, 53, 92, 103, 50, 48, 54, 50]}
{"item": {"task_id": 766, "text": "Write a function to iterate over all pairs of consecutive items in a given list.", "code": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```", "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```", "\ndef pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n```", "\ndef pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n```", "\ndef pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n```", "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```", "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```", "\ndef pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n```", "\ndef pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n```", "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```"], "num_tokens": [29, 29, 20, 20, 20, 29, 29, 20, 20, 29]}
{"item": {"task_id": 767, "text": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "code": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "test_list": ["assert get_Pairs_Count([1,1,1,1],4,2) == 6", "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3", "assert get_Pairs_Count([1,-2,3],3,1) == 1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_Pairs_Count(lst, sum, k):\n    return sum(1 for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i]+lst[j] == sum+k)\n```", "\ndef get_Pairs_Count(arr, sum, k):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            if arr[left] == arr[right]:\n                count += right - left + 1\n                left += 1\n                right -= 1\n            elif arr[left] < arr[right]:\n                count += 1\n                left += 1\n            else:\n                right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n```", "\ndef get_Pairs_Count(arr, sum, k):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            if current_sum == k:\n                count += 1\n            left += 1\n            right -= 1\n        elif current_sum < k:\n            left += 1\n        else:\n            right -= 1\n    return count * 2 if k == sum else count", "\ndef get_Pairs_Count(lst, sum, k):\n    lst.sort()\n    i, j = 0, len(lst) - 1\n    count = 0\n    while i < j:\n        current_sum = lst[i] + lst[j]\n        if current_sum == sum:\n            if current_sum == k:\n                count += 1\n            i += 1\n            j -= 1\n        elif current_sum < sum:\n            i += 1\n        else:\n            j -= 1\n    return count * 2\n```", "\ndef get_Pairs_Count(lst, sum, n):\n    return sum(1 for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] + lst[j] == sum)\n```", "\ndef get_Pairs_Count(arr, sum, k):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            if arr[left] == arr[right]:\n                count += right - left + 1\n                left += 1\n                right -= 1\n            elif arr[left] < arr[right]:\n                count += 1\n                left += 1\n            else:\n                right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n```", "\ndef get_Pairs_Count(lst, sum, k):\n    return sum(1 for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] + lst[j] == sum)\n```", "\ndef get_Pairs_Count(lst, sum, k):\n    return sum(1 for x in lst for y in lst if x < y and x + y == sum)\n```", "\ndef get_Pairs_Count(arr, sum, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count * k\n```", "\ndef get_Pairs_Count(lst, sum, k):\n    lst.sort()\n    left, right = 0, len(lst) - 1\n    count = 0\n    while left < right:\n        current_sum = lst[left] + lst[right]\n        if current_sum == sum:\n            if current_sum == k:\n                count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count * 2 if k is None else count\n```"], "num_tokens": [48, 149, 121, 117, 48, 149, 48, 38, 64, 123]}
{"item": {"task_id": 768, "text": "Write a python function to check for odd parity of a given number.", "code": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False", "test_list": ["assert check_Odd_Parity(13) == True", "assert check_Odd_Parity(21) == True", "assert check_Odd_Parity(18) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_Odd_Parity(n):\n    return n % 2!= 0", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0\n```", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0\n```", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0\n```", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0", "\ndef check_Odd_Parity(n):\n    return n % 2!= 0"], "num_tokens": [19, 19, 19, 19, 19, 21, 21, 21, 19, 19]}
{"item": {"task_id": 769, "text": "Write a python function to get the difference between two lists.", "code": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Diff(list1, list2):\n    return sorted(list(set(list1 + list2)))\n```", "\ndef Diff(list1, list2):\n    return sorted(set(list1 + list2))\n```", "\ndef Diff(list1, list2):\n    result = list(set(list1) ^ set(list2))\n    result.sort()\n    return result", "\ndef Diff(list1, list2):\n    result = list1 + list2\n    result = sorted(result)\n    result = [x for i, x in enumerate(result) if x not in result[:i]]\n    return result\n```", "\ndef Diff(list1, list2):\n    return sorted(list(set(list1 + list2)))\n```", "\ndef Diff(list1, list2):\n    return sorted(list(set(list1 + list2)))\n```", "\ndef Diff(list1, list2):\n    return sorted(list(set(list1 + list2)))\n```", "\ndef Diff(list1, list2):\n    return sorted(list(set(list1 + list2)))\n```", "\ndef Diff(list1, list2):\n    return sorted(list(set(list1 + list2)))", "\ndef Diff(list1, list2):\n    return sorted(list(set(list1 + list2)))\n```"], "num_tokens": [22, 21, 30, 51, 22, 22, 22, 22, 21, 22]}
{"item": {"task_id": 770, "text": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "test_list": ["assert odd_Num_Sum(2) == 82", "assert odd_Num_Sum(3) == 707", "assert odd_Num_Sum(4) == 3108"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n+1, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n+1, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n+1, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n+1, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))", "\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))"], "num_tokens": [29, 31, 29, 29, 29, 31, 31, 31, 29, 29]}
{"item": {"task_id": 771, "text": "Write a function to check if the given expression is balanced or not.", "code": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack", "test_list": ["assert check_expression(\"{()}[{}]\") == True", "assert check_expression(\"{()}[{]\") == False", "assert check_expression(\"{()}[{}][]({})\") == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_expression(expression):\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs:\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n    return not stack\n```", "\ndef check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack\n```", "\ndef check_expression(expression):\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs:\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n    return not stack\n```", "\ndef check_expression(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack\n```", "\ndef check_expression(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or stack.pop()!= mapping[char]:\n                return False\n    return not stack\n```", "\ndef check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack\n```", "\ndef check_expression(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack\n```", "\ndef check_expression(expression):\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs:\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n    return not stack\n```", "\ndef check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack\n```", "\ndef check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack\n```"], "num_tokens": [72, 72, 72, 73, 72, 72, 72, 72, 72, 72]}
{"item": {"task_id": 772, "text": "Write a function to remove all the words with k length in the given string.", "code": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ", "test_list": ["assert remove_length('The person is most value tet', 3) == 'person is most value'", "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'", "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)\n```", "\ndef remove_length(s, k):\n    words = s.split()\n    return''.join(word for word in words if len(word)!= k)\n```"], "num_tokens": [27, 27, 27, 27, 27, 27, 27, 27, 27, 31]}
{"item": {"task_id": 773, "text": "Write a function to find the occurrence and position of the substrings within a string.", "code": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "test_list": ["assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)", "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef occurance_substring(s, sub):\n    pos = 0\n    while True:\n        pos = s.find(sub, pos)\n        if pos == -1:\n            return None\n        yield sub, pos, pos + len(sub)\n        pos += 1\n```", "\ndef occurance_substring(s, sub):\n    try:\n        start = s.index(sub)\n        end = start + len(sub) - 1\n        return (sub, start, end)\n    except ValueError:\n        return (None, -1, -1)\n```", "\ndef occurance_substring(s, sub):\n    try:\n        start = s.index(sub)\n        return (sub, start, start + len(sub) - 1)\n    except ValueError:\n        return (None, None, None)\n```", "\ndef occurance_substring(s, sub):\n    try:\n        start = s.index(sub)\n        end = start + len(sub)\n        return sub, start, end\n    except ValueError:\n        return None\n```", "\ndef occurance_substring(s, sub):\n    pos = [i for i in range(len(s)) if s.startswith(sub, i)]\n    if len(pos) == 0:\n        return None\n    return (sub, pos[0], pos[0] + len(sub))\n```", "\ndef occurance_substring(s, substring):\n    try:\n        first = s.index(substring)\n        last = s.rindex(substring)\n        return substring, first, last\n    except ValueError:\n        return None\n```", "\ndef occurance_substring(s, substr):\n    try:\n        index = s.index(substr)\n        return substr, index, index + len(substr)\n    except ValueError:\n        return None\n```", "\ndef occurance_substring(s, sub):\n    try:\n        start = s.index(sub)\n        return (sub, start, start + len(sub))\n    except ValueError:\n        return (None, None, None)\n```", "\ndef occurance_substring(s, sub):\n    pos = 0\n    while True:\n        pos = s.find(sub, pos)\n        if pos == -1:\n            break\n        yield pos, pos + len(sub)\n        pos += len(sub)\n```", "\ndef occurance_substring(s, sub):\n    try:\n        return sub, s.index(sub), s.index(sub) + len(sub)\n    except ValueError:\n        return None\n```"], "num_tokens": [59, 58, 51, 46, 61, 48, 41, 47, 56, 39]}
{"item": {"task_id": 774, "text": "Write a function to check if the string is a valid email address or not using regex.", "code": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ", "test_list": ["assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'", "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'", "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```", "\nimport re\n\ndef check_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```"], "num_tokens": [68, 68, 68, 68, 68, 68, 68, 68, 68, 68]}
{"item": {"task_id": 775, "text": "Write a python function to check whether every odd index contains odd numbers of a given list.", "code": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_list": ["assert odd_position([2,1,4,3,6,7,6,3]) == True", "assert odd_position([4,1,2]) == True", "assert odd_position([1,2,3]) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef odd_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n```", "\ndef odd_position(lst):\n    return all(i % 2!= 0 and isinstance(i, int) for i in lst[1::2])", "\ndef odd_position(lst):\n    return all(i % 2!= 0 and isinstance(lst[i], int) and lst[i] % 2!= 0 for i in range(1, len(lst), 2))", "\ndef odd_position(lst):\n    return all(x % 2!= 0 for i, x in enumerate(lst) if i % 2!= 0)", "\ndef odd_position(lst):\n    return all(i % 2!= 0 and i % 2!= 0 for i, x in enumerate(lst) if x % 2!= 0)", "\ndef odd_position(lst):\n    return all(i % 2!= 0 and isinstance(i, int) for i in lst[1::2])", "\ndef odd_position(lst):\n    return all(i % 2!= 0 and i % 2!= 0 for i, x in enumerate(lst) if x % 2!= 0)\n```", "\ndef odd_position(lst):\n    return all(num % 2!= 0 for i, num in enumerate(lst) if i % 2!= 0)", "\ndef odd_position(lst):\n    return all(i % 2!= 0 and isinstance(x, int) and x % 2!= 0 for i, x in enumerate(lst, 1) if i % 2!= 0)", "\ndef odd_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"], "num_tokens": [42, 32, 47, 34, 42, 32, 43, 34, 51, 40]}
{"item": {"task_id": 776, "text": "Write a function to count those characters which have vowels as their neighbors in the given string.", "code": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ", "test_list": ["assert count_vowels('bestinstareels') == 7", "assert count_vowels('partofthejourneyistheend') == 12", "assert count_vowels('amazonprime') == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(1, len(s) - 1):\n        if s[i-1] in vowels or s[i+1] in vowels:\n            if s[i] in vowels:\n                count += 1\n    return count\n```", "\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i > 0 and s[i-1] in vowels:\n                count += 1\n            if i < len(s)-1 and s[i+1] in vowels:\n                count += 1\n    return count\n```", "\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i > 0 and s[i-1] in vowels:\n                count += 1\n            if i < len(s) - 1 and s[i+1] in vowels:\n                count += 1\n    return count\n```", "\ndef count_vowels(s):\n    s = s.lower()\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i > 0 and s[i-1] in vowels:\n                count += 1\n            if i < len(s) - 1 and s[i+1] in vowels:\n                count += 1\n    return count\n```", "\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i > 0 and s[i-1] in vowels:\n            if s[i] in vowels:\n                count += 1\n        if i < len(s) - 1 and s[i+1] in vowels:\n            if s[i] in vowels:\n                count += 1\n    return count\n```", "\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i > 0 and s[i-1] in vowels:\n                count += 1\n            if i < len(s) - 1 and s[i+1] in vowels:\n                count += 1\n    return count\n```", "\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i > 0 and s[i-1] in vowels:\n                count += 1\n            if i < len(s)-1 and s[i+1] in vowels:\n                count += 1\n    return count\n```", "\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if i > 0 and i < len(s) - 1:\n            if s[i - 1] in vowels or s[i + 1] in vowels:\n                count += 1\n        elif i == 0 and s[i + 1] in vowels:\n            count += 1\n        elif i == len(s) - 1 and s[i - 1] in vowels:\n            count += 1\n    return count\n```", "\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(s) - 1):\n        if s[i-1] in vowels and s[i] not in vowels:\n            count += 1\n        if s[i] in vowels and s[i+1] not in vowels:\n            count += 1\n    return count\n```", "\ndef count_vowels(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            if i > 0 and s[i-1] in 'aeiou':\n                count += 1\n            if i < len(s)-1 and s[i+1] in 'aeiou':\n                count += 1\n    return count\n```"], "num_tokens": [74, 87, 92, 95, 100, 89, 87, 125, 91, 92]}
{"item": {"task_id": 777, "text": "Write a python function to find the sum of non-repeated elements in a given array.", "code": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum", "test_list": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 21", "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71", "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_Sum(arr, k):\n    seen = set()\n    return sum(x for x in arr if x not in seen and not seen.add(x))\n```", "\ndef find_Sum(arr, n):\n    return sum(set(arr)) - n\n```", "\ndef find_Sum(arr, k):\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return sum(num for num in count if count[num] == 1)\n```", "\ndef find_Sum(lst, n):\n    return sum(set([x for x in lst if lst.count(x) == 1]))\n```", "\ndef find_Sum(arr, n):\n    return sum(set(arr) - set(arr[:n]) - set(arr[n:]))\n```", "\ndef find_Sum(lst, n):\n    return sum(set(i for i in lst if lst.count(i) == 1))\n```", "\ndef find_Sum(arr, k):\n    seen = set()\n    return sum(i for i in arr if i not in seen and not seen.add(i))\n```", "\ndef find_Sum(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return sum([num for num in count_dict if count_dict[num] == 1])\n```", "\ndef find_Sum(arr, k):\n    return sum(set(arr) - set([i for i in arr if arr.count(i) > 1]))\n```", "\ndef find_Sum(arr, k):\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return sum(num for num in count if count[num] == 1) * k\n```"], "num_tokens": [35, 20, 63, 30, 29, 29, 35, 69, 34, 66]}
{"item": {"task_id": 778, "text": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "code": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]", "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        result.append(lst[i - count + 1:i + 1] * count)\n        i += 1\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    temp = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    result.append(temp)\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    current = [lst[0]]\n    for item in lst[1:]:\n        if item == current[-1][0]:\n            current.append(item)\n        else:\n            result.append(current)\n            current = [item]\n    result.append(current)\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    temp = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    result.append(temp)\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    temp = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    result.append(temp)\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    current = []\n    for item in lst:\n        if not current or item!= current[-1]:\n            if current:\n                result.append(current)\n            current = [item]\n        else:\n            current.append(item)\n    if current:\n        result.append(current)\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = [[x] if i == 0 or lst[i-1]!= x else result[-1].append(x) or result[-1] for i, x in enumerate(lst)]\n    return [x for x in result if len(x) > 1 or not result]\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        result.append(lst[i - (count - 1):i + 1])\n        i += 1\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    temp = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    result.append(temp)\n    return result\n```", "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        result.append(lst[i - count + 1:i+1])\n        i += 1\n    return result\n```"], "num_tokens": [93, 74, 68, 75, 74, 71, 68, 92, 74, 89]}
{"item": {"task_id": 779, "text": "Write a function to count the number of unique lists within a list.", "code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(map(tuple, lst))}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sublist): lst.count(sublist) for sublist in set(tuple(sublist) for sublist in lst)}\n```", "\ndef unique_sublists(lists):\n    return {(tuple(sorted(sublist)): lists.count(sublist) for sublist in set(tuple(sorted(sublist)) for sublist in lists)}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(map(tuple, (tuple(sub) for sub in lst)))\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(map(tuple, (tuple(sorted(subl)) for subl in lst))}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sub)) for sublist in lst)}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sub)) for sublist in lst)}\n```", "\ndef unique_sublists(lst):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for sublst in lst:\n        sublst_tuple = tuple(sorted(sublst))\n        count_dict[sublst_tuple] += 1\n    return dict(count_dict)\n```", "\ndef unique_sublists(lst):\n    return {tuple(sublist): lst.count(sublist) for sublist in set(map(tuple, lst))}\n```", "\ndef unique_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in set(tuple(sorted(sub)) for sublist in lst)}\n```"], "num_tokens": [31, 34, 37, 38, 41, 35, 35, 56, 30, 35]}
{"item": {"task_id": 780, "text": "Write a function to find the combinations of sums with tuples in the given tuple list.", "code": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ", "test_list": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]", "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_combinations(tuples):\n    result = set()\n    for i in range(len(tuples)):\n        for j in range(i, len(tuples)):\n            result.add((tuples[i][0] + tuples[j][1], tuples[i][1] + tuples[j][0]))\n            result.add((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return sorted(list(result))\n```", "\ndef find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n            result.append((tuples[i][0] + tuples[j][1], tuples[i][1] + tuples[j][0]))\n    return result\n```", "\ndef find_combinations(tuples):\n    return [(a + b, a + c) for a, b in tuples for c in [x for x in tuples if (x[0], x[1])!= (a, b)]]\n```", "\ndef find_combinations(tuples):\n    return [(t1[0] + t2[0], t1[1] + t2[1]) for t1 in tuples for t2 in tuples if t1!= t2]\n```", "\ndef find_combinations(tuples):\n    return [(t1[0] + t2[0], t1[1] + t2[1]) for t1 in tuples for t2 in tuples if t1!= t2]\n```", "\ndef find_combinations(tuples):\n    return [(a + b, c + d) for a, b in tuples for c, d in tuples if a + c!= 0 and b + d!= 0]\n```", "\ndef find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n```", "\ndef find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n```", "\ndef find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n            combinations.append((tuple_list[i][0] + tuple_list[j][1], tuple_list[i][1] + tuple_list[j][0]))\n    return combinations\n```", "\ndef find_combinations(tuples):\n    return [(t1[0] + t2[0], t1[1] + t2[1]) for t1 in tuples for t2 in tuples if t1!= t2]\n```"], "num_tokens": [95, 94, 53, 52, 52, 48, 69, 68, 98, 52]}
{"item": {"task_id": 781, "text": "Write a python function to check whether the count of divisors is even or odd.", "code": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "test_list": ["assert count_Divisors(10) == \"Even\"", "assert count_Divisors(100) == \"Odd\"", "assert count_Divisors(125) == \"Even\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n```", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n```", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n```", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n```", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n```", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n```", "\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\""], "num_tokens": [61, 61, 59, 59, 61, 61, 60, 60, 61, 60]}
{"item": {"task_id": 782, "text": "Write a python function to find the sum of all odd length subarrays.", "code": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "test_list": ["assert Odd_Length_Sum([1,2,4]) == 14", "assert Odd_Length_Sum([1,2,1,2]) == 15", "assert Odd_Length_Sum([1,7]) == 8"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Odd_Length_Sum(lst):\n    return sum(sum(sub) for sub in (lst[i: j] for i in range(len(lst)) for j in range(i+1, len(lst)+1) if (j-i) % 2!= 0))", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(arr[i:i+2]) for i in range(len(arr)-1) if (i % 2!= 0))", "\ndef Odd_Length_Sum(lst):\n    return sum(sum(sublist) for sublist in (lst[i:i+x] for i in range(len(lst)) for x in range(1, len(lst)-i+1) if (x+i) % 2!= 0))", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(arr[i:i+2]) for i in range(len(arr)-1) if (i+1)%2!= 0) + arr[-1]", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(subarray) for subarray in (arr[i:i+j] for i in range(len(arr)) for j in range(i+1, len(arr)+1) if (j-i)%2!=0))", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(subarray) for subarray in (arr[i: j+1] for i in range(len(arr)) for j in range(i, len(arr)) if (j - i) % 2!= 0))", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(subarray) for i, subarray in enumerate(map(lambda x: x[i:i+x+1], range(0, len(arr), 2)) + map(lambda x: x[i:i+x], range(1, len(arr), 2)))\n```", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(subarray) for subarray in (arr[i: j] for i in range(len(arr)) for j in range(i+1, len(arr)+1) if (j-i)%2!= 0))", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(arr[i:j+1]) for i in range(len(arr)) for j in range(i, len(arr)) if (j-i+1) % 2!= 0)\n```", "\ndef Odd_Length_Sum(arr):\n    return sum(sum(subarray) for i in range(len(arr)) for subarray in [[arr[i-j:i+j+1] for j in range(i+1)] if len(subarray) % 2!= 0])"], "num_tokens": [56, 38, 58, 44, 55, 57, 65, 56, 50, 56]}
{"item": {"task_id": 783, "text": "Write a function to convert rgb color to hsv color.", "code": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v", "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) if g >= b else (60 * ((g-b)/df) + 120)\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 180)\n    else:\n        h = (60 * ((r-g)/df) + 240)\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s*100, v*100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v * 100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s*100, v*100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    else:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s*100, v*100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v * 100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s * 100, v * 100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s * 100, v * 100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v*100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) if g >= b else (60 * ((g-b)/df) + 120)\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 180)\n    else:\n        h = (60 * ((r-g)/df) + 240)\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v*100\n```", "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v * 100.0\n```"], "num_tokens": [199, 201, 196, 193, 201, 204, 204, 194, 197, 203]}
{"item": {"task_id": 784, "text": "Write a function to find the product of first even and odd number of a given list.", "code": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "test_list": ["assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert mul_even_odd([1,5,7,9,10])==10"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef mul_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2!= 0]\n    if not even or not odd:\n        return 0\n    return even[0] * odd[0]\n```", "\ndef mul_even_odd(lst):\n    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2!= 0]\n    return even[0] * odd[0] if even and odd else 0\n```", "\ndef mul_even_odd(lst):\n    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2!= 0]\n    return even[0] * odd[0] if even and odd else 0\n```", "\ndef mul_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2!= 0]\n    if not even or not odd:\n        return 0\n    return even[0] * odd[0]\n```", "\ndef mul_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2!= 0), None)\n    return even * odd\n```", "\ndef mul_even_odd(lst):\n    even = next((i for i in lst if i % 2 == 0), None)\n    odd = next((i for i in lst if i % 2!= 0), None)\n    return even * odd if even is not None and odd is not None else 0\n```", "\ndef mul_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2!= 0), None)\n    return even * odd\n```", "\ndef mul_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2!= 0]\n    return even[0] * odd[0] if even and odd else 0\n```", "\ndef mul_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2!= 0]\n    if not even or not odd:\n        return 0\n    return even[0] * odd[0]\n```", "\ndef mul_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2!= 0]\n    return even[0] * odd[0] if even and odd else 0\n```"], "num_tokens": [69, 64, 64, 69, 57, 70, 57, 64, 69, 64]}
{"item": {"task_id": 785, "text": "Write a function to convert tuple string to integer tuple.", "code": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "test_list": ["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)", "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef tuple_str_int(t):\n    return eval(t.replace('(', '').replace(')', ''))", "\ndef tuple_str_int(t):\n    return tuple(int(i) for i in t.strip(\"()\").split(\",\"))\n```", "\ndef tuple_str_int(s):\n    return tuple(int(i) for i in s.strip('()').split(','))\n```", "\ndef tuple_str_int(s):\n    return tuple(int(x) for x in s.strip('()').split(','))\n```", "\ndef tuple_str_int(t):\n    return tuple(int(x) for x in t[1:-1].split(','))\n```", "\ndef tuple_str_int(t):\n    return tuple(map(int, t.strip('()').split(',')))\n```", "\ndef tuple_str_int(t):\n    return tuple(map(int, t.strip('()').split(',')))", "\ndef tuple_str_int(s):\n    return tuple(int(i) for i in s.strip('()').split(','))\n```", "\ndef tuple_str_int(s):\n    return tuple(map(int, s.strip('()').split(',')))\n```", "\ndef tuple_str_int(t):\n    return tuple(int(x) for x in t.strip('()').split(','))\n```"], "num_tokens": [21, 26, 26, 26, 27, 23, 22, 26, 23, 26]}
{"item": {"task_id": 786, "text": "Write a function to locate the right insertion point for a specified value in sorted order.", "code": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "test_list": ["assert right_insertion([1,2,4,5],6)==4", "assert right_insertion([1,2,4,5],3)==2", "assert right_insertion([1,2,4,5],7)==4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef right_insertion(arr, target):\n    for i in range(len(arr)):\n        if arr[i] >= target:\n            return i\n    return len(arr)\n```", "\ndef right_insertion(lst, val):\n    for i in range(len(lst) + 1):\n        if val <= lst[i]:\n            return i\n    return len(lst)\n```", "\ndef right_insertion(lst, target):\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) // 2\n        if lst[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```", "\ndef right_insertion(lst, val):\n    for i in range(len(lst) + 1):\n        if val <= lst[i]:\n            return i\n    return len(lst)\n```", "\ndef right_insertion(lst, val):\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) // 2\n        if lst[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```", "\ndef right_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)\n```", "\ndef right_insertion(arr, val):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n```", "\ndef right_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)\n```", "\ndef right_insertion(arr, val):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n```", "\ndef right_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)\n```"], "num_tokens": [36, 39, 68, 39, 68, 36, 75, 36, 87, 36]}
{"item": {"task_id": 787, "text": "Write a function that matches a string that has an a followed by three 'b'.", "code": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test_list": ["assert text_match_three(\"ac\")==('Not matched!')", "assert text_match_three(\"dc\")==('Not matched!')", "assert text_match_three(\"abbbba\")==('Found a match!')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef text_match_three(text):\n    if len(text) < 4 or text[0]!= 'a' or text[1:4]!= 'bb':\n        return 'Not matched!'\n    return 'Found a match!'", "\ndef text_match_three(text):\n    if text.startswith('abbb'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_three(text):\n    if text.startswith('a') and text[1:4] == 'bbb':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_three(text):\n    if text[0] == 'a' and text[1:4] == 'bbb':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_match_three(text):\n    if text[0] == 'a' and text[1:4] == 'bbb':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_three(text):\n    if text.startswith('a') and text[1:4] == 'bb':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_three(text):\n    if text[0] == 'a' and text[1:4] == 'bbb':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_three(text):\n    if text.startswith('a') and text[1:4] == 'bb':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_match_three(text):\n    if len(text) < 4 or text[0]!= 'a' or text[1:4]!= 'bb':\n        return 'Not matched!'\n    return 'Found a match!'", "\ndef text_match_three(text):\n    if text.startswith(\"abbb\") or text.startswith(\"abbbb\"):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"], "num_tokens": [47, 32, 42, 46, 45, 42, 45, 42, 47, 39]}
{"item": {"task_id": 788, "text": "Write a function to create a new tuple from the given string and list.", "code": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "test_list": ["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')", "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef new_tuple(lst, str):\n    return tuple(lst + [str])\n```", "\ndef new_tuple(lst, s):\n    return (*lst, s)", "\ndef new_tuple(lst, s):\n    return (*lst, s)\n```", "\ndef new_tuple(lst, str):\n    return (*lst, str)\n```", "\ndef new_tuple(lst, s):\n    return (*lst, s)", "\ndef new_tuple(lst, str):\n    return (*lst, str)\n```", "\ndef new_tuple(list1, str1):\n    return tuple(list1 + [str1])\n```", "\ndef new_tuple(lst, s):\n    return (*lst, s)\n```", "\ndef new_tuple(lst, str):\n    return (*lst, str)", "\ndef new_tuple(lst, string):\n    return tuple(lst + [string])\n```"], "num_tokens": [18, 16, 17, 17, 16, 17, 22, 17, 16, 18]}
{"item": {"task_id": 789, "text": "Write a function to calculate the perimeter of a regular polygon.", "code": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter", "test_list": ["assert perimeter_polygon(4,20)==80", "assert perimeter_polygon(10,15)==150", "assert perimeter_polygon(9,7)==63"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n```", "\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n```", "\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n```", "\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n```", "\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n```", "\ndef perimeter_polygon(n, s):\n    return n*s\n```", "\ndef perimeter_polygon(sides, side_length):\n    return sides * side_length\n```", "\ndef perimeter_polygon(n, side):\n    return n * side\n```", "\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n```", "\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n```"], "num_tokens": [18, 18, 18, 18, 18, 15, 19, 16, 18, 18]}
{"item": {"task_id": 790, "text": "Write a python function to check whether every even index contains even numbers of a given list.", "code": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef even_position(lst):\n    return all(i % 2 == 0 and i % 2 == 0 for i, x in enumerate(lst) if x % 2 == 0)\n```", "\ndef even_position(lst):\n    return all(i % 2 == 0 and lst[i] % 2 == 0 for i in range(0, len(lst), 2))\n```", "\ndef even_position(lst):\n    return all(i % 2 == 0 and type(i) == int and i % 2 == 0 for i in lst[1::2])", "\ndef even_position(lst):\n    return all(i % 2 == 0 and isinstance(x, int) and x % 2 == 0 for i, x in enumerate(lst) if i % 2 == 0)", "\ndef even_position(lst):\n    return all(lst[i]%2==0 for i in range(0, len(lst), 2))\n```", "\ndef even_position(lst):\n    return all(i%2 == 0 and num % 2 == 0 for i, num in enumerate(lst) if i % 2 == 0)", "\ndef even_position(lst):\n    return all(i % 2 == 0 and isinstance(x, int) and x % 2 == 0 for i, x in enumerate(lst) if i % 2 == 0)", "\ndef even_position(lst):\n    return all(i % 2 == 0 and num % 2 == 0 for i, num in enumerate(lst) if i % 2 == 0)", "\ndef even_position(lst):\n    return all(i % 2 == 0 and isinstance(n, int) and n % 2 == 0 for i, n in enumerate(lst) if i % 2 == 0)", "\ndef even_position(lst):\n    return all(i % 2 == 0 and i % 2 == 0 for i, x in enumerate(lst) if x % 2 == 0)"], "num_tokens": [43, 41, 40, 48, 30, 41, 48, 42, 48, 42]}
{"item": {"task_id": 791, "text": "Write a function to remove the nested record from the given tuple.", "code": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "test_list": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)", "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))\n```", "\ndef remove_nested(t):\n    result = []\n    for i in t:\n        if isinstance(i, tuple):\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)\n```", "\ndef remove_nested(t):\n    new_t = []\n    for element in t:\n        if isinstance(element, tuple):\n            new_t.extend(remove_nested(element))\n        else:\n            new_t.append(element)\n    return tuple(new_t)\n```", "\ndef remove_nested(t):\n    new_tuple = ()\n    for i in t:\n        if isinstance(i, tuple):\n            i = remove_nested(i)\n        new_tuple += i,\n    return new_tuple\n```", "\ndef remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple) or not remove_nested(x))\n```", "\ndef remove_nested(t):\n    result = []\n    for x in t:\n        if isinstance(x, tuple):\n            result.extend(remove_nested(x))\n        else:\n            result.append(x)\n    return tuple(result)\n```", "\ndef remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))\n```", "\ndef remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))\n```", "\ndef remove_nested(t):\n    result = []\n    for i in t:\n        if isinstance(i, tuple):\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)\n```", "\ndef remove_nested(t):\n    return tuple(i for i in t if not isinstance(i, tuple) or not i)\n```"], "num_tokens": [23, 45, 49, 44, 29, 45, 23, 23, 45, 27]}
{"item": {"task_id": 792, "text": "Write a python function to count the number of lists in a given number of lists.", "code": "def count_list(input_list): \r\n    return len(input_list)", "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_list(lists):\n    return len(lists)\n```", "\ndef count_list(lists):\n    return len(lists)\n```", "\ndef count_list(list_of_lists):\n    return len(list_of_lists)\n```", "\ndef count_list(lists):\n    return len(lists)", "\ndef count_list(lists):\n    return len(lists)\n```", "\ndef count_list(list_of_lists):\n    return len(list_of_lists)", "\ndef count_list(lst):\n    return len(lst)", "\ndef count_list(lst):\n    return len(lst)", "\ndef count_list(lst):\n    return len(lst)\n```", "\ndef count_list(lists):\n    return len(lists)"], "num_tokens": [15, 15, 17, 14, 15, 16, 12, 12, 13, 14]}
{"item": {"task_id": 793, "text": "Write a python function to find the last position of an element in a sorted array.", "code": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "test_list": ["assert last([1,2,3],1,3) == 0", "assert last([1,1,1,2,3,4],1,6) == 2", "assert last([2,3,2,3,6,8,9],3,8) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef last(arr, target, n):\n    for i in range(n-1, -1, -1):\n        if arr[i] == target:\n            return i\n```", "\ndef last(arr, target, n):\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```", "\ndef last(arr, target, n):\n    i = n - 1\n    while i >= 0 and arr[i] >= target:\n        i -= 1\n    return i + 1\n```", "\ndef last(arr, target, n):\n    left, right = 0, n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == n-1 or arr[mid+1]!= target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```", "\ndef last(arr, target, n):\n    for i in range(n-1, -1, -1):\n        if arr[i] == target:\n            return i\n```", "\ndef last(arr, target, n):\n    left, right = 0, n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "\ndef last(arr, target, n):\n    for i in range(n-1, -1, -1):\n        if arr[i] == target:\n            return i\n```", "\ndef last(arr, target, max_value):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] < target:\n            return i\n    return len(arr)-1 if arr[-1] <= target else len(arr)\n```", "\ndef last(arr, target, n):\n    for i in range(n-1, -1, -1):\n        if arr[i] == target:\n            return i\n```", "\ndef last(arr, target, max_value):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] < target:\n            return i\n    return len(arr) - 1\n```"], "num_tokens": [38, 109, 45, 108, 38, 72, 38, 57, 38, 51]}
{"item": {"task_id": 794, "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "code": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test_list": ["assert text_starta_endb(\"aabbbb\")==('Found a match!')", "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')", "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef text_starta_endb(s):\n    if s.startswith('a') and s.endswith('b'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\ndef text_starta_endb(s):\n    if s.startswith('a') and s.endswith('b'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_starta_endb(s):\n    if re.match('a.*b$', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_starta_endb(text):\n    if re.match(r'ab$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_starta_endb(s):\n    if re.match(r'^a.*b$', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_starta_endb(text):\n    if re.match('a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_starta_endb(text):\n    if text.startswith('a') and text.endswith('b'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_starta_endb(s):\n    if re.match(r'ab$', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\ndef text_starta_endb(text):\n    if text.startswith('a') and text.endswith('b'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_starta_endb(text):\n    if re.match('a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"], "num_tokens": [39, 40, 40, 40, 42, 41, 40, 40, 40, 40]}
{"item": {"task_id": 795, "text": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "code": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items", "test_list": ["assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]", "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]", "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport heapq\n\ndef cheap_items(data, n):\n    heap = []\n    for item in data:\n        heapq.heappush(heap, (item['price'], item))\n    return [heapq.heappop(heap)[1] for _ in range(min(n, len(heap)))]\n```", "\nimport heapq\n\ndef cheap_items(dataset, n):\n    return heapq.nsmallest(n, dataset, key=lambda x: x['price'])\n```", "\nimport heapq\n\ndef cheap_items(data, n):\n    return [heapq.nsmallest(n, data, key=lambda x: x['price'])]\n```", "\nimport heapq\n\ndef cheap_items(data, n):\n    return [heapq.nsmallest(n, data, key=lambda x: x['price'])]\n```", "\nimport heapq\n\ndef cheap_items(data, n):\n    return [heapq.nsmallest(n, data, key=lambda x: x['price'])[-1]]\n```", "\nimport heapq\n\ndef cheap_items(data, n):\n    return [heapq.nsmallest(n, data, key=lambda x: x['price'])[-1]]\n```", "\nimport heapq\n\ndef cheap_items(dataset, n):\n    return [heapq.nsmallest(n, dataset, key=lambda x: x['price'])]\n```", "\nimport heapq\n\ndef cheap_items(data, n):\n    return [heapq.nsmallest(n, data, key=lambda x: x['price'])[-1]]\n```", "\nimport heapq\n\ndef cheap_items(data, n):\n    return [heapq.nsmallest(n, data, key=lambda x: x['price'])]\n```", "\nimport heapq\n\ndef cheap_items(data, n):\n    return heapq.nsmallest(n, data, key=lambda x: x['price'])\n```"], "num_tokens": [60, 31, 34, 34, 36, 36, 34, 36, 34, 31]}
{"item": {"task_id": 796, "text": "Write function to find the sum of all items in the given dictionary.", "code": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef return_sum(dictionary):\n    return sum(dictionary.values())", "\ndef return_sum(d):\n    return sum(d.values())", "\ndef return_sum(dictionary):\n    return sum(dictionary.values())", "\ndef return_sum(dictionary):\n    return sum(dictionary.values())", "\ndef return_sum(d):\n    return sum(d.values())\n```", "\ndef return_sum(d):\n    return sum(d.values())", "\ndef return_sum(d):\n    return sum(d.values())", "\ndef return_sum(d):\n    return sum(d.values())", "\ndef return_sum(d):\n    return sum(d.values())\n```", "\ndef return_sum(dictionary):\n    return sum(dictionary.values())"], "num_tokens": [13, 13, 13, 13, 14, 13, 13, 13, 14, 13]}
{"item": {"task_id": 797, "text": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "code": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "test_list": ["assert sum_in_Range(2,5) == 8", "assert sum_in_Range(5,7) == 12", "assert sum_in_Range(7,13) == 40"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)", "\ndef sum_in_Range(l, r):\n    return sum(range(l, r + 1, 2))", "\ndef sum_in_Range(l, r):\n    return sum(range(l, r+1, 2))"], "num_tokens": [34, 34, 34, 34, 34, 34, 34, 34, 25, 24]}
{"item": {"task_id": 798, "text": "Write a python function to find the sum of an array.", "code": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "test_list": ["assert _sum([1, 2, 3]) == 6", "assert _sum([15, 12, 13, 10]) == 50", "assert _sum([0, 1, 2]) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(lst):\n    return sum(lst)", "\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(arr):\n    return sum(arr)", "\ndef _sum(arr):\n    return sum(arr)"], "num_tokens": [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]}
{"item": {"task_id": 799, "text": "Write a python function to left rotate the bits of a given number.", "code": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "test_list": ["assert left_Rotate(16,2) == 64", "assert left_Rotate(10,2) == 40", "assert left_Rotate(99,3) == 792"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef left_Rotate(n, k):\n    return (n << k) % (1 << 32)\n```", "\ndef left_Rotate(n, k):\n    k = k % 32\n    return ((n << k) | (n >> (32 - k)))", "\ndef left_Rotate(n, k):\n    k = k % 32\n    return (n << k) | (n >> (32 - k))", "\ndef left_Rotate(n, k):\n    return (n << k) % (1 << 32)\n```", "\ndef left_Rotate(n, k):\n    k = k % 32\n    return ((n << k) | (n >> (32 - k))) & ((1 << 32) - 1)\n```", "\ndef left_Rotate(n, k):\n    k = k % 32\n    return ((n << k) | (n >> (32 - k))) if k!= 0 else n\n```", "\ndef left_Rotate(n, k):\n    k = k % 32\n    return (n << k) | (n >> (32 - k))\n```", "\ndef left_Rotate(n, k):\n    return (n << k) % (1 << 32) if n.bit_length() <= 32 else (n >> (32 - k % 32)) | (n << k % 32)", "\ndef left_Rotate(n, k):\n    k = k % 32\n    return (n << k) | (n >> (32 - k))\n```", "\ndef left_Rotate(n, k):\n    return (n << k) % (1 << 32)\n```"], "num_tokens": [25, 34, 34, 25, 46, 43, 35, 53, 35, 25]}
{"item": {"task_id": 800, "text": "Write a function to remove all whitespaces from a string.", "code": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))", "test_list": ["assert remove_all_spaces('python  program')==('pythonprogram')", "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')", "assert remove_all_spaces('python                     program')==('pythonprogram')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_all_spaces(s):\n    return s.replace(\" \",\"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \",\"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \",\"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \", \"\")", "\ndef remove_all_spaces(s):\n    return s.replace(\" \",\"\")", "\ndef remove_all_spaces(s):\n    return s.replace(' ', '')"], "num_tokens": [15, 15, 15, 15, 15, 15, 15, 15, 15, 15]}
{"item": {"task_id": 801, "text": "Write a python function to count the number of equal numbers from three given integers.", "code": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef test_three_equal(a, b, c):\n    return sum(1 for x in [a, b, c] if x in [a, b, c] and [a, b, c].count(x) > 1)", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in [a, b, c] if [a, b, c].count(x) > 1)", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in [a, b, c] if [a, b, c].count(x) == 3)\n```", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in (a, b, c) if list((a, b, c)).count(x) > 1)\n```", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in (a, b, c) if list((a, b, c)).count(x) > 1)", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in [a, b, c] if x == a)\n```", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in [a, b, c] if [a, b, c].count(x) > 1)\n```", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in [a, b, c] if [a, b, c].count(x) > 1)", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in (a, b, c) if x in (a, b, c) and (a, b, c).count(x) > 1)", "\ndef test_three_equal(a, b, c):\n    return sum(1 for x in [a, b, c] if [a, b, c].count(x) > 1)"], "num_tokens": [52, 42, 43, 44, 43, 33, 43, 42, 52, 42]}
{"item": {"task_id": 802, "text": "Write a python function to count the number of rotations required to generate a sorted array.", "code": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "test_list": ["assert count_Rotation([3,2,1],3) == 1", "assert count_Rotation([4,5,1,2,3],5) == 2", "assert count_Rotation([7,8,9,1,2,3],6) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_Rotation(arr, n):\n    for i in range(n):\n        if arr == sorted(arr):\n            return i + 1\n    return -1\n```", "\ndef count_Rotation(arr, n):\n    for i in range(n):\n        if arr == sorted(arr):\n            return i + 1\n        arr = arr[1:] + [arr[0]]\n    return -1\n```", "\ndef count_Rotation(arr, target):\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return i + 1\n    return -1\n```", "\ndef count_Rotation(arr, n):\n    return (arr.index(min(arr)) + 1) % n\n```", "\ndef count_Rotation(arr, target):\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return i\n    return -1\n```", "\ndef count_Rotation(arr, n):\n    return len(arr) - arr.index(min(arr))", "\ndef count_Rotation(arr, target):\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return i\n```", "\ndef count_Rotation(arr, n):\n    if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n        return 0\n    for i in range(len(arr)):\n        if all(arr[(i+j)%len(arr)] <= arr[(i+j+1)%len(arr)] for j in range(len(arr)-1)):\n            return i+1\n```", "\ndef count_Rotation(arr, target):\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return i\n        arr = arr[1:] + [arr[0]]\n    return -1\n```", "\ndef count_Rotation(arr, target):\n    rotations = 0\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return rotations + 1\n        arr = arr[1:] + [arr[0]]\n        rotations += 1\n    return -1\n```"], "num_tokens": [37, 50, 43, 26, 35, 21, 30, 82, 53, 63]}
{"item": {"task_id": 803, "text": "Write a python function to check whether the given number is a perfect square or not.", "code": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "test_list": ["assert is_Perfect_Square(10) == False", "assert is_Perfect_Square(36) == True", "assert is_Perfect_Square(14) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef is_Perfect_Square(n):\n    return math.sqrt(n) % 1 == 0\n```", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.sqrt(n) % 1 == 0", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.isqrt(n) ** 2 == n", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.sqrt(n) % 1 == 0\n```", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.isqrt(n)**2 == n", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.sqrt(n) % 1 == 0\n```", "\nimport math\n\ndef is_Perfect_Square(n):\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n\n```", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.isqrt(n)**2 == n\n```", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.isqrt(n) ** 2 == n\n```", "\nimport math\n\ndef is_Perfect_Square(n):\n    return math.sqrt(n) % 1 == 0\n```"], "num_tokens": [27, 25, 25, 27, 23, 27, 37, 25, 27, 27]}
{"item": {"task_id": 804, "text": "Write a python function to check whether the product of numbers is even or not.", "code": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "test_list": ["assert is_Product_Even([1,2,3],3) == True", "assert is_Product_Even([1,2,1,4],4) == True", "assert is_Product_Even([1,1],2) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_Product_Even(numbers, num):\n    product = 1\n    for i in range(num):\n        product *= numbers[i]\n    return product % 2 == 0\n```", "\ndef is_Product_Even(numbers, n):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % n == 0\n```", "\ndef is_Product_Even(lst,n):\n    return (n == 0 and sum([x for x in lst if x!= 0]) % 2 == 0) or (n!= 0 and sum(lst) % 2 == 0)", "\ndef is_Product_Even(numbers, n):\n    return (n * reduce(lambda x, y: x * y, numbers)) % 2 == 0\n```", "\ndef is_Product_Even(lst, n):\n    return (n!= 0) and (sum(x for x in lst) % n == 0)\n```", "\ndef is_Product_Even(lst,n):\n    return (lambda x: x%2==0)(1 if sum([i**n for i in lst])%2 else 0)\n```", "\ndef is_Product_Even(lst, num):\n    return (num!= 0) and (num % 2 == 0) if sum([x for x in lst]) % num == 0 else False", "\ndef is_Product_Even(lst,n):\n    return (n * reduce(lambda x, y: x * y, lst)) % 2 == 0", "\ndef is_Product_Even(nums, n):\n    return (n * reduce(lambda x, y: x*y, nums, 1)) % 2 == 0\n```", "\ndef is_Product_Even(lst, n):\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % 2 == 0"], "num_tokens": [41, 38, 55, 36, 35, 41, 45, 33, 38, 39]}
{"item": {"task_id": 805, "text": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "code": "def max_sum_list(lists):\r\n return max(lists, key=sum)", "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n```", "\ndef max_sum_list(lists):\n    return max(lists, key=sum)\n```", "\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)", "\ndef max_sum_list(lists):\n    return max(lists, key=sum)\n```", "\ndef max_sum_list(lists):\n    return max(lists, key=sum)\n```", "\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)", "\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n```", "\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n```", "\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n```", "\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n```"], "num_tokens": [21, 19, 20, 19, 19, 20, 21, 21, 21, 21]}
{"item": {"task_id": 806, "text": "Write a function to find maximum run of uppercase characters in the given string.", "code": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "test_list": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6", "assert max_run_uppercase('GooGLEFluTTER') == 4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max(max_run, current_run)\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```", "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```"], "num_tokens": [69, 69, 69, 69, 67, 69, 69, 73, 69, 69]}
{"item": {"task_id": 807, "text": "Write a python function to find the first odd number in a given list of numbers.", "code": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "test_list": ["assert first_odd([1,3,5]) == 1", "assert first_odd([2,4,1,3]) == 1", "assert first_odd ([8,9,1]) == 9"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```", "\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n```"], "num_tokens": [28, 28, 28, 28, 28, 28, 28, 28, 28, 28]}
{"item": {"task_id": 808, "text": "Write a function to check if the given tuples contain the k or not.", "code": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_K(tup, k):\n    return k in tup\n```", "\ndef check_K(tup, k):\n    return k in tup\n```", "\ndef check_K(tup, k):\n    return k in tup\n```", "\ndef check_K(t, k):\n    return k in t\n```", "\ndef check_K(t, k):\n    return k in t\n```", "\ndef check_K(tup, k):\n    return k in tup\n```", "\ndef check_K(t, k):\n    return k in t\n```", "\ndef check_K(t, k):\n    return k in t\n```", "\ndef check_K(tup, k):\n    return k in tup\n```", "\ndef check_K(tup, k):\n    return k in tup\n```"], "num_tokens": [17, 17, 17, 16, 16, 17, 16, 16, 17, 17]}
{"item": {"task_id": 809, "text": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "code": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_smaller(t1, t2):\n    return all(i > j for i, j in zip(t1, t2))\n```", "\ndef check_smaller(t1, t2):\n    return all(i > j for i, j in zip(t1, t2))\n```", "\ndef check_smaller(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_smaller(t1, t2):\n    return all(i >= j for i, j in zip(t1, t2))\n```", "\ndef check_smaller(t1, t2):\n    return all(t2[i] > t1[i] for i in range(len(t1)))\n```", "\ndef check_smaller(t1, t2):\n    return all(i > j for i, j in zip(t1, t2))\n```", "\ndef check_smaller(t1, t2):\n    return all(i > j for i, j in zip(t1, t2))\n```", "\ndef check_smaller(t1, t2):\n    return all(t2[i] >= t1[i] for i in range(len(t1)))\n```", "\ndef check_smaller(t1, t2):\n    return all(i >= j for i, j in zip(t1, t2))\n```", "\ndef check_smaller(t1, t2):\n    return all(t2[i] >= t1[i] for i in range(len(t1)))\n```"], "num_tokens": [31, 31, 33, 31, 33, 31, 31, 33, 31, 33]}
{"item": {"task_id": 810, "text": "Write a function to iterate over elements repeating each as many times as its count.", "code": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())", "test_list": ["assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ", "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ", "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_variable(*args):\n    result = []\n    for i, value in enumerate(args):\n        result.extend([str(i+1) for _ in range(value)])\n    return result\n```", "\ndef count_variable(*args):\n    result = []\n    for arg in args:\n        result.extend([i for _ in range(abs(arg))][0] for i in 'pqrst')\n    return result\n```", "\ndef count_variable(*args):\n    result = []\n    for item, count in zip([x for x in args if x!= 0], [x for x in args if x!= 0]):\n        result.extend([chr(ord('p')+i) for i in range(item)])\n    return result\n```", "\ndef count_variable(a, b, c, d):\n    elements = ['p', 'q', 'r','s']\n    return [element for element in elements[:a%4] for _ in range(a)] + [element for element in elements[a%4:a%4+1] for _ in range(b)] + [element for element in elements[a%4+1:a%4+2] for _ in range(c)] + [element for element in elements[a%4+2:] for _ in range(d)]\n```", "\ndef count_variable(*args):\n    result = []\n    for arg in args:\n        result.extend([chr(i) for i in range(ord('a'), ord('a') + arg)])\n    return result\n```", "\ndef count_variable(a, b, c, d):\n    return [i for i in (chr(a) for _ in range(b)) + (chr(c) for _ in range(d))]\n```", "\ndef count_variable(*args):\n    result = []\n    for i, arg in enumerate(args):\n        result.extend([i for _ in range(arg)])\n    return [chr(ord('p')+i) if i < 3 else chr(ord('q')+i-3) if i < 6 else chr(ord('r')+i-6) for i in result]\n```", "\ndef count_variable(*args):\n    result = []\n    for item, count in zip([*args][::-1], [x for x in range(count, 0, -1) for _ in range(x)]):\n        result.extend([item]*count)\n    return result\n```", "\ndef count_variable(*args):\n    result = []\n    for arg in args:\n        result.extend([chr(ord('p') + i) for i in range(arg)])\n    return result\n```", "\ndef count_variable(*args):\n    result = []\n    for count, var in zip([*map(lambda x: [x]*x, args)]*min(args), 'pqr'):\n        result.extend(count)\n    return result\n```"], "num_tokens": [41, 45, 65, 112, 45, 42, 78, 60, 41, 50]}
{"item": {"task_id": 811, "text": "Write a function to check if two lists of tuples are identical or not.", "code": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ", "test_list": ["assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True", "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False", "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_identical(list1, list2):\n    return sorted(list1) == sorted(list2)\n```", "\ndef check_identical(list1, list2):\n    return list1 == list2\n```", "\ndef check_identical(list1, list2):\n    return list1 == list2\n```", "\ndef check_identical(list1, list2):\n    return list1 == list2\n```", "\ndef check_identical(list1, list2):\n    return sorted(list1) == sorted(list2)\n```", "\ndef check_identical(list1, list2):\n    return sorted(list1) == sorted(list2)\n```", "\ndef check_identical(list1, list2):\n    return list1 == list2\n```", "\ndef check_identical(list1, list2):\n    return set(tuple(sorted(t)) for t in list1) == set(tuple(sorted(t)) for t in list2)\n```", "\ndef check_identical(list1, list2):\n    return sorted(list1) == sorted(list2)\n```", "\ndef check_identical(list1, list2):\n    return list1 == list2\n```"], "num_tokens": [24, 21, 21, 21, 24, 24, 21, 38, 24, 21]}
{"item": {"task_id": 812, "text": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "code": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))", "test_list": ["assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')", "assert road_rd(\"palnadu Road\")==('palnadu Rd.')", "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef road_rd(s):\n    return s.replace('Road', 'Rd.')\n```", "\ndef road_rd(s):\n    return s.replace(\"Road\", \"Rd.\")\n```", "\ndef road_rd(s):\n    return s.replace(' Road','Rd.')", "\ndef road_rd(s):\n    return s.replace('Road', 'Rd.')\n```", "\ndef road_rd(s):\n    return s.replace('Road', 'Rd.')\n```", "\ndef road_rd(s):\n    return s.replace(\"Road\", \"Rd.\")\n```", "\ndef road_rd(s):\n    return s.replace(' Road','Rd.')\n```", "\ndef road_rd(s):\n    return s.replace('Road', 'Rd.')\n```", "\ndef road_rd(s):\n    if'Road' in s:\n        return s.replace(' Road','Rd.')\n    else:\n        return s\n```", "\ndef road_rd(s):\n    return s.replace('Road', 'Rd.')\n```"], "num_tokens": [19, 19, 17, 19, 19, 19, 18, 19, 33, 19]}
{"item": {"task_id": 813, "text": "Write a function to find length of the string.", "code": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "test_list": ["assert string_length('python')==6", "assert string_length('program')==7", "assert string_length('language')==8"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef string_length(s):\n    return len(s)", "\ndef string_length(s):\n    return len(s)", "\ndef string_length(s):\n    return len(s)\n```", "\ndef string_length(s):\n    return len(s)", "\ndef string_length(s):\n    return len(s)\n```", "\ndef string_length(s):\n    return len(s)\n```", "\ndef string_length(s):\n    return len(s)", "\ndef string_length(s):\n    return len(s)\n```", "\ndef string_length(s):\n    return len(s)", "\ndef string_length(s):\n    return len(s)\n```"], "num_tokens": [12, 12, 13, 12, 13, 13, 12, 13, 12, 13]}
{"item": {"task_id": 814, "text": "Write a function to find the area of a rombus.", "code": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area", "test_list": ["assert rombus_area(10,20)==100", "assert rombus_area(10,5)==25", "assert rombus_area(4,2)==4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef rombus_area(a, b):\n    return (a*b)**0.5\n```", "\ndef rombus_area(a, b):\n    return 0.5 * a * b\n```", "\ndef rombus_area(diagonal1, diagonal2):\n    return (diagonal1*diagonal2)/2\n```", "\nimport math\n\ndef rombus_area(diagonal1, diagonal2):\n    return 0.5 * (diagonal1 * diagonal2)\n```", "\ndef rombus_area(diagonal1, diagonal2):\n    return 0.5 * diagonal1 * diagonal2\n```", "\ndef rombus_area(a, b):\n    return 0.5 * a * b\n```", "\ndef rombus_area(diagonal1, diagonal2):\n    return (diagonal1 * diagonal2) / 2\n```", "\ndef rombus_area(a, b):\n    return (a*b)/2\n```", "\ndef rombus_area(a, b):\n    return (a * b) / 2\n```", "\nimport math\n\ndef rombus_area(diagonal1, diagonal2):\n    return (diagonal1 * diagonal2) / 2\n```"], "num_tokens": [21, 22, 27, 32, 27, 22, 28, 19, 22, 31]}
{"item": {"task_id": 815, "text": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "code": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "test_list": ["assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]", "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]", "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_by_dnf(arr, n):\n    res = [0] * n\n    count0, count1, count2 = 0, 0, 0\n    for i in range(n):\n        if arr[i] == 0:\n            count0 += 1\n        elif arr[i] == 1:\n            count1 += 1\n        else:\n            count2 += 1\n    res[0:count0] = [0] * count0\n    res[count0:count0+count1] = [1] * count1\n    res[count0+count1:count0+count1+count2] = [2] * count2\n    return res\n```", "\ndef sort_by_dnf(arr, n):\n    count = [0, 0, 0]\n    for num in arr:\n        count[num] += 1\n    return [0] * count[0] + [1] * count[1] + [2] * count[2]\n```", "\ndef sort_by_dnf(arr, n):\n    count = [0, 0, 0]\n    for num in arr:\n        count[num] += 1\n    return [0] * count[0] + [1] * count[1] + [2] * count[2]\n```", "\ndef sort_by_dnf(arr, n):\n    return [0]*arr.count(0) + [1]*arr.count(1) + [2]*arr.count(2)\n```", "\ndef sort_by_dnf(arr, n):\n    count = [0] * 3\n    for i in arr:\n        count[i] += 1\n    return [0] * count[0] + [1] * count[1] + [2] * count[2]\n```", "\ndef sort_by_dnf(arr, n):\n    return [x for _,x in sorted((i, x) for i, x in enumerate(arr) if x!= 2)]\n```", "\ndef sort_by_dnf(nums, n):\n    return [num for pair in zip(*[nums[i::3] for i in range(3)]) for num in sorted(pair)]\n```", "\ndef sort_by_dnf(arr, n):\n    count = [0, 0, 0]\n    for num in arr:\n        count[num] += 1\n    return [0] * count[0] + [1] * count[1] + [2] * count[2]\n```", "\ndef sort_by_dnf(arr, n):\n    return [i for t in zip(*[arr for _ in range(n)]) for i in t]\n```", "\ndef sort_by_dnf(arr, n):\n    return [x for _,x in sorted((n-i,x) for i,x in enumerate(arr))]\n```"], "num_tokens": [153, 66, 66, 40, 64, 40, 40, 66, 34, 33]}
{"item": {"task_id": 816, "text": "Write a function to clear the values of the given tuples.", "code": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) ", "test_list": ["assert clear_tuple((1, 5, 3, 6, 8)) == ()", "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()", "assert clear_tuple((3, 2, 5, 6, 8)) == ()"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```", "\ndef clear_tuple(t):\n    return ()\n```"], "num_tokens": [11, 11, 11, 11, 11, 11, 11, 11, 11, 11]}
{"item": {"task_id": 817, "text": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result", "test_list": ["assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]", "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]", "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: [num for num in lst if num % m == 0 or num % n == 0]\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: [num for num in lst if num % m == 0 or num % n == 0]\n```", "\ndiv_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]\n```", "\ndiv_of_nums = lambda lst, m, n: [num for num in lst if num % m == 0 or num % n == 0]\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x%m==0 or x%n==0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: [num for num in lst if num % m == 0 or num % n == 0]\n```"], "num_tokens": [35, 35, 35, 35, 35, 35, 35, 31, 35, 35]}
{"item": {"task_id": 818, "text": "Write a python function to count lower case letters in a given string.", "code": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "test_list": ["assert lower_ctr('abc') == 3", "assert lower_ctr('string') == 6", "assert lower_ctr('Python') == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef lower_ctr(s):\n    return sum(c.islower() for c in s)", "\ndef lower_ctr(s):\n    return sum(1 for c in s if 'a' <= c <= 'z')", "\ndef lower_ctr(s):\n    return sum(1 for c in s if c.islower())", "\ndef lower_ctr(s):\n    return sum(c.islower() for c in s)", "\ndef lower_ctr(s):\n    return sum(1 for c in s if c.islower())", "\ndef lower_ctr(s):\n    return sum(c.islower() for c in s)", "\ndef lower_ctr(s):\n    return sum(c.islower() for c in s)", "\ndef lower_ctr(s):\n    return sum(c.islower() for c in s)", "\ndef lower_ctr(s):\n    return sum(1 for c in s if 'a' <= c <= 'z')", "\ndef lower_ctr(s):\n    return sum(1 for c in s if c.islower())"], "num_tokens": [19, 26, 21, 19, 21, 19, 19, 19, 26, 21]}
{"item": {"task_id": 819, "text": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "code": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "test_list": ["assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])", "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])", "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_duplic(lst):\n    count = 1\n    result1 = [lst[0]]\n    result2 = [1]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            result1.append(lst[i])\n            result2.append(count)\n            count = 1\n    result1.append(lst[-1])\n    result2.append(count)\n    return result1, result2\n```", "\ndef count_duplic(lst):\n    result1, result2 = [], []\n    for i in lst:\n        if not result1 or i!= result1[-1]:\n            result1.append(i)\n            result2.append(1)\n        else:\n            result2[-1] += 1\n    return result1, result2\n```", "\ndef count_duplic(lst):\n    result = []\n    freq = []\n    for i in lst:\n        if i not in result:\n            result.append(i)\n            freq.append(1)\n        else:\n            idx = result.index(i)\n            freq[idx] += 1\n    return result, freq\n```", "\ndef count_duplic(lst):\n    freq = []\n    for i in set(lst):\n        freq.append((i, lst.count(i)))\n    return ([x[0] for x in freq], [x[1] for x in freq])\n```", "\ndef count_duplic(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return (list(freq.keys()), list(freq.values()))\n```", "\ndef count_duplic(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = [[], []]\n    for key, value in freq.items():\n        result[0].extend([key] * value)\n        result[1].extend([value] * value)\n    return tuple(result)\n```", "\ndef count_duplic(lst):\n    freq = []\n    count = []\n    for i in set(lst):\n        freq.append(i)\n        count.append(lst.count(i))\n    return (freq, count)\n```", "\ndef count_duplic(lst):\n    freq = []\n    for i in set(lst):\n        freq.append((i, lst.count(i)))\n    return (list(set(lst)), [f[1] for f in freq])\n```", "\ndef count_duplic(lst):\n    freq = {}\n    result = []\n    freq_list = []\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n            result.append(num)\n            freq_list.append(1)\n        else:\n            freq[num] += 1\n            freq_list.append(freq[num])\n    return result, freq_list\n```", "\ndef count_duplic(lst):\n    res = [[], []]\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        res[0].append(lst[i])\n        res[1].append(count)\n        i += 1\n    return tuple(res)\n```"], "num_tokens": [103, 71, 65, 52, 55, 89, 43, 47, 80, 95]}
{"item": {"task_id": 820, "text": "Write a function to check whether the given month number contains 28 days or not.", "code": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "test_list": ["assert check_monthnum_number(2)==True", "assert check_monthnum_number(1)==False", "assert check_monthnum_number(3)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_monthnum_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif month == 2:\n        return True\n    else:\n        return False\n```", "\ndef check_monthnum_number(month_num):\n    return month_num in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnum_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnum_number(month):\n    return month in [1,3,5,7,8,10,12]\n```", "\ndef check_monthnum_number(month_num):\n    if month_num in [1,3,5,7,8,10,12]:\n        return False\n    elif month_num == 2:\n        return True\n    else:\n        return False\n```", "\ndef check_monthnum_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnum_number(month_num):\n    return month_num in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnum_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnum_number(month_num):\n    return month_num in [1, 3, 5, 7, 8, 10, 12]\n```", "\ndef check_monthnum_number(month_num):\n    return month_num in [1, 3, 5, 7, 8, 10, 12]\n```"], "num_tokens": [57, 37, 35, 29, 54, 35, 37, 35, 37, 37]}
{"item": {"task_id": 821, "text": "Write a function to merge two dictionaries into a single expression.", "code": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict", "test_list": ["assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}", "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}", "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}", "\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}\n```", "\ndef merge_dictionaries(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict\n```", "\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}\n```", "\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}\n```", "\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}\n```", "\ndef merge_dictionaries(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict\n```", "\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}", "\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}\n```", "\ndef merge_dictionaries(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged\n```"], "num_tokens": [23, 24, 31, 24, 24, 24, 31, 23, 24, 30]}
{"item": {"task_id": 822, "text": "Write a function to return true if the password is valid.", "code": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False", "test_list": ["assert pass_validity(\"password\")==False", "assert pass_validity(\"Password@10\")==True", "assert pass_validity(\"password@10\")==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef pass_validity(password):\n    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isupper() for char in password)\n```", "\ndef pass_validity(password):\n    return password.isalnum() and password.lower().startswith(\"password@\")\n```", "\ndef pass_validity(password):\n    if len(password)<8:\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    return True\n```", "\ndef pass_validity(password):\n    if len(password)<8:\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    return True\n```", "\ndef pass_validity(password):\n    return password.isalnum() and password[0].isupper() and password[1:].isdigit()\n```", "\ndef pass_validity(password):\n    return len(password) >= 8 and any(c.isupper() for c in password) and any(c.isdigit() for c in password)\n```", "\ndef pass_validity(password):\n    return password.isalnum() and \"@\" in password and len(password) >= 8\n```", "\ndef pass_validity(password):\n    if len(password)<8:\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    if not any(char.isalpha() for char in password):\n        return False\n    if not any(char in \"!@#$%^&*()_+-={}:;<>?,./`~[]|\\\"'\\\\|;\" for char in password):\n        return False\n    return True\n```", "\ndef pass_validity(password):\n    return password.islower() or password.isupper() or password.isdigit() and \"@\" in password\n```", "\ndef pass_validity(password):\n    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isupper() for char in password) and password!= password.lower()\n```"], "num_tokens": [38, 24, 74, 57, 30, 38, 27, 96, 29, 44]}
{"item": {"task_id": 823, "text": "Write a function to check if the given string starts with a substring using regex.", "code": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "test_list": ["assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'", "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'", "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef check_substring(s, sub):\n    if re.match(r'^' + re.escape(sub) + r'$', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, sub):\n    if re.match(r'^' + re.escape(sub) + r'.*', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, substring):\n    if re.match('^' + re.escape(substring) + '.*', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, sub):\n    if re.match(r'^' + re.escape(sub) + r'$|.*?' + re.escape(sub), s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, substring):\n    if re.match('^' + re.escape(substring) + '.+', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, substring):\n    if re.match('^' + re.escape(substring) + '.*', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, substring):\n    if re.match('(?i)' + re.escape(substring) + '.*', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'", "\nimport re\n\ndef check_substring(s, substring):\n    if re.match(r'^' + re.escape(substring) + r'.*', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, sub):\n    if re.match(r'^' + re.escape(sub) + r'.*', s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```", "\nimport re\n\ndef check_substring(s, substring):\n    if re.match('^{0}'.format(re.escape(substring)), s):\n        return'string starts with the given substring'\n    else:\n        return'string doesnt start with the given substring'\n```"], "num_tokens": [56, 56, 56, 63, 55, 56, 57, 57, 56, 54]}
{"item": {"task_id": 824, "text": "Write a python function to remove even numbers from a given list.", "code": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "test_list": ["assert remove_even([1,3,5,2]) == [1,3,5]", "assert remove_even([5,6,7]) == [5,7]", "assert remove_even([1,2,3,4]) == [1,3]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_even(lst):\n    return [x for x in lst if x % 2!= 0]", "\ndef remove_even(numbers):\n    return [num for num in numbers if num % 2!= 0]", "\ndef remove_even(numbers):\n    return [num for num in numbers if num % 2!= 0]", "\ndef remove_even(lst):\n    return [x for x in lst if x % 2!= 0]", "\ndef remove_even(lst):\n    return [x for x in lst if x % 2!= 0]", "\ndef remove_even(lst):\n    return [x for x in lst if x % 2!= 0]", "\ndef remove_even(lst):\n    return [num for num in lst if num % 2!= 0]", "\ndef remove_even(numbers):\n    return [num for num in numbers if num % 2!= 0]", "\ndef remove_even(lst):\n    return [x for x in lst if x % 2!= 0]", "\ndef remove_even(lst):\n    return [x for x in lst if x % 2!= 0]"], "num_tokens": [24, 24, 24, 24, 24, 24, 24, 24, 24, 24]}
{"item": {"task_id": 825, "text": "Write a python function to access multiple elements of specified index from a given list.", "code": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "test_list": ["assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]", "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]", "assert access_elements([1,0,2,3],[0,1]) == [1,0]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```", "\ndef access_elements(lst, indices):\n    return [lst[i] for i in indices]\n```"], "num_tokens": [21, 21, 21, 21, 21, 21, 21, 21, 21, 21]}
{"item": {"task_id": 826, "text": "Write a python function to find the type of triangle from the given sides.", "code": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "test_list": ["assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"", "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"", "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_Type_Of_Triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        if a == b == c:\n            return \"Equilateral Triangle\"\n        elif a == b or a == c or b == c:\n            return \"Isosceles Triangle\"\n        elif (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n            return \"Right-angled Triangle\"\n        elif a**2 + b**2 > c**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n    else:\n        return \"Not a Triangle\"", "\ndef check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return \"Right-angled Triangle\"\n    elif sides[0]**2 + sides[1]**2 > sides[2]**2:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"", "\ndef check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2:\n        return \"Right-angled Triangle\"\n    elif sides[0] ** 2 + sides[1] ** 2 > sides[2] ** 2:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"", "\ndef check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return \"Right-angled Triangle\"\n    elif sides[0] < sides[1] + sides[2]:\n        if sides[0]**2 + sides[1]**2 > sides[2]**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n    else:\n        return \"Not a Triangle\"\n```", "\ndef check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return \"Right-angled Triangle\"\n    elif sides[0] + sides[1] > sides[2]:\n        if sides[0]**2 + sides[1]**2 > sides[2]**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n    else:\n        return \"Not a Triangle\"\n```", "\ndef check_Type_Of_Triangle(a, b, c):\n    if a == b == c:\n        return \"Equilateral Triangle\"\n    elif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return \"Right-angled Triangle\"\n    elif a > b and a > c:\n        if a**2 == b**2 + c**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n    elif b > a and b > c:\n        if b**2 == a**2 + c**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n    else:\n        if c**2 == a**2 + b**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n```", "\ndef check_Type_Of_Triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return \"Right-angled Triangle\"\n    elif a + b > c and a + c > b and b + c > a:\n        if a**2 + b**2 > c**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n    else:\n        return \"Not a Triangle\"", "\ndef check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return \"Right-angled Triangle\"\n    elif sides[0] < sides[1] + sides[2]:\n        if sides[0]**2 + sides[1]**2 > sides[2]**2:\n            return \"Obtuse-angled Triangle\"\n        else:\n            return \"Acute-angled Triangle\"\n    else:\n        return \"Not a Triangle\"", "\ndef check_Type_Of_Triangle(a, b, c):\n    if a == b == c:\n        return \"Equilateral Triangle\"\n    elif a == b or a == c or b == c:\n        return \"Isosceles Triangle\"\n    elif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        if a == b or a == c or b == c:\n            return \"Right-angled Triangle\"\n        else:\n            return \"Obtuse-angled Triangle\"\n    else:\n        return \"Acute-angled Triangle\"\n```", "\ndef check_Type_Of_Triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        if a == b == c:\n            return \"Equilateral Triangle\"\n        elif a == b or a == c or b == c:\n            return \"Isosceles Triangle\"\n        elif (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n            return \"Right-angled Triangle\"\n        else:\n            return \"Obtuse-angled Triangle\"\n    else:\n        return \"Not a Triangle\"\n```"], "num_tokens": [169, 95, 107, 122, 122, 207, 102, 121, 138, 147]}
{"item": {"task_id": 827, "text": "Write a function to sum a specific column of a list in a given list of lists.", "code": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result", "test_list": ["assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12", "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15", "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_column(lst, column):\n    return sum(row[column] for row in lst)\n```", "\ndef sum_column(lst, col):\n    return sum(row[col] for row in lst)\n```", "\ndef sum_column(lst, col):\n    return sum(row[col] for row in lst)\n```", "\ndef sum_column(lst, col):\n    return sum(row[col] for row in lst)\n```", "\ndef sum_column(lst, col):\n    return sum(row[col] for row in lst)\n```", "\ndef sum_column(lst, col):\n    return sum(row[col] for row in lst)\n```", "\ndef sum_column(lst, col):\n    return sum(row[col] for row in lst)\n```", "\ndef sum_column(lst, column_index):\n    return sum(row[column_index] for row in lst)\n```", "\ndef sum_column(lst, col):\n    return sum(row[col] for row in lst)\n```", "\ndef sum_column(lst, column_index):\n    return sum(row[column_index] for row in lst)\n```"], "num_tokens": [21, 21, 21, 21, 21, 21, 21, 23, 21, 23]}
{"item": {"task_id": 828, "text": "Write a function to count alphabets,digits and special charactes in a given string.", "code": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ", "test_list": ["assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)", "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)", "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```", "\ndef count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = len(s) - alpha - dig\n    return alpha, dig, spl\n```"], "num_tokens": [56, 56, 56, 56, 56, 56, 56, 56, 56, 56]}
{"item": {"task_id": 829, "text": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "code": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ", "test_list": ["assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'", "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'", "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef second_frequent(sequence):\n    from collections import Counter\n    frequency = Counter(sequence)\n    sorted_frequency = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_frequency[1][0]\n```", "\ndef second_frequent(seq):\n    freq = {}\n    for s in seq:\n        if s in freq:\n            freq[s] += 1\n        else:\n            freq[s] = 1\n    max_freq = max(freq.values())\n    second_max_freq = max(f for f in freq.values() if f < max_freq)\n    for k, v in freq.items():\n        if v == second_max_freq:\n            return k\n```", "\ndef second_frequent(seq):\n    from collections import Counter\n    counter = Counter(seq)\n    max_freq = max(counter.values())\n    most_common = [k for k, v in counter.items() if v == max_freq]\n    return max(most_common, key=lambda x: [v for k, v in counter.items() if k == x][1])\n```", "\nfrom collections import Counter\n\ndef second_frequent(sequence):\n    freq = Counter(sequence)\n    max_count = max(freq.values())\n    second_max_count = max(count for count in freq.values() if count < max_count)\n    return [key for key, value in freq.items() if value == second_max_count][0]\n```", "\ndef second_frequent(seq):\n    from collections import Counter\n    freq = Counter(seq)\n    max_count = max(freq.values())\n    second_max_count = max(count for count in freq.values() if count < max_count)\n    return [k for k, v in freq.items() if v == second_max_count][0]\n```", "\ndef second_frequent(seq):\n    from collections import Counter\n    freq = Counter(seq)\n    max_freq = max(freq.values())\n    return [k for k, v in freq.items() if v == max_freq][1]\n```", "\ndef second_frequent(sequence):\n    from collections import Counter\n    counter = Counter(sequence)\n    most_common = counter.most_common(2)\n    return most_common[1][0] if most_common else None\n```", "\ndef second_frequent(lst):\n    from collections import Counter\n    c = Counter(lst)\n    max_count = max(c.values())\n    return [k for k, v in c.items() if v == max_count][1] if max_count > 1 else None\n```", "\ndef second_frequent(seq):\n    freq = {}\n    for s in seq:\n        if s in freq:\n            freq[s] += 1\n        else:\n            freq[s] = 1\n    max_freq = max(freq.values())\n    second_max_freq = 0\n    second_most_frequent = ''\n    for s, f in freq.items():\n        if f == max_freq:\n            continue\n        if f > second_max_freq:\n            second_max_freq = f\n            second_most_frequent = s\n    return second_most_frequent\n```", "\nfrom collections import Counter\n\ndef second_frequent(sequence):\n    counter = Counter(sequence)\n    most_common = counter.most_common(2)\n    return most_common[1][0] if len(most_common) > 1 else ''\n```"], "num_tokens": [50, 92, 77, 68, 69, 49, 47, 58, 116, 51]}
{"item": {"task_id": 830, "text": "Write a function to round up a number to specific digits.", "code": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)", "test_list": ["assert round_up(123.01247,0)==124", "assert round_up(123.01247,1)==123.1", "assert round_up(123.01247,2)==123.02"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier) / multiplier\n```", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier) / multiplier", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return math.ceil(n * multiplier) / multiplier\n```", "\ndef round_up(n, digits):\n    multiplier = 10**digits\n    return math.ceil(n*multiplier)/multiplier\n```", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier) / multiplier\n```", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier) / multiplier\n```", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier + 0.5) / multiplier\n```", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier + 0.5) / multiplier", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier) / multiplier", "\ndef round_up(n, digits):\n    multiplier = 10 ** digits\n    return round(n * multiplier) / multiplier\n```"], "num_tokens": [28, 26, 29, 30, 28, 28, 33, 31, 26, 28]}
{"item": {"task_id": 831, "text": "Write a python function to count equal element pairs from the given array.", "code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "test_list": ["assert count_Pairs([1,1,1,1],4) == 6", "assert count_Pairs([1,5,1],3) == 1", "assert count_Pairs([3,2,1,7,8,9],6) == 0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_Pairs(arr, n):\n    return sum(val // n for val in arr) * n // 2\n```", "\ndef count_Pairs(arr, k):\n    return sum(v//k for v in collections.Counter(arr).values())//2\n```", "\ndef count_Pairs(arr, k):\n    return sum((val//k)*(val//k+1)//2 for val in set(arr)) - sum((val//k)*(val//k+1)//2 for val in set(arr) for _ in range(arr.count(val)//k))\n```", "\ndef count_Pairs(arr, k):\n    return sum(val//k for val in arr) * (val//k for val in arr).count(0)\n```", "\ndef count_Pairs(arr, k):\n    return sum(v//k for v in [arr.count(i) for i in set(arr)])//2\n```", "\ndef count_Pairs(arr, k):\n    count = 0\n    for num in set(arr):\n        if arr.count(num) >= k // 2:\n            count += (arr.count(num) // (k // 2)) * (k // 2)\n            if k % 2 == 1 and arr.count(num) % 2 == 1:\n                count += 1\n    return count\n```", "\ndef count_Pairs(arr, k):\n    return sum(v//k for v in Counter(arr).values()) // 2\n```", "\ndef count_Pairs(arr, k):\n    return sum(v//k for v in Counter(arr).values()) // 2\n```", "\ndef count_Pairs(arr, k):\n    return sum(v // k for v in collections.Counter(arr).values()) * k // 2\n```", "\ndef count_Pairs(arr, k):\n    return sum(val // k for val in arr) * (val // k + 1) // 2\n```"], "num_tokens": [28, 29, 62, 36, 34, 89, 29, 29, 32, 35]}
{"item": {"task_id": 832, "text": "Write a function to extract the maximum numeric value from a string by using regex.", "code": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)", "test_list": ["assert extract_max('100klh564abc365bg') == 564", "assert extract_max('hello300how546mer231') == 546", "assert extract_max('its233beenalong343journey234') == 343"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))\n```", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))\n```", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall('\\d+', s)))", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))\n```", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall('\\d+', s)))\n```", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))\n```", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))", "\nimport re\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))", "\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall('\\d+', s)))"], "num_tokens": [24, 25, 25, 23, 25, 24, 25, 24, 24, 23]}
{"item": {"task_id": 833, "text": "Write a function to get dictionary keys as a list.", "code": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "test_list": ["assert get_key({1:'python',2:'java'})==[1,2]", "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]", "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_key(dictionary):\n    return list(dictionary.keys())", "\ndef get_key(dictionary):\n    return list(dictionary.keys())", "\ndef get_key(d):\n    return list(d.keys())\n```", "\ndef get_key(d):\n    return list(d.keys())", "\ndef get_key(d):\n    return list(d.keys())", "\ndef get_key(d):\n    return list(d.keys())", "\ndef get_key(dictionary):\n    return list(dictionary.keys())", "\ndef get_key(dictionary):\n    return list(dictionary.keys())", "\ndef get_key(dictionary):\n    return list(dictionary.keys())", "\ndef get_key(d):\n    return list(d.keys())"], "num_tokens": [13, 13, 14, 13, 13, 13, 13, 13, 13, 13]}
{"item": {"task_id": 834, "text": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "code": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix", "test_list": ["assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ", "assert generate_matrix(2)==[[1,2],[4,3]]", "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef generate_matrix(n):\n    result = [[0]*n for _ in range(n)]\n    num = 1\n    for i in range((n + 1) // 2):\n        for j in range(i, n - i):\n            result[i][j] = num\n            num += 1\n        for k in range(i + 1, n - i):\n            result[k][n - i - 1] = num\n            num += 1\n        if i < n - i - 1:\n            for j in range(n - i - 2, i - 1, -1):\n                result[n - i - 1][j] = num\n                num += 1\n            for i1 in range(n - i - 2, i, -1):\n                result[i1][i] = num\n                num += 1\n    return result\n```", "\ndef generate_matrix(n):\n    res = [[0]*(n) for _ in range(n)]\n    num = 1\n    start = 0\n    end = n - 1\n    while num <= n*n:\n        for i in range(start, end+1):\n            res[start][i] = num\n            num += 1\n        start += 1\n        for i in range(start, end+1):\n            res[i][end] = num\n            num += 1\n        end -= 1\n        if start <= end:\n            for i in range(end, start-1, -1):\n                res[end][i] = num\n                num += 1\n            start += 1\n            for i in range(end, start-1, -1):\n                res[i][start-1] = num\n                num += 1\n            end -= 1\n    return [[str(i**2) for i in row] for row in res]\n```", "\ndef generate_matrix(n):\n    result = [[0]*n for _ in range(n)]\n    num = 1\n    start, end = 0, n\n    for _ in range(n):\n        for i in range(start, end):\n            result[start][i] = num\n            num += 1\n        for i in range(start + 1, end):\n            result[i][end - 1] = num\n            num += 1\n        if start < end:\n            for i in range(end - 2, start - 1, -1):\n                result[end - 1][i] = num\n                num += 1\n            start += 1\n        for i in range(end - 2, start, -1):\n            result[i][start] = num\n            num += 1\n        end -= 1\n    return [[i**2 for i in row] for row in result]\n```", "\ndef generate_matrix(n):\n    res = [[0]*(n) for _ in range(n)]\n    num = 1\n    i, j, di, dj = 0, 0, 0, 1\n    for _ in range(n*n):\n        res[i][j] = num ** 2\n        num += 1\n        if res[(i+di)%n][(j+dj)%n] == 0:\n            di, dj = dj, -di\n        i, j = i+di, j+dj\n    return res\n```", "\ndef generate_matrix(n):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    direction = 0\n    x, y = 0, 0\n    val = 1\n    while val <= n * n:\n        matrix[x][y] = val\n        val += 1\n        nx, ny = x + directions[direction][0], y + directions[direction][1]\n        if 0 <= nx < n and 0 <= ny < n and matrix[nx][ny] == 0:\n            x, y = nx, ny\n        else:\n            direction = (direction + 1) % 4\n            x, y = x + directions[direction][0], y + directions[direction][1]\n    return matrix\n```", "\ndef generate_matrix(n):\n    res = [[0] * n for _ in range(n)]\n    num = 1\n    i, j = 0, 0\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    direction = 0\n    for _ in range(n * n):\n        res[i][j] = num ** 2\n        num += 1\n        ni, nj = i + directions[direction][0], j + directions[direction][1]\n        if 0 <= ni < n and 0 <= nj < n and res[ni][nj] == 0:\n            i, j = ni, nj\n        else:\n            direction = (direction + 1) % 4\n            i, j = i + directions[direction][0], j + directions[direction][1]\n    return res\n```", "\ndef generate_matrix(n):\n    result = [[0 for _ in range(n)] for _ in range(n)]\n    num = 1\n    start = 0\n    end = n\n    while num <= n * n:\n        for i in range(start, end):\n            result[start][i] = num\n            num += 1\n        for i in range(start + 1, end):\n            result[i][end - 1] = num\n            num += 1\n        if start < end - 1:\n            for i in range(end - 2, start - 1, -1):\n                result[end - 1][i] = num\n                num += 1\n            for i in range(end - 2, start, -1):\n                result[i][start] = num\n                num += 1\n        start += 1\n        end -= 1\n    return [[i ** 2 if j ** 2 % n!= i else i ** 2 - j ** 2 for j in range(n)] for i in range(n)]\n```", "\ndef generate_matrix(n):\n    result = [[0]*(n) for _ in range(n)]\n    num = 1\n    i, j, di, dj = 0, 0, 0, 1\n    for _ in range(n * n):\n        result[i][j] = num ** 2\n        num += 1\n        if result[i + di][j + dj] == 0:\n            result[i + di][j + dj] = num ** 2\n            num += 1\n        if num ** 2 > n * n:\n            break\n        i += di\n        j += dj\n        if i * j == 0:\n            dj, di = 1, 0\n        elif i == 0:\n            di, dj = 0, 1\n        elif j == n - 1:\n            di, dj = 0, -1\n        elif i == n - 1:\n            di, dj = 1, 0\n    return result\n```", "\ndef generate_matrix(n):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    num = 1\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    direction = 0\n    row, col = 0, 0\n    for _ in range(n * n):\n        matrix[row][col] = num ** 2\n        num += 1\n        next_row, next_col = row + directions[direction][0], col + directions[direction][1]\n        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row][next_col] == 0:\n            row, col = next_row, next_col\n        else:\n            direction = (direction + 1) % 4\n            row, col = row + directions[direction][0], col + directions[direction][1]\n    return matrix\n```", "\ndef generate_matrix(n):\n    matrix = [[0] * n for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    direction = 0\n    x, y = 0, 0\n    for i in range(1, n * n + 1):\n        matrix[x][y] = i ** 2\n        dx, dy = directions[direction]\n        if 0 <= x + dx < n and 0 <= y + dy < n and matrix[x + dx][y + dy] == 0:\n            x, y = x + dx, y + dy\n        else:\n            direction = (direction + 1) % 4\n            dx, dy = directions[direction]\n            x, y = x + dx, y + dy\n    return matrix\n```"], "num_tokens": [191, 209, 198, 122, 205, 206, 229, 219, 216, 200]}
{"item": {"task_id": 835, "text": "Write a python function to find the slope of a line.", "code": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ", "test_list": ["assert slope(4,2,2,5) == -1.5", "assert slope(2,4,4,6) == 1", "assert slope(1,2,4,2) == 0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf')\n    return (y2 - y1) / (x2 - x1)", "\ndef slope(x1, y1, x2, y2):\n    return (y2 - y1) / (x2 - x1) if x2!= x1 else float('inf')\n```", "\ndef slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf')\n    return (y2 - y1) / (x2 - x1)", "\ndef slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf')\n    return (y2 - y1) / (x2 - x1)", "\ndef slope(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        return float('inf') if y2 - y1 > 0 else -float('inf')\n    return (y2 - y1) / (x2 - x1)", "\ndef slope(x1, y1, x2, y2):\n    return (y2 - y1) / (x2 - x1) if x2!= x1 else float('inf')", "\ndef slope(x1, y1, x2, y2):\n    return (y2 - y1) / (x2 - x1) if x2!= x1 else float('inf')", "\ndef slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf') if y1 == y2 else 0\n    return (y2 - y1) / (x2 - x1)", "\ndef slope(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        return float('inf') if y2 - y1 > 0 else -float('inf')\n    return (y2 - y1) / (x2 - x1)", "\ndef slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf') if y1 == y2 else 0\n    return (y2 - y1) / (x2 - x1)"], "num_tokens": [47, 45, 47, 47, 65, 44, 44, 57, 65, 57]}
{"item": {"task_id": 836, "text": "Write a function to find length of the subarray having maximum sum.", "code": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "test_list": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5", "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2", "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_sub_array_sum(arr, k):\n    if not arr or k < 1:\n        return 0\n    window_sum = max_sum = sum(arr[:k])\n    for i in range(k, len(arr)):\n        window_sum = window_sum - arr[i - k] + arr[i]\n        max_sum = max(max_sum, window_sum)\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, k):\n    if not arr:\n        return 0\n    if k > len(arr):\n        return 0\n    max_sum = current_sum = sum(arr[:k])\n    max_len = k\n    for i in range(k, len(arr)):\n        current_sum = current_sum - arr[i - k] + arr[i]\n        max_len = max(max_len, current_sum) if current_sum > 0 else 0\n    return max_len\n```", "\ndef max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    window_sum = 0\n    for i in range(n):\n        window_sum += arr[i]\n        if window_sum > max_sum:\n            max_sum = window_sum\n        if window_sum < 0:\n            window_sum = 0\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, k):\n    if k > len(arr):\n        return 0\n    max_sum = current_sum = sum(arr[:k])\n    for i in range(k, len(arr)):\n        current_sum = current_sum - arr[i-k] + arr[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, n):\n    if not arr:\n        return 0\n    max_sum = current_sum = sum(arr[:n])\n    for i in range(n, len(arr)):\n        current_sum = current_sum + arr[i] - arr[i-n]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    left = 0\n    for right in range(n):\n        current_sum += arr[right]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            left = right + 1\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, k):\n    if k > len(arr):\n        return 0\n    max_sum = sum(arr[:k])\n    current_sum = max_sum\n    for i in range(k, len(arr)):\n        current_sum = current_sum - arr[i-k] + arr[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, n):\n    if n > len(arr):\n        n = len(arr)\n    max_sum = current_sum = sum(arr[:n])\n    for i in range(n, len(arr)):\n        current_sum = current_sum + arr[i] - arr[i-n]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, k):\n    if len(arr) < k:\n        return 0\n    max_sum = 0\n    window_sum = sum(arr[:k])\n    max_sum = max(max_sum, window_sum)\n    for i in range(k, len(arr)):\n        window_sum = window_sum - arr[i - k] + arr[i]\n        max_sum = max(max_sum, window_sum)\n    return max_sum\n```", "\ndef max_sub_array_sum(arr, n):\n    current_sum = max_sum = arr[0]\n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"], "num_tokens": [81, 104, 76, 77, 75, 90, 81, 78, 94, 63]}
{"item": {"task_id": 837, "text": "Write a python function to find the cube sum of first n odd natural numbers.", "code": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "test_list": ["assert cube_Sum(2) == 28", "assert cube_Sum(3) == 153", "assert cube_Sum(4) == 496"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))\n```", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n+1, 2))\n```", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n*2, 2))", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n*2, 2))\n```", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n*2, 2))", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n+1, 2))", "\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))\n```"], "num_tokens": [29, 31, 28, 28, 28, 28, 29, 28, 30, 29]}
{"item": {"task_id": 838, "text": "Write a python function to find minimum number swaps required to make two binary strings equal.", "code": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "test_list": ["assert min_Swaps(\"0011\",\"1111\") == 1", "assert min_Swaps(\"00011\",\"01001\") == 2", "assert min_Swaps(\"111\",\"111\") == 0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_Swaps(s1, s2):\n    swaps = 0\n    for c1, c2 in zip(s1, s2):\n        if c1!= c2:\n            swaps += 1\n    return swaps // 2\n```", "\ndef min_Swaps(s1, s2):\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1!= c2:\n            diff += 1\n    return diff\n```", "\ndef min_Swaps(s1, s2):\n    s1_count = s1.count('1')\n    s2_count = s2.count('1')\n    diff = abs(s1_count - s2_count)\n    return min(diff, len(s1) - diff)\n```", "\ndef min_Swaps(s1, s2):\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            for j in range(i+1, len(s2)):\n                if s1[j] == s2[i]:\n                    s1 = list(s1)\n                    s1[i], s1[j] = s1[j], s1[i]\n                    s1 = \"\".join(s1)\n                    swaps += 1\n                    break\n    return swaps\n```", "\ndef min_Swaps(s1, s2):\n    s1 = list(s1)\n    s2 = list(s2)\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            for j in range(i+1, len(s1)):\n                if s1[j] == s2[i]:\n                    s1[i], s1[j] = s1[j], s1[i]\n                    swaps += 1\n                    break\n    return swaps\n```", "\ndef min_Swaps(s1, s2):\n    n = len(s1)\n    diff = 0\n    for i in range(n):\n        if s1[i]!= s2[i]:\n            diff += 1\n    return diff // 2\n```", "\ndef min_Swaps(s1, s2):\n    diff = list((bin(int(s1, 2) ^ int(s2, 2)).count('1'))\n    return diff[0] if diff else 0\n```", "\ndef min_Swaps(s1, s2):\n    count = 0\n    diff = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            diff += 1\n        if diff > 1:\n            return -1\n    return diff // 2\n```", "\ndef min_Swaps(s1, s2):\n    diff = list((c1!= c2) for c1, c2 in zip(s1, s2))\n    return diff.count(True)\n```", "\ndef min_Swaps(s1, s2):\n    n = len(s1)\n    swaps = 0\n    for i in range(n):\n        if s1[i]!= s2[i]:\n            for j in range(i+1, n):\n                if s1[j] == s2[i]:\n                    s1 = s1[:i] + '0' + s1[i+1:j] + '1' + s1[j+1:]\n                    s2 = s2[:i] + '0' + s2[i+1:j] + '1' + s2[j+1:]\n                    swaps += 1\n                    break\n    return swaps\n```"], "num_tokens": [56, 53, 60, 111, 110, 57, 51, 70, 45, 143]}
{"item": {"task_id": 839, "text": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "code": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup", "test_list": ["assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]", "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]", "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_tuple(tuples):\n    return sorted(tuples)\n```", "\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0] if isinstance(x[0], str) else str(x[0]))\n```", "\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0] if isinstance(x[0], str) else str(x[0]))\n```", "\ndef sort_tuple(lst):\n    return sorted(lst)\n```", "\ndef sort_tuple(tuples):\n    return sorted(tuples)\n```", "\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0] if isinstance(x[0], str) else str(x[0]))\n```", "\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0])\n```", "\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n```", "\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[0] if isinstance(x[0], str) else str(x[0]))\n```", "\ndef sort_tuple(lst):\n    return sorted(lst)\n```"], "num_tokens": [15, 35, 35, 13, 15, 35, 21, 23, 37, 13]}
{"item": {"task_id": 840, "text": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "code": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ", "test_list": ["assert Check_Solution(2,0,-1) == \"Yes\"", "assert Check_Solution(1,-5,6) == \"No\"", "assert Check_Solution(2,0,2) == \"Yes\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        root1 = (-b + d**0.5) / (2*a)\n        root2 = (-b - d**0.5) / (2*a)\n        return \"Yes\" if root1 * root2 < 0 else \"No\"\n    else:\n        return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    d = (b**2) - 4*a*c\n    if d > 0:\n        r1 = (-b + d**0.5) / (2*a)\n        r2 = (-b - d**0.5) / (2*a)\n        if r1 == -r2:\n            return \"Yes\"\n    return \"No\"\n```", "\nimport math\n\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    root1 = (-b + math.sqrt(d)) / (2*a)\n    root2 = (-b - math.sqrt(d)) / (2*a)\n    return \"Yes\" if root1 * root2 < 0 else \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    discriminant = (b**2) - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if root1 * root2 < 0:\n        return \"Yes\"\n    return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    d = (b**2) - (4*a*c)\n    if d < 0:\n        return \"No\"\n    elif d == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return \"No\"\n    else:\n        root1 = (-b + D**0.5) / (2*a)\n        root2 = (-b - D**0.5) / (2*a)\n        return \"Yes\" if root1 * root2 < 0 else \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    delta = (b**2) - (4*a*c)\n    if delta < 0:\n        return \"No\"\n    else:\n        sqrt_delta = delta ** 0.5\n        root1 = (-b + sqrt_delta) / (2 * a)\n        root2 = (-b - sqrt_delta) / (2 * a)\n        if root1 * root2 < 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n```", "\nimport math\n\ndef Check_Solution(a, b, c):\n    d = math.sqrt(b**2 - 4*a*c)\n    if d == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    d = (b**2) - (4*a*c)\n    if d < 0:\n        return \"No\"\n    else:\n        r1 = (-b + d**0.5) / (2*a)\n        r2 = (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1 * r2 < 0 else \"No\"\n```", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return \"No\"\n    elif D == 0:\n        return \"Yes\"\n    else:\n        r1 = (-b + D**0.5) / (2*a)\n        r2 = (-b - D**0.5) / (2*a)\n        return \"Yes\" if r1 * r2 < 0 else \"No\"\n```"], "num_tokens": [94, 89, 78, 100, 59, 94, 109, 50, 96, 106]}
{"item": {"task_id": 841, "text": "Write a function to count the number of inversions in the given array.", "code": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ", "test_list": ["assert get_inv_count([1, 20, 6, 4, 5], 5) == 5", "assert get_inv_count([8, 4, 2, 1], 4) == 6", "assert get_inv_count([3, 1, 2], 3) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```", "\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```"], "num_tokens": [57, 57, 57, 57, 58, 58, 54, 57, 57, 58]}
{"item": {"task_id": 842, "text": "Write a function to find the number which occurs for odd number of times in the given array.", "code": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1", "test_list": ["assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5", "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3", "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_odd_occurence(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    for num, freq in count.items():\n        if freq % 2!= 0:\n            return num\n```", "\ndef get_odd_occurence(arr, n):\n    count = {i: arr.count(i) for i in set(arr)}\n    return min([i for i, j in count.items() if j % 2!= 0])\n```", "\ndef get_odd_occurence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2!= 0:\n            return key\n```", "\ndef get_odd_occurence(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    for num, freq in count.items():\n        if freq % 2!= 0:\n            return num\n```", "\ndef get_odd_occurence(arr, n):\n    from collections import Counter\n    counter = Counter(arr)\n    for num, count in counter.items():\n        if count % 2!= 0:\n            return num\n```", "\ndef get_odd_occurence(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    for num, freq in count.items():\n        if freq % 2!= 0 and num <= n:\n            return num\n```", "\ndef get_odd_occurence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2!= 0:\n            return key\n```", "\ndef get_odd_occurence(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    for num, freq in count.items():\n        if freq % 2!= 0 and num <= n:\n            return num\n```", "\ndef get_odd_occurence(arr, n):\n    count = 0\n    for num in arr:\n        if num == n:\n            count += 1\n    return n if count % 2!= 0 else None\n```", "\ndef get_odd_occurence(arr, n):\n    return [x for x in set(arr) if arr.count(x) % 2!= 0][0]\n```"], "num_tokens": [47, 50, 75, 47, 47, 51, 75, 51, 50, 36]}
{"item": {"task_id": 843, "text": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "code": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "test_list": ["assert nth_super_ugly_number(12,[2,7,13,19])==32", "assert nth_super_ugly_number(10,[2,7,13,19])==26", "assert nth_super_ugly_number(100,[2,7,13,19])==5408"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    heap = [1]\n    seen = set([1])\n    ugly = []\n    for _ in range(n):\n        val = heapq.heappop(heap)\n        while val in seen:\n            val = heapq.heappop(heap)\n        seen.add(val)\n        for prime in primes:\n            heapq.heappush(heap, val * prime)\n        ugly.append(val)\n    return ugly[-1]\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    heap = [p for p in primes]\n    for _ in range(n - 1):\n        val = heapq.heappop(heap)\n        uglies.append(val)\n        for p in primes:\n            if val * p <= uglies[-1]:\n                heapq.heappush(heap, val * p)\n    return uglies[-1]\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    heap = [1]\n    ugly_numbers = set([1])\n    for _ in range(n-1):\n        num = heapq.heappop(heap)\n        for p in primes:\n            next_num = num * p\n            if next_num not in ugly_numbers:\n                ugly_numbers.add(next_num)\n                heapq.heappush(heap, next_num)\n    return min(ugly_numbers)\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    heap = [1]\n    ugly = set([1])\n    for _ in range(n-1):\n        val = heapq.heappop(heap)\n        for p in primes:\n            if val * p not in ugly:\n                ugly.add(val * p)\n                heapq.heappush(heap, val * p)\n    return min(ugly)\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    heap = [1]\n    ugly_numbers = set()\n    ugly_nums = []\n    heapq.heapify(heap)\n    while len(ugly_nums) < n:\n        num = heapq.heappop(heap)\n        for p in primes:\n            if num * p not in ugly_numbers:\n                ugly_numbers.add(num * p)\n                heapq.heappush(heap, num * p)\n        if num not in ugly_nums:\n            ugly_nums.append(num)\n    return ugly_nums[-1]\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    heap = [1]\n    ugly = [None] * (n + 1)\n    ugly[1] = 1\n    for i in range(1, n):\n        ugly[i] = heapq.heappop(heap)\n        for p in primes:\n            if ugly[i] * p <= ugly[i]:\n                heapq.heappush(heap, ugly[i] * p)\n    return ugly[n]\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    ugly = [1]\n    indices = [0] * len(primes)\n    heap = [primes[i] * ugly[indices[i]] for i in range(len(primes))]\n    heapq.heapify(heap)\n    \n    for _ in range(n - 1):\n        ugly_num = heapq.heappop(heap)\n        for i in range(len(primes)):\n            if ugly[indices[i]] * primes[i] <= ugly_num:\n                indices[i] += 1\n                heapq.heappush(heap, ugly[indices[i]] * primes[i])\n    return ugly_num\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    indices = [0] * len(primes)\n    heap = [p * uglies[i] for i, p in enumerate(primes)]\n    heapq.heapify(heap)\n    \n    for _ in range(n - 1):\n        ugly = heapq.heappop(heap)\n        for i in range(len(primes)):\n            indices[i] += 1\n            if indices[i]:\n                heapq.heappush(heap, uglies[indices[i] - 1] * primes[i])\n        uglies.append(ugly)\n    \n    return uglies[-1]\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    ugly = [1]\n    pq = [i for i in primes]\n    heapq.heapify(pq)\n    while len(ugly) < n:\n        v = heapq.heappop(pq)\n        for p in primes:\n            if v * p not in ugly:\n                heapq.heappush(pq, v * p)\n                ugly.append(v * p)\n    return ugly[-1]\n```", "\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    heap = [p for p in primes]\n    for _ in range(n - 1):\n        ugly = heapq.heappop(heap)\n        for p in primes:\n            heapq.heappush(heap, ugly * p)\n        uglies.append(ugly)\n    return uglies[-1]\n```"], "num_tokens": [98, 94, 97, 88, 116, 101, 136, 139, 100, 85]}
{"item": {"task_id": 844, "text": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "code": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ", "test_list": ["assert get_Number(8,5) == 2", "assert get_Number(7,2) == 3", "assert get_Number(5,2) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_Number(n, k):\n    return (k//2) + 1 if k % 2!= 0 else k//2\n```", "\ndef get_Number(n, k):\n    odd = [i for i in range(1, n+1, 2)]\n    even = [i for i in range(2, n+1, 2)]\n    return odd[k-1] if k <= len(odd) else even[k-len(odd)-1]\n```", "\ndef get_Number(n, k):\n    odd_nums = [i for i in range(1, n, 2)]\n    even_nums = [i for i in range(2, n, 2)]\n    return odd_nums[k-1] if k <= len(odd_nums) else even_nums[k-1-len(odd_nums)]", "\ndef get_Number(n, k):\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            odd += 1\n        if odd == k:\n            return i\n```", "\ndef get_Number(n, k):\n    odds = [i for i in range(1, n+1, 2)]\n    evens = [i for i in range(2, n+1, 2)]\n    return odds[k-1] if k <= len(odds) else evens[k-len(odds)-1]\n```", "\ndef get_Number(n, k):\n    odd, even = [], []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd[k-1] if k <= len(odd) else even[k - len(odd) - 1]\n```", "\ndef get_Number(n, k):\n    return k // 2 + 1 if k % 2 else n - k // 2\n```", "\ndef get_Number(n, k):\n    odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            odd += 1\n        if odd == k:\n            return i + 1\n```", "\ndef get_Number(n, k):\n    odd = [i for i in range(1, n+1, 2)]\n    even = [i for i in range(2, n+1, 2)]\n    return odd[k-1] if k <= len(odd) else even[k-1-len(odd)]\n```", "\ndef get_Number(n, k):\n    odd, even = [], []\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return odd[k-1] if k <= len(odd) else even[k - len(odd) - 1]"], "num_tokens": [33, 71, 72, 54, 73, 78, 32, 52, 71, 77]}
{"item": {"task_id": 845, "text": "Write a python function to count the number of digits in factorial of a given number.", "code": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ", "test_list": ["assert find_Digits(7) == 4", "assert find_Digits(5) == 3", "assert find_Digits(4) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))", "\nimport math\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```", "\ndef find_Digits(n):\n    if n == 0:\n        return 1\n    fact = 1\n    count = 0\n    for i in range(1, n+1):\n        fact *= i\n        count += len(str(fact))\n    return count\n```", "\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```", "\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))", "\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```", "\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```", "\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```", "\nimport math\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```", "\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```"], "num_tokens": [20, 21, 62, 21, 20, 21, 21, 21, 21, 21]}
{"item": {"task_id": 846, "text": "Write a function to find the minimum number of platforms required for a railway/bus station.", "code": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result", "test_list": ["assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3", "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4", "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_platform(arrivals, departures, n):\n    arrivals.sort()\n    departures.sort()\n    i, j = 0, 0\n    platforms = 0\n    while i < len(arrivals) and j < len(departures):\n        if arrivals[i] <= departures[j]:\n            platforms = max(platforms, i+1)\n            i += 1\n        else:\n            platforms = max(platforms, j+1)\n            j += 1\n    return max(platforms, i, j)\n```", "\ndef find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    i = j = 0\n    platforms = 0\n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            i += 1\n        else:\n            j += 1\n            platforms += 1\n    return platforms + 1\n```", "\ndef find_platform(arrivals, departures, n):\n    arrival_times = sorted((t, 1) for t in arr)\n    departure_times = sorted((t, 0) for t in departures)\n    platforms = 0\n    time = 0\n    i, j = 0, 0\n    while i < len(arrival_times) and j < len(departure_times):\n        if arrival_times[i][0] <= departure_times[j][0]:\n            time = arrival_times[i][0]\n            i += 1\n        else:\n            time = departure_times[j][0]\n            j += 1\n        platforms = max(platforms, i + j)\n    return platforms + 1\n```", "\ndef find_platform(arrivals, departures, N):\n    arrivals.sort()\n    departures.sort()\n    i, j = 0, 0\n    platforms = 0\n    time = 0\n    while i < len(arrivals) or j < len(departures):\n        if i < len(arrivals) and j < len(departures):\n            if arrivals[i] <= departures[j]:\n                i += 1\n                time = arrivals[i-1] if i > 0 else time\n                platforms = max(platforms, i)\n            else:\n                j += 1\n                time = departures[j-1] if j > 0 else time\n                platforms = max(platforms, j)\n        elif i < len(arrivals):\n            i += 1\n            time = arrivals[i-1] if i > 0 else time\n            platforms = max(platforms, i)\n        else:\n            j += 1\n            time = departures[j-1] if j > 0 else time\n            platforms = max(platforms, j)\n    return platforms\n```", "\ndef find_platform(arrivals, departures, n):\n    arrival, departure = sorted(arrivals), sorted(departures)\n    i, j = 0, 0\n    platforms = 0\n    while i < len(arrival) and j < len(departure):\n        if arrival[i] < departure[j]:\n            platforms = max(platforms, i + 1)\n            i += 1\n        else:\n            platforms = max(platforms, j + 1)\n            j += 1\n    return max(platforms, i + j)\n```", "\ndef find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    i, j = 0, 0\n    platforms = 0\n    while i < n or j < n:\n        if arrival[i] <= departure[j]:\n            i += 1\n        else:\n            j += 1\n            platforms += 1\n    return platforms\n```", "\ndef find_platform(arrivals, departures, n):\n    arr = sorted(arrivals)\n    dep = sorted(departures)\n    i = j = plat = 0\n    while i < len(arr) and j < len(dep):\n        if arr[i] <= dep[j]:\n            plat += 1\n            i += 1\n        j += 1\n    return plat\n```", "\ndef find_platform(arr1,arr2,n):\n    arr1.sort()\n    arr2.sort()\n    i,j=0,0\n    plat=0\n    while(i<n and j<n):\n        if(arr1[i]<=arr2[j]):\n            plat+=1\n            i+=1\n        else:\n            plat+=1\n            j+=1\n    return plat\n```", "\ndef find_platform(arrivals, departures, n):\n    arrival_time = sorted((t, 1) for t in arrivers)\n    departure_time = sorted((t, 0) for t in departures)\n    time, event_type = 0, 0\n    platforms = 0\n    while arrival_time and departure_time:\n        if arrival_time[0][0] <= departure_time[0][0]:\n            arrival_time.pop(0)\n            platforms += 1\n        else:\n            departure_time.pop(0)\n            platforms -= 1\n        time = max(time, arrival_time[0][0] if arrival_time else departure_time[0][0])\n    return platforms + len(arrival_time)\n```", "\ndef find_platform(arrivals, departures, n):\n    arrivals.sort()\n    departures.sort()\n    i = j = 0\n    platforms = 0\n    while i < len(arrivals) and j < len(departures):\n        if arrivals[i] <= departures[j]:\n            platforms = max(platforms, i + 1 - j)\n            i += 1\n        else:\n            platforms = max(platforms, j + 1 - i)\n            j += 1\n    return platforms\n```"], "num_tokens": [113, 82, 154, 232, 119, 82, 83, 80, 153, 110]}
{"item": {"task_id": 847, "text": "Write a python function to copy a list from a singleton tuple.", "code": "def lcopy(xs):\n  return xs[:]\n", "test_list": ["assert lcopy([1, 2, 3]) == [1, 2, 3]", "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]", "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef lcopy(lst):\n    return list(lst)", "\ndef lcopy(lst):\n    return list(lst)\n```", "\ndef lcopy(lst):\n    return list(lst)", "\ndef lcopy(lst):\n    return list(lst)\n```", "\ndef lcopy(lst):\n    return list(lst)", "\ndef lcopy(lst):\n    return list(lst)\n```", "\ndef lcopy(lst):\n    return list(lst)", "\ndef lcopy(lst):\n    return list(lst)", "\ndef lcopy(lst):\n    return list(lst)", "\ndef lcopy(lst):\n    return list(lst)\n```"], "num_tokens": [12, 13, 12, 13, 12, 13, 12, 12, 12, 13]}
{"item": {"task_id": 848, "text": "Write a function to find the area of a trapezium.", "code": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area", "test_list": ["assert area_trapezium(6,9,4)==30", "assert area_trapezium(10,20,30)==450", "assert area_trapezium(15,25,35)==700"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```", "\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```", "\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```", "\ndef area_trapezium(a, b, h):\n    return (a + b) * h / 2\n```", "\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```", "\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```", "\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```", "\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```", "\ndef area_trapezium(a, b, h):\n    return (a+b)*h/2\n```", "\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```"], "num_tokens": [30, 30, 30, 28, 30, 30, 30, 30, 25, 30]}
{"item": {"task_id": 849, "text": "Write a python function to find sum of all prime divisors of a given number.", "code": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ", "test_list": ["assert Sum(60) == 10", "assert Sum(39) == 16", "assert Sum(40) == 7"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Sum(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_divisors(n):\n        divisors = set()\n        for i in range(2, n + 1):\n            if n % i == 0 and is_prime(i):\n                divisors.add(i)\n        return sum(divisors)\n\n    return prime_divisors(n)\n```", "\ndef Sum(n):\n    def is_prime(p):\n        if p < 2:\n            return False\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                return False\n        return True\n\n    def prime_divisors(n):\n        return [p for p in range(2, n + 1) if n % p == 0 and is_prime(p)]\n\n    return sum(prime_divisors(n))\n```", "\ndef Sum(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def divisors(n):\n        divisors = set()\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if is_prime(i):\n                    divisors.add(i)\n                if n // i!= i:\n                    if is_prime(n // i):\n                        divisors.add(n // i)\n        return sum(divisors)\n\n    return divisors(n)", "\ndef Sum(n):\n    def is_prime(p):\n        if p < 2:\n            return False\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                return False\n        return True\n\n    sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            sum += i\n    return sum\n```", "\ndef Sum(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sum_divisors = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            sum_divisors += i\n    return sum_divisors", "\ndef Sum(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            sum += i\n    return sum\n```", "\ndef Sum(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(i for i in range(2, n + 1) if n % i == 0 and is_prime(i))", "\ndef Sum(n):\n    def is_prime(i):\n        if i < 2:\n            return False\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                return False\n        return True\n\n    sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            sum += i\n    return sum\n```", "\ndef Sum(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def prime_divisors(n):\n        divisors = set()\n        for i in range(2, n + 1):\n            if n % i == 0 and is_prime(i):\n                divisors.add(i)\n        return sum(divisors)\n\n    return prime_divisors(n)\n```", "\ndef Sum(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            sum += i\n    return sum\n```"], "num_tokens": [118, 104, 147, 101, 105, 101, 87, 101, 118, 101]}
{"item": {"task_id": 850, "text": "Write a function to check if a triangle of positive area is possible with the given angles.", "code": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False", "test_list": ["assert is_triangleexists(50,60,70)==True", "assert is_triangleexists(90,45,45)==True", "assert is_triangleexists(150,30,70)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_triangleexists(angle1, angle2, angle3):\n    return sum(sorted([angle1, angle2, angle3])) <= 180\n```", "\ndef is_triangleexists(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False\n```", "\ndef is_triangleexists(angle1, angle2, angle3):\n    angles = sorted([angle1, angle2, angle3])\n    return angles[0] + angles[1] > angles[2] and angles[0] + angles[2] > angles[1] and angles[1] + angles[2] > angles[0]\n```", "\ndef is_triangleexists(angle1, angle2, angle3):\n    if angle1+angle2+angle3>180:\n        return False\n    if angle1+angle2<=180 or angle2+angle3<=180 or angle1+angle3<=180:\n        return True\n    return False\n```", "\ndef is_triangleexists(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 > 180:\n        return True\n    else:\n        return False\n```", "\ndef is_triangleexists(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False\n```", "\ndef is_triangleexists(angle1, angle2, angle3):\n    angles = sorted([angle1, angle2, angle3])\n    if angles[0] + angles[1] <= 180:\n        return True\n    return False\n```", "\ndef is_triangleexists(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n```", "\ndef is_triangleexists(angle1, angle2, angle3):\n    return angle1 + angle2 + angle3 <= 180 and max(angle1, angle2, angle3) <= 90\n```", "\ndef is_triangleexists(a, b, c):\n    if a+b+c > 180:\n        return False\n    return True\n```"], "num_tokens": [34, 41, 76, 67, 41, 41, 53, 33, 44, 30]}
{"item": {"task_id": 851, "text": "Write a python function to find sum of inverse of divisors.", "code": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ", "test_list": ["assert Sum_of_Inverse_Divisors(6,12) == 2", "assert Sum_of_Inverse_Divisors(9,13) == 1.44", "assert Sum_of_Inverse_Divisors(1,4) == 4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Sum_of_Inverse_Divisors(m,n):\n    def sum_of_inverse_divisors(num):\n        sum = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                sum += 1 / i\n        return sum\n    return sum_of_inverse_divisors(m) - sum_of_inverse_divisors(n)", "\ndef Sum_of_Inverse_Divisors(n, m):\n    return sum(1/i for i in range(1, min(n, m)+1) if n % i == 0)", "\ndef Sum_of_Inverse_Divisors(n, m):\n    return sum(1/i for i in range(1, min(n,m)+1) if n % i == 0)\n```", "\ndef Sum_of_Inverse_Divisors(n, m):\n    return sum(1/i for i in range(1, min(n, m)+1) if n%i == 0 and m%i == 0 for _ in range(2, int(i**0.5)+1) if i%j == 0)\n```", "\ndef Sum_of_Inverse_Divisors(a, b):\n    return sum(1.0/i for i in range(1, min(a,b)+1) if a%i==0 or b%i==0)", "\ndef Sum_of_Inverse_Divisors(n, m):\n    return sum(1 / i for i in range(1, min(n, m) + 1) if n % i == 0)", "\ndef Sum_of_Inverse_Divisors(n, m):\n    return sum(1.0/i for i in range(1, min(n,m) + 1) if n%i == 0)", "\ndef Sum_of_Inverse_Divisors(a, b):\n    return sum(1.0/i for i in range(1, min(a,b)+1) if a%i==0 or b%i==0)", "\ndef Sum_of_Inverse_Divisors(n, m):\n    return sum(1/i for i in range(1, min(n,m)+1) if n%i==0 or m%i==0)", "\ndef Sum_of_Inverse_Divisors(m, n):\n    def sum_of_inverse_divisors(x):\n        return sum(1.0/i for i in range(1, x+1) if x%i==0)\n    return sum_of_inverse_divisors(m) - sum_of_inverse_divisors(n)"], "num_tokens": [79, 42, 42, 71, 46, 45, 44, 46, 44, 65]}
{"item": {"task_id": 852, "text": "Write a python function to remove negative numbers from a list.", "code": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "test_list": ["assert remove_negs([1,-2,3,-4]) == [1,3]", "assert remove_negs([1,2,3,-4]) == [1,2,3]", "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [i for i in lst if i >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]", "\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]"], "num_tokens": [22, 22, 22, 22, 22, 22, 22, 22, 22, 22]}
{"item": {"task_id": 853, "text": "Write a python function to find sum of odd factors of a number.", "code": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ", "test_list": ["assert sum_of_odd_Factors(30) == 24", "assert sum_of_odd_Factors(18) == 13", "assert sum_of_odd_Factors(2) == 1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2!= 0:\n            sum += i\n    return sum", "\ndef sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2!= 0:\n            sum += i\n    return sum\n```", "\ndef sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0 and i % 2!= 0:\n            sum += i\n    return sum\n```", "\ndef sum_of_odd_Factors(n):\n    return sum(i for i in range(1, n+1) if n % i == 0 and i % 2!= 0)\n```", "\ndef sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0 and i % 2!= 0:\n            sum += i\n    return sum\n```", "\ndef sum_of_odd_Factors(n):\n    return sum(i for i in range(1, n) if n % i == 0 and i % 2!= 0)", "\ndef sum_of_odd_Factors(n):\n    return sum(i for i in range(1, n) if n % i == 0 and i % 2!= 0)", "\ndef sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2!= 0:\n            sum += i\n    return sum\n```", "\ndef sum_of_odd_Factors(n):\n    return sum(i for i in range(1, n) if n % i == 0 and i % 2!= 0)", "\ndef sum_of_odd_Factors(n):\n    return sum(i for i in range(1, n+1) if n % i == 0 and i % 2!= 0)"], "num_tokens": [53, 56, 53, 42, 53, 39, 39, 56, 39, 41]}
{"item": {"task_id": 854, "text": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "code": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap", "test_list": ["assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]", "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]", "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.merge(*[iter(lst)]*len(lst)))\n```", "\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))\n```", "\nimport heapq\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))\n```", "\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))\n```", "\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.merge(*[iter(lst)]*len(lst)))\n```", "\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))\n```", "\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))\n```", "\nimport heapq\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))[::-1]\n```", "\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))[::-1]\n```", "\nimport heapq\n\ndef raw_heap(lst):\n    return list(heapq.heapify(lst))[::-1]\n```"], "num_tokens": [26, 20, 20, 20, 26, 20, 20, 23, 23, 23]}
{"item": {"task_id": 855, "text": "Write a python function to check for even parity of a given number.", "code": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "test_list": ["assert check_Even_Parity(10) == True", "assert check_Even_Parity(11) == False", "assert check_Even_Parity(18) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0\n```", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0", "\ndef check_Even_Parity(n):\n    return bin(n).count('1') % 2 == 0"], "num_tokens": [25, 25, 25, 25, 25, 25, 27, 25, 25, 25]}
{"item": {"task_id": 856, "text": "Write a python function to find minimum adjacent swaps required to sort binary array.", "code": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "test_list": ["assert find_Min_Swaps([1,0,1,0],4) == 3", "assert find_Min_Swaps([0,1,0],3) == 1", "assert find_Min_Swaps([0,0,1,1,0],5) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_Min_Swaps(arr, n):\n    swaps = 0\n    for i in range(n):\n        if arr[i] == 1:\n            for j in range(i+1, n):\n                if arr[j] == 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    swaps += 1\n                    break\n    return swaps\n```", "\ndef find_Min_Swaps(arr, n):\n    swaps = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                swaps += 1\n    return swaps\n```", "\ndef find_Min_Swaps(arr, n):\n    arr = [1 - x for x in arr]\n    res = 0\n    i = 0\n    for j in range(n):\n        while i < n and arr[i] == 0:\n            i += 1\n        while i < n and arr[i] == 1:\n            i += 1\n        res += i\n    return res\n```", "\ndef find_Min_Swaps(arr, n):\n    count = 0\n    res = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        if (count % 2!= arr[i]):\n            res += 1\n    return res\n```", "\ndef find_Min_Swaps(arr,n):\n    arr.sort()\n    swaps = 0\n    for i in range(n):\n        if arr[i]!= (1 if arr[n-1-i] else 0):\n            swaps += 1\n    return swaps\n```", "\ndef find_Min_Swaps(arr, n):\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            while i < n - 1 and arr[i] == 1:\n                i += 1\n            count += 1\n    return count\n```", "\ndef find_Min_Swaps(arr, n):\n    res = 0\n    temp = [x for x in arr]\n    for i in range(n):\n        if temp[i] == 1:\n            for j in range(i+1, n):\n                if temp[j] == 0:\n                    temp[i], temp[j] = temp[j], temp[i]\n                    res += 1\n                    break\n    return res\n```", "\ndef find_Min_Swaps(arr,n):\n    swaps = 0\n    for i in range(n):\n        if arr[i] == 1:\n            continue\n        while i < n and arr[i] == 0:\n            i += 1\n        swaps += i\n    return swaps\n```", "\ndef find_Min_Swaps(arr,n):\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j] and arr[i]%2!=arr[j]%2:\n                inversions += 1\n    return inversions\n```", "\ndef find_Min_Swaps(arr, n):\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            for j in range(i+1, n):\n                if arr[j] == 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    count += 1\n                    break\n    return count\n```"], "num_tokens": [82, 71, 91, 68, 57, 67, 92, 65, 67, 82]}
{"item": {"task_id": 857, "text": "Write a function to list out the list of given strings individually using map function.", "code": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ", "test_list": ["assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]", "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]", "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```", "\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```", "\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```", "\ndef listify_list(strings):\n    return list(map(list, map(str, strings)))\n```", "\ndef listify_list(strings):\n    return list(map(list, map(str, strings)))\n```", "\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```", "\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```", "\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```", "\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```", "\ndef listify_list(lst):\n    return list(map(list, map(str, lst)))\n```"], "num_tokens": [20, 20, 20, 20, 20, 20, 20, 20, 20, 20]}
{"item": {"task_id": 858, "text": "Write a function to count number of lists in a given list of lists and square the count.", "code": "def count_list(input_list): \r\n    return (len(input_list))**2", "test_list": ["assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25", "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16", "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_list(lst):\n    return (len([x for x in lst if isinstance(x, list)]) ** 2)\n```", "\ndef count_list(lst):\n    return (len([x for x in lst if isinstance(x, list)]) ** 2)\n```", "\ndef count_list(lst):\n    return sum(1 for _ in lst) ** 2\n```", "\ndef count_list(lst):\n    return len(lst) ** 2\n```", "\ndef count_list(lst):\n    return len(lst) ** 2\n```", "\ndef count_list(lst):\n    return (len([sublist for sublist in lst if isinstance(sublist, list)]) ** 2)\n```", "\ndef count_list(lst):\n    return len(lst) ** 2\n```", "\ndef count_list(list_of_lists):\n    return (len([i for i in list_of_lists if type(i) == list]) ** 2)\n```", "\ndef count_list(lst):\n    return (len([i for i in lst if isinstance(i, list)]) ** 2)\n```", "\ndef count_list(lst):\n    return sum(1 for x in lst if isinstance(x, list)) ** 2\n```"], "num_tokens": [28, 28, 22, 17, 17, 30, 17, 33, 28, 27]}
{"item": {"task_id": 859, "text": "Write a function to generate all sublists of a given list.", "code": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs", "test_list": ["assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]", "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]", "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sub_lists(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        result.extend([curr + [lst[i]] for curr in result])\n    return result\n```", "\ndef sub_lists(lst):\n    return [lst[i:j+1] for i in range(len(lst)+1) for j in range(i, len(lst))]\n```", "\ndef sub_lists(input_list):\n    result = [[]]\n    for i in input_list:\n        result += [curr + [i] for curr in result]\n    return result\n```", "\ndef sub_lists(lst):\n    result = [[]]\n    for elem in lst:\n        result += [curr + [elem] for curr in result]\n    return result\n```", "\ndef sub_lists(input_list):\n    result = [[]]\n    for elem in input_list:\n        result.extend([curr_list + [elem] for curr_list in result])\n    return result\n```", "\ndef sub_lists(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        result.extend([curr + [lst[i]] for curr in result])\n    return result\n```", "\ndef sub_lists(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        result.extend([curr + [lst[i]] for curr in result])\n    return result\n```", "\ndef sub_lists(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        result += [curr + [lst[i]] for curr in result]\n    return result\n```", "\ndef sub_lists(lst):\n    result = [[]]\n    for i in lst:\n        result += [curr + [i] for curr in result]\n    return result\n```", "\ndef sub_lists(lst):\n    result = [[]]\n    for element in lst:\n        result += [curr + [element] for curr in result]\n    return result\n```"], "num_tokens": [40, 35, 39, 37, 41, 40, 40, 40, 37, 37]}
{"item": {"task_id": 860, "text": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "code": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "test_list": ["assert check_alphanumeric(\"dawood@\") == 'Discard'", "assert check_alphanumeric(\"skdmsam326\") == 'Accept'", "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef check_alphanumeric(s):\n    if re.search(r'\\D+$', s):\n        return 'Discard'\n    else:\n        return 'Accept'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.match('^[a-zA-Z0-9]+$', s):\n        return 'Accept'\n    else:\n        return 'Discard'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.match('^[a-zA-Z0-9]*$', s):\n        return 'Accept'\n    else:\n        return 'Discard'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.match(r'^\\w+$', s):\n        return 'Accept'\n    else:\n        return 'Discard'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.search(r'\\D+$', s):\n        return 'Discard'\n    else:\n        return 'Accept'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.search(r'\\D+$', s):\n        return 'Discard'\n    else:\n        return 'Accept'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.match(r'^[a-zA-Z0-9]+$', s):\n        return 'Accept'\n    else:\n        return 'Discard'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.match(r'^[^a-zA-Z0-9]*$', s):\n        return 'Discard'\n    else:\n        return 'Accept'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.search(r'\\W+$', s):\n        return 'Discard'\n    else:\n        return 'Accept'\n```", "\nimport re\n\ndef check_alphanumeric(s):\n    if re.search(r'\\D$', s):\n        return 'Discard'\n    else:\n        return 'Accept'\n```"], "num_tokens": [37, 42, 42, 38, 37, 37, 43, 43, 37, 36]}
{"item": {"task_id": 861, "text": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "code": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result", "test_list": ["assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']", "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]", "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nanagram_lambda = lambda lst, word: [s for s in lst if sorted(s) == sorted(word)]\n```", "\nanagram_lambda = lambda s, lst: [i for i in lst if sorted(i) == sorted(s)]\n```", "\nanagram_lambda = lambda lst, word: [s for s in lst if sorted(s) == sorted(word)]\n```", "\nanagram_lambda = lambda lst, s: [word for word in lst if sorted(word) == sorted(s)]\n```", "\nanagram_lambda = lambda lst, target: [word for word in lst if sorted(word) == sorted(target)]\n```", "\nanagram_lambda = lambda s, lst: [i for i in lst if sorted(i) == sorted(s)]\n```", "\nanagram_lambda = lambda lst, target: [s for s in lst if sorted(s) == sorted(target)]\n```", "\nanagram_lambda = lambda lst, target: [s for s in lst if sorted(s) == sorted(target)]\n```", "\nanagram_lambda = lambda s, lst: [i for i in lst if sorted(i) == sorted(s)]\n```", "\nanagram_lambda = lambda lst, target: [word for word in lst if sorted(word) == sorted(target)]\n```"], "num_tokens": [26, 26, 26, 26, 26, 26, 26, 26, 26, 26]}
{"item": {"task_id": 862, "text": "Write a function to find the occurrences of n most common words in a given text.", "code": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "test_list": ["assert n_common_words(\"python is a programming language\",1)==[('python', 1)]", "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]", "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nfrom collections import Counter\nimport re\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return [(word, count) for word, count in Counter(words).most_common(n)]\n```", "\nfrom collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    common = Counter(words).most_common(n)\n    return [(word, count) for word, count in common]\n```", "\nfrom collections import Counter\nimport re\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return Counter(words).most_common(n)\n```", "\nfrom collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return Counter(words).most_common(n)\n```", "\nfrom collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    common = Counter(words).most_common(n)\n    return [(word, count) for word, count in common]\n```", "\nfrom collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    common = Counter(words).most_common(n)\n    return [(word, count) for word, count in common]\n```", "\nfrom collections import Counter\nimport re\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return [word + (count,) for word, count in Counter(words).most_common(n)]\n```", "\nfrom collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    count = Counter(words)\n    return [word for word, freq in count.most_common(n)]\n```", "\nfrom collections import Counter\ndef n_common_words(text, n):\n    words = text.lower().split()\n    counter = Counter(words)\n    return [(word, freq) for word, freq in counter.most_common(n)]\n```", "\nfrom collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    common_words = Counter(words).most_common(n)\n    return common_words\n```"], "num_tokens": [54, 59, 44, 44, 59, 59, 55, 56, 48, 51]}
{"item": {"task_id": 863, "text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "code": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "test_list": ["assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3", "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4", "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_longest_conseq_subseq(seq, n):\n    if not seq:\n        return 0\n\n    longest = 0\n    start = 0\n    seq.sort()\n\n    for end, num in enumerate(seq):\n        if num - seq[start]!= 1:\n            start = end\n        longest = max(longest, end - start + 1)\n\n    return longest if longest <= n else longest - 1\n```", "\ndef find_longest_conseq_subseq(nums, k):\n    nums = set(nums)\n    longest = 0\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_longest = 1\n            while current_num + 1 in nums:\n                current_num += 1\n                current_longest += 1\n            longest = max(longest, current_longest)\n    return longest\n```", "\ndef find_longest_conseq_subseq(seq, k):\n    if not seq:\n        return 0\n    max_length = 0\n    for i in range(len(seq)):\n        if i > 0 and seq[i] == seq[i-1]:\n            continue\n        start = seq[i]\n        length = 1\n        while start + length <= k:\n            if start + length not in seq:\n                break\n            length += 1\n        max_length = max(max_length, length)\n    return max_length\n```", "\ndef find_longest_conseq_subseq(arr, k):\n    if not arr:\n        return 0\n\n    arr = set(arr)\n    longest_subseq = 0\n\n    for num in arr:\n        if num - 1 not in arr:\n            current_num = num\n            current_subseq = 1\n            while current_num + 1 in arr:\n                current_num += 1\n                current_subseq += 1\n            longest_subseq = max(longest_subseq, current_subseq)\n\n    return longest_subseq if longest_subseq <= k else k\n```", "\ndef find_longest_conseq_subseq(arr, n):\n    max_length = 0\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        curr_num = arr[i]\n        curr_length = 1\n        while curr_num + 1 in arr:\n            curr_num += 1\n            curr_length += 1\n        max_length = max(max_length, curr_length)\n    return max_length\n```", "\ndef find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n\n    arr.sort()\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    return max(max_length, current_length)\n```", "\ndef find_longest_conseq_subseq(seq, k):\n    if not seq:\n        return 0\n\n    seq = set(seq)\n    longest_subseq = 0\n    for num in seq:\n        if num - 1 not in seq:\n            curr_num = num\n            curr_subseq = 1\n            while curr_num + 1 in seq:\n                curr_num += 1\n                curr_subseq += 1\n            longest_subseq = max(longest_subseq, curr_subseq)\n\n    return longest_subseq\n```", "\ndef find_longest_conseq_subseq(seq, n):\n    if not seq:\n        return 0\n\n    max_len = 0\n    seq.sort()\n    i = 0\n    while i < len(seq):\n        if i > 0 and seq[i] == seq[i - 1]:\n            i += 1\n            continue\n        count = 1\n        while i + 1 < len(seq) and seq[i + 1] - seq[i] == 1:\n            i += 1\n            count += 1\n        max_len = max(max_len, count)\n        i += 1\n    return max_len\n```", "\ndef find_longest_conseq_subseq(seq, n):\n    max_len = 0\n    for i in range(len(seq)):\n        if i > 0 and seq[i] == seq[i-1]:\n            continue\n        curr_len = 1\n        for j in range(i+1, len(seq)):\n            if seq[j] == seq[j-1] or seq[j] - seq[j-1]!= 1:\n                break\n            curr_len += 1\n        max_len = max(max_len, curr_len)\n    return max_len\n```", "\ndef find_longest_conseq_subseq(seq, k):\n    if not seq:\n        return 0\n    seq = set(seq)\n    longest = 0\n    for num in seq:\n        if num - 1 not in seq:\n            current_num = num\n            current_length = 1\n            while current_num + 1 in seq:\n                current_num += 1\n                current_length += 1\n            longest = max(longest, current_length)\n    return longest\n```"], "num_tokens": [92, 97, 112, 123, 103, 106, 115, 139, 118, 104]}
{"item": {"task_id": 864, "text": "Write a function to find palindromes in a given list of strings using lambda function.", "code": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "test_list": ["assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']", "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']", "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```", "\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```", "\npalindrome_lambda = lambda lst: [word for word in lst if word == word[::-1]]\n```", "\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```", "\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```", "\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```", "\npalindrome_lambda = lambda lst: [word for word in lst if word == word[::-1]]\n```", "\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```", "\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```", "\npalindrome_lambda = lambda lst: [s for s in lst if s == s[::-1]]\n```"], "num_tokens": [23, 23, 23, 23, 23, 23, 23, 23, 23, 23]}
{"item": {"task_id": 865, "text": "Write a function to print n-times a list using map function.", "code": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)", "test_list": ["assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]", "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]", "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x*n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x*n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x*n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x*n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x*n, lst))\n```", "\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x*n, lst))\n```"], "num_tokens": [24, 23, 24, 24, 24, 23, 23, 23, 23, 23]}
{"item": {"task_id": 866, "text": "Write a function to check whether the given month name contains 31 days or not.", "code": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False", "test_list": ["assert check_monthnumb(\"February\")==False", "assert check_monthnumb(\"January\")==True", "assert check_monthnumb(\"March\")==True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_monthnumb(month):\n    return [1, 3, 5, 7, 8, 10, 12].__contains__(int(month[-1]))\n```", "\ndef check_monthnumb(month):\n    months_with_31_days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in months_with_31_days\n```", "\ndef check_monthnumb(month):\n    months = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in months\n```", "\ndef check_monthnumb(month):\n    month_dict = {\"January\":31,\"February\":28,\"March\":31,\"April\":30,\"May\":31,\"June\":30,\"July\":31,\"August\":31,\"September\":30,\"October\":31,\"November\":30,\"December\":31}\n    return month_dict.get(month,0) >= 31\n```", "\ndef check_monthnumb(month):\n    month_dict = {1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n    return month_dict.get(int(month.split()[0]), False) == 31\n```", "\ndef check_monthnumb(month):\n    month_days = {\"January\":31,\"February\":28,\"March\":31,\"April\":30,\"May\":31,\"June\":30,\"July\":31,\"August\":31,\"September\":30,\"October\":31,\"November\":30,\"December\":31}\n    return month_days.get(month.capitalize(),0)!= 28\n```", "\ndef check_monthnumb(month_name):\n    months_with_31_days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month_name in months_with_31_days\n```", "\ndef check_monthnumb(month):\n    month_dict = {\"January\":31,\"March\":31,\"May\":31,\"July\":31,\"August\":31,\"October\":31,\"December\":31}\n    return month in month_dict and month_dict[month] == 31\n```", "\ndef check_monthnumb(month):\n    months31 = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    return month in months31\n```", "\ndef check_monthnumb(month):\n    return month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n```"], "num_tokens": [41, 48, 40, 76, 80, 76, 50, 59, 42, 35]}
{"item": {"task_id": 867, "text": "Write a python function to add a minimum number such that the sum of array becomes even.", "code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "test_list": ["assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1", "assert min_Num([1,2,3,4,5,6,7,8],8) == 2", "assert min_Num([1,2,3],3) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_Num(arr, target):\n    return 2 - (sum(arr) % 2) if sum(arr) % 2 else 1\n```", "\ndef min_Num(lst, target):\n    return 1 if sum(lst) % 2!= target % 2 else 0\n```", "\ndef min_Num(arr, target):\n    return 1 if sum(arr) % 2!= target % 2 else 0\n```", "\ndef min_Num(lst, n):\n    if sum(lst) % 2 == 0:\n        return 0\n    else:\n        return 1\n```", "\ndef min_Num(arr, n):\n    return n - sum(arr) % 2\n```", "\ndef min_Num(arr, n):\n    return n - sum(arr) % 2\n```", "\ndef min_Num(arr, target):\n    return target - sum(arr) % 2\n```", "\ndef min_Num(arr, n):\n    total = sum(arr)\n    return n - (total % 2)\n```", "\ndef min_Num(lst, target):\n    return 2 - sum(lst) % 2 if sum(lst) % 2!= 0 else 0\n```", "\ndef min_Num(arr, k):\n    return k - sum(arr) % 2\n```"], "num_tokens": [34, 30, 30, 35, 21, 21, 21, 26, 35, 21]}
{"item": {"task_id": 868, "text": "Write a python function to find the length of the last word in a given string.", "code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "test_list": ["assert length_Of_Last_Word(\"python language\") == 8", "assert length_Of_Last_Word(\"PHP\") == 3", "assert length_Of_Last_Word(\"\") == 0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1]) if s else 0", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1]) if s else 0", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1]) if s else 0", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1])\n```", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1])", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1])", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1]) if s else 0", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1]) if s else 0", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1])\n```", "\ndef length_Of_Last_Word(s):\n    return len(s.split()[-1])"], "num_tokens": [23, 23, 23, 19, 18, 18, 23, 23, 19, 18]}
{"item": {"task_id": 869, "text": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "code": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "test_list": ["assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]", "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]", "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_list_range(list_of_lists, start, end):\n    return [sublist for sublist in list_of_lists if not all(start <= x <= end for x in sublist)]\n```", "\ndef remove_list_range(list_of_lists, start, end):\n    return [sublist for sublist in list_of_lists if not all(start <= x <= end for x in sublist)]\n```", "\ndef remove_list_range(list_of_lists, start, end):\n    return [sublist for sublist in list_of_lists if not all(start <= num <= end for num in sublist)]\n```", "\ndef remove_list_range(list_of_lists, start, end):\n    return [sublist for sublist in list_of_lists if not start <= min(sublist) <= end]\n```", "\ndef remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if not start <= min(sublist) or end < min(sublist)]\n```", "\ndef remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if not set(sublist).issubset(range(start, end+1))]\n```", "\ndef remove_list_range(list_of_lists, start, end):\n    return [sublist for sublist in list_of_lists if not all(start <= x <= end for x in sublist)]\n```", "\ndef remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if not all(start <= x <= end for x in sublist)]\n```", "\ndef remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if not start <= min(sublist) <= end]\n```", "\ndef remove_list_range(lst, start, end):\n    return [sublist for sublist in lst if not all(i < start or i > end for i in sublist)]\n```"], "num_tokens": [39, 39, 39, 37, 37, 38, 39, 35, 33, 37]}
{"item": {"task_id": 870, "text": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "code": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)", "test_list": ["assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48", "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50", "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nsum_positivenum = lambda lst: sum(i for i in lst if i > 0)", "\nsum_positivenum = lambda lst: sum(i for i in lst if i > 0)", "\nsum_positivenum = lambda lst: sum(filter(lambda x: x > 0, lst))\n```", "\nsum_positivenum = lambda lst: sum(i for i in lst if i > 0)\n```", "\nsum_positivenum = lambda lst: sum(filter(lambda x: x > 0, lst))\n```", "\nsum_positivenum = lambda lst: sum(i for i in lst if i > 0)", "\nsum_positivenum = lambda lst: sum(i for i in lst if i > 0)\n```", "\nsum_positivenum = lambda lst: sum(i for i in lst if i > 0)", "\nsum_positivenum = lambda lst: sum(i for i in lst if i > 0)\n```", "\nsum_positivenum = lambda lst: sum(filter(lambda x: x > 0, lst))\n```"], "num_tokens": [23, 23, 24, 24, 24, 23, 24, 23, 24, 24]}
{"item": {"task_id": 871, "text": "Write a python function to check whether the given strings are rotations of each other or not.", "code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "test_list": ["assert are_Rotations(\"abc\",\"cba\") == False", "assert are_Rotations(\"abcd\",\"cdba\") == False", "assert are_Rotations(\"abacd\",\"cdaba\") == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef are_Rotations(s1, s2):\n    return s2 in s1 + s1\n```", "\ndef are_Rotations(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    return s2 in s1 + s1\n```", "\ndef are_Rotations(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    return s2 in s1 + s1\n```", "\ndef are_Rotations(str1, str2):\n    return str1 in str2 + str2\n```", "\ndef are_Rotations(str1, str2):\n    if len(str1)!= len(str2):\n        return False\n    return str1 in str2 + str2\n```", "\ndef are_Rotations(s1, s2):\n    return s2 in s1 + s1\n```", "\ndef are_Rotations(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    return s2 in s1 + s1\n```", "\ndef are_Rotations(str1, str2):\n    return str1 in str2 + str2\n```", "\ndef are_Rotations(s1, s2):\n    return s1 + s1 == s2 or s1 == s2 + s2\n```", "\ndef are_Rotations(str1, str2):\n    if len(str1)!= len(str2):\n        return False\n    return str1 + str1 in str2 + str2\n```"], "num_tokens": [25, 39, 39, 25, 39, 25, 39, 25, 34, 42]}
{"item": {"task_id": 872, "text": "Write a function to check if a nested list is a subset of another nested list.", "code": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "test_list": ["assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True", "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True", "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_subset(list1, list2):\n    for sublist in list2:\n        if not any(set(sub) <= set(sublist) for sublist in list1):\n            return False\n    return True\n```", "\ndef check_subset(lst1, lst2):\n    if not isinstance(lst1, list):\n        return lst1 in lst2\n    for i in lst1:\n        if not isinstance(i, list):\n            if i not in lst2:\n                return False\n        else:\n            if not check_subset(i, lst2):\n                return False\n    return True\n```", "\ndef check_subset(list1, list2):\n    for item in list2:\n        if not any(all(x in y for x in item) for y in list1):\n            return False\n    return True\n```", "\ndef check_subset(list1, list2):\n    for sub_list in list2:\n        if not any(set(sub) <= set(sub_set) for sub_set in list1):\n            return False\n    return True\n```", "\ndef check_subset(lst1, lst2):\n    for sublist in lst2:\n        if not any(all(x in sublist for x in sub) for sub in lst1):\n            return False\n    return True\n```", "\ndef check_subset(nested_list1, nested_list2):\n    def is_subset(sublist1, sublist2):\n        for elem in sublist1:\n            if not any(set(elem).issubset(set(sub)) for sub in sublist2):\n                return False\n        return True\n\n    return is_subset(nested_list1, nested_list2)\n```", "\ndef check_subset(lst1, lst2):\n    for elem in lst2:\n        if not any(set(subset).issubset(set(sub)) for sub in lst1 for sub in [elem]):\n            return False\n    return True\n```", "\ndef check_subset(nested_list1, nested_list2):\n    for sublist in nested_list2:\n        if not any(all(i in j for i in sublist) for j in nested_list1):\n            return False\n    return True\n```", "\ndef check_subset(lst1, lst2):\n    def is_subset(sub, sup):\n        if not sub:\n            return True\n        if not sup:\n            return False\n        if sub[0] == sup[0]:\n            return is_subset(sub[1:], sup[1:])\n        return is_subset(sub, [x for x in sup if x > sub[0]])\n    return all(is_subset(sub, lst2) for sub in lst1)\n```", "\ndef check_subset(list1, list2):\n    for sublist in list2:\n        if not all(sorted(sublist) == sorted(subset) for subset in list1):\n            return False\n    return True\n```"], "num_tokens": [45, 77, 46, 47, 46, 73, 52, 51, 96, 46]}
{"item": {"task_id": 873, "text": "Write a function to solve the fibonacci sequence using recursion.", "code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "test_list": ["assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n```", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "\ndef fibonacci(n):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n```", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n```", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n```", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n```", "\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"], "num_tokens": [31, 30, 63, 30, 31, 31, 30, 31, 31, 30]}
{"item": {"task_id": 874, "text": "Write a python function to check if the string is a concatenation of another string.", "code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "test_list": ["assert check_Concat(\"abcabcabc\",\"abc\") == True", "assert check_Concat(\"abcab\",\"abc\") == False", "assert check_Concat(\"aba\",\"ab\") == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_Concat(s, t):\n    return s.replace(t, '') == ''\n```", "\ndef check_Concat(s, sub):\n    while len(s) >= len(sub):\n        if s[:len(sub)] == sub:\n            s = s[len(sub):]\n        else:\n            return False\n    return True\n```", "\ndef check_Concat(s, t):\n    return s.replace(t, \"\") == \"\"\n```", "\ndef check_Concat(s, concat_str):\n    if len(s) % len(concat_str)!= 0:\n        return False\n    for i in range(0, len(s), len(concat_str)):\n        if s[i:i+len(concat_str)]!= concat_str:\n            return False\n    return True\n```", "\ndef check_Concat(s, t):\n    return s.replace(t, \"\") == \"\" if len(t)!= 0 else True\n```", "\ndef check_Concat(s, sub):\n    return s.replace(sub, \"\") == \"\"\n```", "\ndef check_Concat(s, sub):\n    return s == (sub * (len(s) // len(sub))) + sub[:len(s) % len(sub)]\n```", "\ndef check_Concat(s, sub):\n    return s.replace(sub, \"\") == \"\"\n```", "\ndef check_Concat(s, t):\n    return s.replace(t, \"\") == \"\"\n```", "\ndef check_Concat(s, sub):\n    return s.replace(sub, \"\") == \"\"\n```"], "num_tokens": [20, 49, 20, 65, 29, 20, 36, 20, 20, 20]}
{"item": {"task_id": 875, "text": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "code": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "test_list": ["assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1", "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2", "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```", "\ndef min_difference(tuples):\n    return min(abs(t1 - t2) for t1, t2 in [tuples[i:] + tuples[:i] for i in range(len(tuples))])\n```", "\ndef min_difference(tuples):\n    return min(abs(a - b) for a, b in tuples)\n```"], "num_tokens": [24, 24, 24, 24, 24, 24, 24, 24, 45, 24]}
{"item": {"task_id": 876, "text": "Write a python function to find lcm of two positive integers.", "code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "test_list": ["assert lcm(4,6) == 12", "assert lcm(15,17) == 255", "assert lcm(2,6) == 6"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n```", "\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n```", "\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)"], "num_tokens": [44, 44, 44, 44, 45, 44, 44, 46, 44, 46]}
{"item": {"task_id": 877, "text": "Write a python function to sort the given string.", "code": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ", "test_list": ["assert sort_String(\"cba\") == \"abc\"", "assert sort_String(\"data\") == \"aadt\"", "assert sort_String(\"zxy\") == \"xyz\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```", "\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```", "\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```", "\ndef sort_String(s):\n    return \"\".join(sorted(s))", "\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```", "\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```", "\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```", "\ndef sort_String(s):\n    return ''.join(sorted(s))\n```", "\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```", "\ndef sort_String(s):\n    return \"\".join(sorted(s))\n```"], "num_tokens": [15, 15, 15, 14, 15, 15, 15, 15, 15, 15]}
{"item": {"task_id": 878, "text": "Write a function to check if the given tuple contains only k elements.", "code": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ", "test_list": ["assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True", "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True", "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_tuples(t, k):\n    return len(set(t)) == len(k)\n```", "\ndef check_tuples(tup, k):\n    return len(set(tup)) == len(k)\n```", "\ndef check_tuples(tup, elements):\n    return set(tup) == set(elements)\n```", "\ndef check_tuples(t, k):\n    return all(t.count(i) == k.count(i) for i in set(k))\n```", "\ndef check_tuples(tup, elements):\n    return set(tup) == set(elements)\n```", "\ndef check_tuples(t, k):\n    return set(t) == set(k)\n```", "\ndef check_tuples(t, k):\n    return set(k) == set(t) and len(k) == len(set(t))\n```", "\ndef check_tuples(t, k):\n    return len(set(t)) == len(k)\n```", "\ndef check_tuples(t, k):\n    return set(t) == set(k)\n```", "\ndef check_tuples(t, k):\n    return all(t.count(i) == k.count(i) for i in set(k))\n```"], "num_tokens": [20, 22, 21, 28, 21, 19, 28, 20, 19, 28]}
{"item": {"task_id": 879, "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "code": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "test_list": ["assert text_match(\"aabbbbd\") == 'Not matched!'", "assert text_match(\"aabAbbbc\") == 'Not matched!'", "assert text_match(\"accddbbjjjb\") == 'Found a match!'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef text_match(s):\n    if re.match(r'^a.*b$', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_match(text):\n    if re.match(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile(r'a.*?b')\n    if pattern.fullmatch(s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    if re.match(r'ab.*b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    if re.match(r'a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    pattern = r'^a.*?b$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    if re.match(r'ab.*?b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    if re.match(r'ab.*b', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile(r'ab.*b')\n    if pattern.search(s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"], "num_tokens": [38, 39, 45, 39, 38, 46, 45, 40, 38, 44]}
{"item": {"task_id": 880, "text": "Write a python function to find number of solutions in quadratic equation.", "code": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ", "test_list": ["assert Check_Solution(2,5,2) == \"2 solutions\"", "assert Check_Solution(1,1,1) == \"No solutions\"", "assert Check_Solution(1,2,1) == \"1 solution\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D > 0:\n        return \"2 solutions\"\n    elif D == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n```", "\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return \"2 solutions\"\n    elif d == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n```", "\ndef Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"", "\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return \"2 solutions\"\n    elif d == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D > 0:\n        return \"2 solutions\"\n    elif D == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D > 0:\n        return \"2 solutions\"\n    elif D == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n```", "\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return \"2 solutions\"\n    elif d == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"", "\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D > 0:\n        return \"2 solutions\"\n    elif D == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"", "\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return \"2 solutions\"\n    elif d == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n```", "\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return \"2 solutions\"\n    elif d == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\""], "num_tokens": [60, 60, 62, 59, 59, 60, 59, 59, 60, 59]}
{"item": {"task_id": 881, "text": "Write a function to find the sum of first even and odd number of a given list.", "code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "test_list": ["assert sum_even_odd([1,3,5,7,4,1,6,8])==5", "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3", "assert sum_even_odd([1,5,7,9,10])==11"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_even_odd(lst):\n    even_sum = sum(x for x in lst if x % 2 == 0)\n    odd_sum = sum(x for x in lst if x % 2!= 0)\n    return even_sum + odd_sum\n```", "\ndef sum_even_odd(lst):\n    even_sum = sum(num for num in lst if num % 2 == 0)\n    odd_sum = sum(num for num in lst if num % 2!= 0)\n    return even_sum + 1 if even_sum > odd_sum else odd_sum + 1\n```", "\ndef sum_even_odd(lst):\n    return sum([i for i in lst if i % 2==0][0] + [i for i in lst if i % 2!= 0][0])\n```", "\ndef sum_even_odd(lst):\n    return sum([x for x in lst if x % 2 == 0]) + sum([x for x in lst if x % 2!= 0])\n```", "\ndef sum_even_odd(lst):\n    even_sum = sum(x for x in lst if x % 2 == 0)\n    odd_sum = sum(x for x in lst if x % 2!= 0)\n    return even_sum + odd_sum\n```", "\ndef sum_even_odd(lst):\n    return sum(i for i in lst if i % 2 == 0) + sum(i for i in lst if i % 2!= 0)\n```", "\ndef sum_even_odd(lst):\n    return sum(i for i in lst if i % 2 == 0) + sum(i for i in lst if i % 2!= 0)\n```", "\ndef sum_even_odd(lst):\n    return sum([i for i in lst if i % 2 == 0][0]) + sum([i for i in lst if i % 2!= 0][0])\n```", "\ndef sum_even_odd(lst):\n    even_sum = sum(num for num in lst if num % 2 == 0)\n    odd_sum = sum(num for num in lst if num % 2!= 0)\n    return even_sum + odd_sum\n```", "\ndef sum_even_odd(lst):\n    return sum([x for x in lst if x % 2 == 0][0] + [x for x in lst if x % 2!= 0][0])\n```"], "num_tokens": [55, 67, 46, 44, 55, 42, 42, 48, 55, 47]}
{"item": {"task_id": 882, "text": "Write a function to caluclate perimeter of a parallelogram.", "code": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter", "test_list": ["assert parallelogram_perimeter(10,20)==400", "assert parallelogram_perimeter(15,20)==600", "assert parallelogram_perimeter(8,9)==144"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef parallelogram_perimeter(base, height):\n    return 2 * (base + height)\n```", "\ndef parallelogram_perimeter(a, b):\n    return 2*(a+b)", "\ndef parallelogram_perimeter(base, height):\n    return 2 * (base + height)\n```", "\ndef parallelogram_perimeter(base, height):\n    return 2*(base + height)", "\ndef parallelogram_perimeter(a, b):\n    return 2*(a+b)\n```", "\ndef parallelogram_perimeter(base, height):\n    return 2 * (base + height)\n```", "\ndef parallelogram_perimeter(base, height):\n    return 2 * (base + height)\n```", "\ndef parallelogram_perimeter(a, b):\n    return 2*(a+b)", "\ndef parallelogram_perimeter(base, height):\n    return 2*(base + height)", "\ndef parallelogram_perimeter(a, b):\n    return 2*(a+b)\n```"], "num_tokens": [23, 20, 23, 21, 21, 23, 23, 20, 21, 21]}
{"item": {"task_id": 883, "text": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "test_list": ["assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]", "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]", "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x%m==0 and x%n==0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x%m==0 and x%n==0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: [num for num in lst if num % m == 0 and num % n == 0]\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst,m,n: list(filter(lambda x: x%m==0 and x%n==0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x%m==0 and x%n==0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n```", "\ndiv_of_nums = lambda lst, m, n: [num for num in lst if num % m == 0 and num % n == 0]\n```"], "num_tokens": [31, 31, 35, 35, 35, 35, 29, 31, 35, 35]}
{"item": {"task_id": 884, "text": "Write a python function to check whether all the bits are within a given range or not.", "code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "test_list": ["assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ", "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False", "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all(start <= bin(n)[2:].count('1') <= end)\n```", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all((n & (1 << i)) for i in range(start-1, end))", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    bin_n = bin(n)[2:]\n    return all(start <= int(i) for i in bin_n) and all(int(i) <= end for i in bin_n)\n```", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all(start <= n % (2 ** i) < end for i in range(start.bit_length(), end.bit_length() + 1))\n```", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all(start <= bin(n).count('1') <= end)\n```", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all(start <= bin(n).count('1') <= end)\n```", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all((n & (1 << i))!= 0 for i in range(start-1, end))\n```", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all((n >> i) & 1 for i in range(start-1, end))", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all(start <= bin(n).count('1') <= end)\n```", "\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    return all(start <= bin(n).count('1') <= end)\n```"], "num_tokens": [38, 41, 57, 51, 36, 36, 45, 41, 36, 36]}
{"item": {"task_id": 885, "text": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "test_list": ["assert is_Isomorphic(\"paper\",\"title\") == True", "assert is_Isomorphic(\"ab\",\"ba\") == True", "assert is_Isomorphic(\"ab\",\"aa\") == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    for i in range(len(s1)):\n        if s1[i] in s1_dict:\n            if s1_dict[s1[i]]!= s2[i]:\n                return False\n        else:\n            if s2[i] in s1_dict.values():\n                return False\n            s1_dict[s1[i]] = s2[i]\n    return True\n```", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    m = {}\n    for i in range(len(s1)):\n        if s1[i] in m:\n            if m[s1[i]]!= s2[i]:\n                return False\n        else:\n            if s2[i] in m.values():\n                return False\n            m[s1[i]] = s2[i]\n    return True", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    s1_to_s2 = {}\n    s2_to_s1 = {}\n    for c1, c2 in zip(s1, s2):\n        if c1 not in s1_to_s2 and c2 not in s2_to_s1:\n            s1_to_s2[c1] = c2\n            s2_to_s1[c2] = c1\n        elif s1_to_s2.get(c1)!= c2 or s2_to_s1.get(c2)!= c1:\n            return False\n    return True", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    s1_to_s2 = {}\n    s2_to_s1 = {}\n    for c1, c2 in zip(s1, s2):\n        if c1 in s1_to_s2 and s1_to_s2[c1]!= c2:\n            return False\n        if c2 in s2_to_s1 and s2_to_s1[c2]!= c1:\n            return False\n        s1_to_s2[c1] = c2\n        s2_to_s1[c2] = c1\n    return True", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    d1, d2 = {}, {}\n    for c1, c2 in zip(s1, s2):\n        if c1 in d1 and d1[c1]!= c2:\n            return False\n        if c2 in d2 and d2[c2]!= c1:\n            return False\n        d1[c1] = c2\n        d2[c2] = c1\n    return True", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    d1, d2 = {}, {}\n    for c1, c2 in zip(s1, s2):\n        if c1 not in d1 and c2 not in d2:\n            d1[c1] = c2\n            d2[c2] = c1\n        elif d1.get(c1)!= c2 or d2.get(c2)!= c1:\n            return False\n    return True", "\ndef is_Isomorphic(s1, s2):\n    return len(set(zip(s1, s2))) == len(set(s1)) and len(set(zip(s1, s2))) == len(set(s2))\n```", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    mapping = {}\n    for c1, c2 in zip(s1, s2):\n        if c1 in mapping:\n            if mapping[c1]!= c2:\n                return False\n        else:\n            if c2 in mapping.values():\n                return False\n            mapping[c1] = c2\n    return True", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    mapping = {}\n    for c1, c2 in zip(s1, s2):\n        if c1 in mapping and mapping[c1]!= c2:\n            return False\n        if c2 in mapping.values():\n            return False\n        mapping[c1] = c2\n    return True", "\ndef is_Isomorphic(s1, s2):\n    if len(s1)!= len(s2):\n        return False\n    map1 = {}\n    map2 = {}\n    for c1, c2 in zip(s1, s2):\n        if (c1 in map1 and map1[c1]!= c2) or (c2 in map2 and map2[c2]!= c1):\n            return False\n        map1[c1] = c2\n        map2[c2] = c1\n    return True"], "num_tokens": [107, 95, 138, 138, 113, 113, 46, 92, 87, 111]}
{"item": {"task_id": 886, "text": "Write a function to add all the numbers in a list and divide it with the length of the list.", "code": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "test_list": ["assert sum_num((8, 2, 3, 0, 7))==4.0", "assert sum_num((-10,-20,-30))==-20.0", "assert sum_num((19,15,18))==17.333333333333332"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_num(lst):\n    return sum(lst) / len(lst)\n```", "\ndef sum_num(numbers):\n    return sum(numbers) / len(numbers)\n```", "\ndef sum_num(lst):\n    return sum(lst) / len(lst)\n```", "\ndef sum_num(lst):\n    return sum(lst) / len(lst) if lst else None\n```", "\ndef sum_num(numbers):\n    return sum(numbers) / len(numbers)\n```", "\ndef sum_num(lst):\n    return sum(lst) / len(lst)\n```", "\ndef sum_num(numbers):\n    return sum(numbers) / len(numbers)\n```", "\ndef sum_num(numbers):\n    return sum(numbers) / len(numbers)\n```", "\ndef sum_num(lst):\n    return sum(lst) / len(lst) if lst else 0\n```", "\ndef sum_num(numbers):\n    return sum(numbers) / len(numbers)\n```"], "num_tokens": [17, 17, 17, 22, 17, 17, 17, 17, 23, 17]}
{"item": {"task_id": 887, "text": "Write a python function to check whether the given number is odd or not using bitwise operator.", "code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "test_list": ["assert is_odd(5) == True", "assert is_odd(6) == False", "assert is_odd(7) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_odd(n):\n    return n & 1\n```", "\ndef is_odd(n):\n    return n & 1\n```", "\ndef is_odd(n):\n    return n & 1", "\ndef is_odd(n):\n    return n & 1\n```", "\ndef is_odd(n):\n    return n & 1", "\ndef is_odd(n):\n    return n & 1!= 0\n```", "\ndef is_odd(n):\n    return n & 1\n```", "\ndef is_odd(n):\n    return n & 1\n```", "\ndef is_odd(n):\n    return n & 1!= 0\n```", "\ndef is_odd(n):\n    return n & 1!= 0"], "num_tokens": [15, 15, 13, 15, 13, 18, 15, 15, 18, 16]}
{"item": {"task_id": 888, "text": "Write a function to substract the elements of the given nested tuples.", "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test_list": ["assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))", "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))", "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef substract_elements(tuples1, tuples2):\n    return tuple(map(lambda x, y: (x[0] - y[0], x[1] - y[1]), tuples1, tuples2))\n```", "\ndef substract_elements(tuples1, tuples2):\n    return tuple((a - b for a, b in zip(tuples1, tuples2)))\n```", "\ndef substract_elements(t1, t2):\n    result = []\n    for i, j in zip(t1, t2):\n        result.append((i[0] - j[0], i[1] - j[1]))\n    return tuple(result)\n```", "\ndef substract_elements(t1, t2):\n    return tuple((a - b for a, b in zip(t1, t2)))\n```", "\ndef substract_elements(tuples1, tuples2):\n    result = []\n    for t1, t2 in zip(tuples1, tuples2):\n        result.append(tuple(x - y for x, y in zip(t1, t2)))\n    return tuple(result)\n```", "\ndef substract_elements(tuples1, tuples2):\n    result = []\n    for t1, t2 in zip(tuples1, tuples2):\n        result.append((t1[0] - t2[0], t1[1] - t2[1]))\n    return tuple(result)\n```", "\ndef substract_elements(t1, t2):\n    return tuple(tuple(x - y for x, y in zip(t1_i, t2_i)) for t1_i, t2_i in zip(t1, t2))\n```", "\ndef substract_elements(tuples1, tuples2):\n    result = []\n    for t1, t2 in zip(tuples1, tuples2):\n        result.append((t1[0]-t2[0], t1[1]-t2[1]))\n    return result\n```", "\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: (x[0]-y[0], x[1]-y[1]), t1, t2))\n```", "\ndef substract_elements(t1, t2):\n    return tuple(tuple(x - y for x, y in zip(t1_i, t2_i)) for t1_i, t2_i in zip(t1, t2))\n```"], "num_tokens": [48, 34, 57, 32, 58, 65, 50, 62, 45, 50]}
{"item": {"task_id": 889, "text": "Write a function to reverse each list in a given list of lists.", "code": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ", "test_list": ["assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]", "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]", "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef reverse_list_lists(lists):\n    return [i[::-1] for i in lists]\n```", "\ndef reverse_list_lists(lst):\n    return [i[::-1] for i in lst]", "\ndef reverse_list_lists(list_of_lists):\n    return [i[::-1] for i in list_of_lists]\n```", "\ndef reverse_list_lists(lst):\n    return [i[::-1] for i in lst]\n```", "\ndef reverse_list_lists(lst):\n    return [i[::-1] for i in lst]\n```", "\ndef reverse_list_lists(list_of_lists):\n    return [l[::-1] for l in list_of_lists]\n```", "\ndef reverse_list_lists(list_of_lists):\n    return [i[::-1] for i in list_of_lists]\n```", "\ndef reverse_list_lists(lists):\n    return [list(reversed(i)) for i in lists]\n```", "\ndef reverse_list_lists(lst):\n    return [i[::-1] for i in lst]\n```", "\ndef reverse_list_lists(lst):\n    return [i[::-1] for i in lst]\n```"], "num_tokens": [22, 20, 25, 21, 21, 25, 25, 23, 21, 21]}
{"item": {"task_id": 890, "text": "Write a python function to find the index of an extra element present in one sorted array.", "code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "test_list": ["assert find_Extra([1,2,3,4],[1,2,3],3) == 3", "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4", "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_Extra(arr1, arr2):\n    for i in arr2:\n        if arr1.count(i) > arr2.count(i):\n            return i\n```", "\ndef find_Extra(arr1, arr2):\n    i = 0\n    while i < len(arr1) and i < len(arr2):\n        if arr1[i]!= arr2[i]:\n            return arr1[i]\n        i += 1\n    return arr1[i]\n```", "\ndef find_Extra(arr1, arr2):\n    for i in set(arr1) - set(arr2):\n        return i\n```", "\ndef find_Extra(arr1, arr2):\n    for i in range(len(arr1)):\n        if arr1[i] not in arr2:\n            return arr1[i]\n```", "\ndef find_Extra(arr1, arr2):\n    i = 0\n    while i < len(arr1) and i < len(arr2):\n        if arr1[i]!= arr2[i]:\n            return arr1[i]\n        i += 1\n    return arr1[i]\n```", "\ndef find_Extra(arr1, arr2):\n    for num in arr2:\n        if arr1.count(num) > arr2.count(num):\n            return num\n```", "\ndef find_Extra(arr1, arr2):\n    for i in arr2:\n        if arr1.count(i) > 1:\n            return i\n```", "\ndef find_Extra(arr1, arr2):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return arr1[i]\n```", "\ndef find_Extra(arr1, arr2):\n    for i in set(arr1) - set(arr2):\n        return i\n```", "\ndef find_Extra(arr1, arr2):\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            if arr2.count(arr1[i]) > 1:\n                return arr1[i]\n    return None\n```"], "num_tokens": [37, 62, 30, 39, 62, 37, 35, 85, 30, 55]}
{"item": {"task_id": 891, "text": "Write a python function to check whether the given two numbers have same number of digits or not.", "code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "test_list": ["assert same_Length(12,1) == False", "assert same_Length(2,2) == True", "assert same_Length(10,20) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(num1, num2):\n    return len(str(num1)) == len(str(num2))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```", "\ndef same_Length(a, b):\n    return len(str(a)) == len(str(b))\n```"], "num_tokens": [21, 21, 21, 21, 21, 25, 21, 21, 21, 21]}
{"item": {"task_id": 892, "text": "Write a function to remove multiple spaces in a string.", "code": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))", "test_list": ["assert remove_spaces('python  program')==('python program')", "assert remove_spaces('python   programming    language')==('python programming language')", "assert remove_spaces('python                     program')==('python program')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())", "\ndef remove_spaces(s):\n    return''.join(s.split())"], "num_tokens": [14, 14, 14, 14, 14, 14, 14, 14, 14, 14]}
{"item": {"task_id": 893, "text": "Write a python function to get the last element of each sublist.", "code": "def Extract(lst): \r\n    return [item[-1] for item in lst] ", "test_list": ["assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]", "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']", "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Extract(list_of_lists):\n    return [sublist[-1] for sublist in list_of_lists]", "\ndef Extract(lst):\n    return [sublist[-1] for sublist in lst]\n```", "\ndef Extract(sublists):\n    return [sublist[-1] for sublist in sublists]", "\ndef Extract(sublists):\n    return [sublist[-1] for sublist in sublists]", "\ndef Extract(lst):\n    return [sublist[-1] for sublist in lst]", "\ndef Extract(lst):\n    return [sublist[-1] for sublist in lst]", "\ndef Extract(lst):\n    return [sublist[-1] for sublist in lst]", "\ndef Extract(lst):\n    return [sublist[-1] for sublist in lst]", "\ndef Extract(lst):\n    return [sublist[-1] for sublist in lst]\n```", "\ndef Extract(sublists):\n    return [sublist[-1] for sublist in sublists]"], "num_tokens": [23, 20, 21, 21, 19, 19, 19, 19, 20, 21]}
{"item": {"task_id": 894, "text": "Write a function to convert the given string of float type into tuple.", "code": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ", "test_list": ["assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)", "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)", "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))\n```", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))\n```", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))\n```", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))\n```", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))\n```", "\ndef float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))\n```"], "num_tokens": [20, 19, 20, 20, 19, 20, 19, 19, 20, 20]}
{"item": {"task_id": 895, "text": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "code": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]", "test_list": ["assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26", "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28", "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n\n    incl = 0\n    excl = 0\n\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n    incl = excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n    incl = excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n    incl = excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n    incl = excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n    incl = excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```", "\ndef max_sum_subseq(arr):\n    if not arr:\n        return 0\n\n    incl = excl = 0\n\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n\n    return max(incl, excl)\n```"], "num_tokens": [71, 67, 71, 67, 67, 71, 67, 61, 67, 67]}
{"item": {"task_id": 896, "text": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "code": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)", "test_list": ["assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ", "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ", "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])\n```", "\ndef sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n```", "\ndef sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])\n```", "\ndef sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])\n```", "\ndef sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n```", "\ndef sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])\n```", "\ndef sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n```", "\ndef sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])\n```", "\ndef sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n```", "\ndef sort_list_last(lst):\n    return sorted(lst, key=lambda x: x[-1])\n```"], "num_tokens": [26, 24, 22, 22, 24, 22, 24, 22, 24, 22]}
{"item": {"task_id": 897, "text": "Write a python function to check whether the word is present in a given sentence or not.", "code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "test_list": ["assert is_Word_Present(\"machine learning\",\"machine\") == True", "assert is_Word_Present(\"easy\",\"fun\") == False", "assert is_Word_Present(\"python language\",\"code\") == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()", "\ndef is_Word_Present(sentence, word):\n    return word in sentence\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()\n```", "\ndef is_Word_Present(sentence, word):\n    return word in sentence.split()"], "num_tokens": [19, 18, 18, 18, 19, 19, 19, 19, 19, 18]}
{"item": {"task_id": 898, "text": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "code": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result", "test_list": ["assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]", "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]", "assert extract_elements([0,0,0,0,0],5)==[0]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef extract_elements(lst, n):\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n])) == 1:\n            return lst[i:i+n]\n    return []\n```", "\ndef extract_elements(lst, n):\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n])) == 1:\n            return lst[i:i+n]\n    return []\n```", "\ndef extract_elements(lst, n):\n    result = []\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n])) == 1:\n            result = lst[i:i+n]\n            break\n    return result\n```", "\ndef extract_elements(lst, n):\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n])) == 1:\n            return lst[i:i+n]\n    return []\n```", "\ndef extract_elements(lst, n):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        if count > n:\n            i += 1\n        else:\n            result.extend([lst[i]] * count)\n            i += 1\n    return result\n```", "\ndef extract_elements(lst, n):\n    if not lst or n == 0:\n        return []\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            if count == n:\n                result.append(lst[i-1])\n                break\n            count = 1\n    if count == n:\n        result.append(lst[-1])\n    return result\n```", "\ndef extract_elements(lst, n):\n    for i in range(len(lst)):\n        if len([x for x in lst[i:i+n] if lst[i+n-1] == x]) == n:\n            return lst[i:i+n]\n    return []", "\ndef extract_elements(lst, n):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        if count > 1 and len(result) < n:\n            result.append(lst[i])\n        i += 1\n    return result\n```", "\ndef extract_elements(lst, n):\n    if n > len(lst):\n        return []\n    for i in range(len(lst) - n + 1):\n        if lst[i] == lst[i+n-1]:\n            return lst[i:i+n]\n    return []\n```", "\ndef extract_elements(lst, n):\n    result = []\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n])) == 1:\n            result = lst[i:i+n]\n            break\n    return result\n```"], "num_tokens": [47, 47, 56, 47, 100, 104, 53, 94, 56, 56]}
{"item": {"task_id": 899, "text": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "code": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True", "test_list": ["assert check([3,2,1,2,3,4],6) == True", "assert check([2,1,4,5,1],5) == True", "assert check([1,2,2,1,2,3],6) == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check(arr, k):\n    arr.sort()\n    return arr[0] + arr[-1] == k or arr[1] + arr[-2] == k\n```", "\ndef check(arr, k):\n    arr.sort()\n    return arr[0] + arr[-1] == k\n```", "\ndef check(arr, k):\n    arr.sort()\n    return arr[0] + arr[-1] == k\n```", "\ndef check(arr, k):\n    return sum(arr[0:k:2]) == sum(arr[1:k+1:2])\n```", "\ndef check(arr, k):\n    arr.sort()\n    return arr[0] + arr[-1] == k\n```", "\ndef check(arr, k):\n    arr.sort()\n    return arr[0] + arr[-1] == k\n```", "\ndef check(arr, n):\n    arr.sort()\n    return all(arr[i] == arr[i+1] for i in range(0,n,2)) or all(arr[i] == arr[i+1] for i in range(1,n,2))\n```", "\ndef check(arr, k):\n    arr.sort()\n    return arr[0] + arr[-1] == k\n```", "\ndef check(arr, k):\n    arr.sort()\n    return arr[:k].count(arr[0]) + arr[-k:].count(arr[-1]) == len(arr)\n```", "\ndef check(arr, n):\n    arr.sort()\n    return all(arr[:n//2].count(x) == n//2 for x in arr[:n//2]) and all(arr[n//2:].count(x) == n//2 for x in arr[n//2:])\n```"], "num_tokens": [39, 27, 27, 30, 27, 27, 56, 27, 38, 60]}
{"item": {"task_id": 900, "text": "Write a function where a string will start with a specific number.", "code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "test_list": ["assert match_num('5-2345861')==True", "assert match_num('6-2345861')==False", "assert match_num('78910')==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef match_num(s):\n    return s and s[0].isdigit() and s[1] == '-'\n```", "\ndef match_num(s):\n    return s.startswith('5-')", "\ndef match_num(s):\n    return s.startswith('5-')", "\ndef match_num(s):\n    return s.startswith('5-')", "\ndef match_num(s):\n    return s.startswith('5-')\n```", "\ndef match_num(s):\n    return s.startswith('5-')\n```", "\ndef match_num(s):\n    return s and s[0].isdigit() and s[1] == '-'\n```", "\ndef match_num(s):\n    return s.startswith('5-')\n```", "\ndef match_num(s):\n    return s.startswith('5-')\n```", "\ndef match_num(s):\n    return s and s[0].isdigit() and s[1] == '-'\n```"], "num_tokens": [26, 15, 15, 15, 16, 16, 26, 16, 16, 26]}
{"item": {"task_id": 901, "text": "Write a function to find the smallest multiple of the first n numbers.", "code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "test_list": ["assert smallest_multiple(13)==360360", "assert smallest_multiple(2)==2", "assert smallest_multiple(1)==1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    return reduce(lcm, range(1, n+1), 1)\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = 1\n    for i in range(1, n + 1):\n        result = lcm(result, i)\n    return result\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = 1\n    for i in range(1, n + 1):\n        result = lcm(result, i)\n    return result\n```", "\nimport math\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = 1\n    for i in range(1, n+1):\n        result = result * i // gcd(result, i)\n    return result\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = 1\n    for i in range(1, n+1):\n        result = lcm(result, i)\n    return result\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = 1\n    for i in range(1, n+1):\n        result = lcm(result, i)\n    return result\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    res = 1\n    for i in range(1, n + 1):\n        res = res * i // gcd(res, i)\n    return res\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = 1\n    for i in range(1, n+1):\n        result = lcm(result, i)\n    return result\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = 1\n    for i in range(1, n+1):\n        result = lcm(result, i)\n    return result\n```", "\ndef smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for i in range(1, n + 1):\n        result = lcm(result, i)\n    return result\n```"], "num_tokens": [69, 83, 83, 71, 82, 82, 69, 82, 82, 83]}
{"item": {"task_id": 902, "text": "Write a function to combine two dictionaries by adding values for common keys.", "code": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict", "test_list": ["assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ", "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ", "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef add_dict(dict1, dict2):\n    result = dict1.copy()\n    for key in dict2:\n        if key in result:\n            result[key] += dict2[key]\n        else:\n            result[key] = dict2[key]\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    result = dict1.copy()\n    for key in dict2:\n        if key in result:\n            result[key] += dict2[key]\n        else:\n            result[key] = dict2[key]\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    result = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys())):\n        result[key] = dict1.get(key, 0) + dict2.get(key, 0)\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    result = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys())):\n        result[key] = dict1.get(key, 0) + dict2.get(key, 0)\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    return {k: dict1.get(k, 0) + dict2.get(k, 0) for k in set(dict1) | set(dict2)}\n```", "\ndef add_dict(dict1, dict2):\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    result = dict1.copy()\n    for key in dict2:\n        if key in result:\n            result[key] += dict2[key]\n        else:\n            result[key] = dict2[key]\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    result = dict1.copy()\n    for key in dict2:\n        if key in result:\n            result[key] += dict2[key]\n        else:\n            result[key] = dict2[key]\n    return result\n```", "\ndef add_dict(dict1, dict2):\n    result = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys())):\n        result[key] = dict1.get(key, 0) + dict2.get(key, 0)\n    return result\n```"], "num_tokens": [57, 57, 59, 56, 59, 46, 56, 57, 57, 59]}
{"item": {"task_id": 903, "text": "Write a python function to count the total unset bits from 1 to n.", "code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "test_list": ["assert count_Unset_Bits(2) == 1", "assert count_Unset_Bits(5) == 4", "assert count_Unset_Bits(14) == 17"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('0')\n    return count\n```", "\ndef count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('0')\n    return count", "\ndef count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('0')\n    return count\n```", "\ndef count_Unset_Bits(n):\n    return sum(bin(i).count('0') for i in range(1, n+1))\n```", "\ndef count_Unset_Bits(n):\n    return sum(bin(i).count('0') for i in range(1, n+1))\n```", "\ndef count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('0')\n    return count\n```", "\ndef count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('0')\n    return count\n```", "\ndef count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('0')\n    return count\n```", "\ndef count_Unset_Bits(n):\n    return sum(bin(i).count('0') for i in range(1, n+1))", "\ndef count_Unset_Bits(n):\n    return bin(n).count('0')"], "num_tokens": [43, 41, 44, 32, 32, 44, 43, 43, 31, 19]}
{"item": {"task_id": 904, "text": "Write a function to return true if the given number is even else return false.", "code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "test_list": ["assert even_num(13.5)==False", "assert even_num(0)==True", "assert even_num(-9)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef even_num(n):\n    return n % 2 == 0\n```", "\ndef even_num(n):\n    return n % 2 == 0\n```", "\ndef even_num(n):\n    return n%2==0\n```", "\ndef even_num(n):\n    return n%2==0\n```", "\ndef even_num(n):\n    return n%2==0\n```", "\ndef even_num(n):\n    return isinstance(n, int) and n % 2 == 0\n```", "\ndef even_num(n):\n    return isinstance(n, int) and n % 2 == 0\n```", "\ndef even_num(n):\n    return n%2==0\n```", "\ndef even_num(n):\n    return isinstance(n, int) and n % 2 == 0\n```", "\ndef even_num(n):\n    return n % 2 == 0\n```"], "num_tokens": [18, 18, 16, 16, 16, 24, 24, 16, 24, 18]}
{"item": {"task_id": 905, "text": "Write a python function to find the sum of squares of binomial co-efficients.", "code": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "test_list": ["assert sum_of_square(4) == 70", "assert sum_of_square(5) == 252", "assert sum_of_square(2) == 6"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nfrom math import comb\n\ndef sum_of_square(n):\n    return sum([comb(2*i, i)**2 for i in range(1, n+1)])\n```", "\nfrom math import comb\n\ndef sum_of_square(n):\n    return sum(i**2 * comb(n, i)**2 for i in range(n+1))", "\ndef sum_of_square(n):\n    return sum(i**2 * binom(n, i) for i in range(n+1))\n\nfrom math import comb\nbinom = lambda n, k: comb(n, k)\n```", "\ndef sum_of_square(n):\n    return sum(i**2 * binom(n, i)**2 for i in range(n+1))\n\nfrom math import comb\ndef binom(n, k):\n    return comb(n, k)\n```", "\ndef sum_of_square(n):\n    return sum([binomial_coefficient(i, j)**2 for i in range(n+1) for j in range(i+1)])\n```", "\ndef sum_of_square(n):\n    result = 0\n    for i in range(n+1):\n        result += (binomial_coefficient(n, i)**2)\n    return result\n\ndef binomial_coefficient(n, k):\n    if k > n-k:\n        k = n-k\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n-i+1) // i\n    return result\n```", "\ndef sum_of_square(n):\n    return sum(i**2 * comb(n, i) ** 2 for i in range(n + 1))\n```", "\ndef sum_of_square(n):\n    result = 0\n    for i in range(n + 1):\n        for j in range(i + 1):\n            result += comb(n, j) ** 2\n    return result\n\nimport math\nfrom math import comb\n```", "\nfrom math import comb\n\ndef sum_of_square(n):\n    return sum([i**2 * comb(n, i)**2 for i in range(n+1)])\n```", "\ndef sum_of_square(n):\n    sum_val = 0\n    for i in range(n+1):\n        sum_val += binomial_coefficient(n, i)**2\n    return sum_val\n\ndef binomial_coefficient(n, k):\n    if k > n-k:\n        k = n-k\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n-i+1) // i\n    return result\n```"], "num_tokens": [37, 34, 48, 50, 38, 100, 33, 59, 36, 102]}
{"item": {"task_id": 906, "text": "Write a function to extract year, month and date from a url by using regex.", "code": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "test_list": ["assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]", "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]", "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\ndef extract_date(url):\n    pattern = re.compile(r'\\d{4}\\/\\d{2}\\/\\d{2}')\n    return [(match.group(0).split('/')[::-1]) for match in pattern.finditer(url)]\n```", "\nimport re\n\ndef extract_date(url):\n    pattern = re.compile(r'\\d{4}/\\d{2}/\\d{2}')\n    match = pattern.search(url)\n    if match:\n        return [match.group().split('/')]\n    else:\n        return []\n```", "\nimport re\n\ndef extract_date(url):\n    pattern = re.compile(r'\\d{4}/\\d{2}/\\d{2}')\n    matches = pattern.findall(url)\n    if matches:\n        return [match.split('/') for match in matches][0]\n    else:\n        return []\n```", "\nimport re\n\ndef extract_date(url):\n    pattern = r'\\d{4}/\\d{2}/\\d{2}'\n    match = re.search(pattern, url)\n    if match:\n        return tuple(match.group().split('/'))\n    return ()\n```", "\nimport re\n\ndef extract_date(url):\n    pattern = r'\\d{4}/\\d{2}/\\d{2}'\n    match = re.search(pattern, url)\n    if match:\n        return tuple(match.group().split('/'))\n    else:\n        return []\n```", "\nimport re\ndef extract_date(url):\n    return re.findall(r'\\d{4}\\/\\d{2}\\/\\d{2}', url)\n```", "\nimport re\n\ndef extract_date(url):\n    pattern = r'\\d{4}\\/\\d{2}\\/\\d{2}'\n    return [match.group(0).split('/') for match in [re.search(pattern, url)]]\n```", "\nimport re\ndef extract_date(url):\n    pattern = r'\\d{4}/\\d{2}/\\d{2}'\n    match = re.search(pattern, url)\n    if match:\n        return [match.group().split('/')]\n    else:\n        return []\n```", "\nimport re\n\ndef extract_date(url):\n    pattern = r'\\d{4}\\/\\d{2}\\/\\d{2}'\n    match = re.search(pattern, url)\n    if match:\n        return [match.group().split('/')]\n    return []\n```", "\nimport re\ndef extract_date(url):\n    pattern = r'\\d{4}/\\d{2}/\\d{2}'\n    match = re.search(pattern, url)\n    if match:\n        return tuple(match.group().split('/'))\n    else:\n        return None\n```"], "num_tokens": [55, 58, 62, 55, 58, 35, 53, 58, 57, 59]}
{"item": {"task_id": 907, "text": "Write a function to print the first n lucky numbers.", "code": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "test_list": ["assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ", "assert lucky_num(5)==[1, 3, 7, 9, 13]", "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef lucky_num(n):\n    lucky = [1]\n    i = 2\n    while len(lucky) < n:\n        if str(i).sum() == 4 or str(i).sum() % 7 == 0 or str(i).count('2') > 0 and str(i).count('7') > 0:\n            lucky.append(i)\n        i += 1\n    return lucky\n```", "\ndef lucky_num(n):\n    def is_lucky(num):\n        return num > 1 and all(num%i!=0 for i in range(2, int(num**0.5)+1))\n\n    return [i for i in range(1, n*10) if is_lucky(i)][:n]\n```", "\ndef lucky_num(n):\n    lucky_nums = [1]\n    i = 2\n    while len(lucky_nums) < n:\n        if '0' not in str(i):\n            lucky_nums.append(i)\n        i += 1\n    return lucky_nums\n```", "\ndef lucky_num(n):\n    lucky = [1]\n    i = 1\n    while len(lucky) < n:\n        i += 1\n        if '0' not in str(i) and '4' not in str(i) and '7' not in str(i):\n            lucky.append(i)\n    return lucky\n```", "\ndef lucky_num(n):\n    result = [1]\n    i = 1\n    while len(result) < n:\n        i += 1\n        if '0' not in str(i) and '4' not in str(i) and '7' not in str(i):\n            result.append(i)\n    return result\n```", "\ndef lucky_num(n):\n    lucky_nums = [1]\n    i = 2\n    while len(lucky_nums) < n:\n        i += 1\n        if '0' not in str(i) and '4' not in str(i) and '7' not in str(i):\n            lucky_nums.append(i)\n    return lucky_nums\n```", "\ndef lucky_num(n):\n    lucky = [1]\n    i = 1\n    while len(lucky) < n:\n        i += 1\n        if '0' not in str(i):\n            lucky.append(i)\n    return lucky\n```", "\ndef lucky_num(n):\n    result = []\n    i = 1\n    while len(result) < n:\n        if '0' not in str(i):\n            result.append(i)\n        i += 1\n    return result\n```", "\ndef lucky_num(n):\n    lucky = [i for i in range(1, 1000000) if '0' not in str(i) and '4' not in str(i) and '6' not in str(i) and '8' not in str(i)]\n    return lucky[:n]\n```", "\ndef lucky_num(n):\n    lucky = [1]\n    i = 2\n    while len(lucky) < n:\n        if str(i).replace('7', '').replace('4', '').replace('3', '').replace('2', '').replace('1', '').replace('0', '') == str(i):\n            lucky.append(i)\n        i += 1\n    return lucky\n```"], "num_tokens": [89, 67, 58, 72, 71, 76, 54, 51, 67, 83]}
{"item": {"task_id": 908, "text": "Write a function to find the fixed point in the given array.", "code": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "test_list": ["assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3", "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1", "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i, x in enumerate(arr):\n        if x == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```", "\ndef find_fixed_point(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n```"], "num_tokens": [36, 36, 35, 36, 36, 36, 36, 35, 36, 36]}
{"item": {"task_id": 909, "text": "Write a function to find the previous palindrome of a specified number.", "code": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x", "test_list": ["assert previous_palindrome(99)==88", "assert previous_palindrome(1221)==1111", "assert previous_palindrome(120)==111"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    i = n - 1\n    while not str(i) == str(i)[::-1]:\n        i -= 1\n    return i\n```", "\ndef previous_palindrome(n):\n    while not str(n)[::-1] == str(n):\n        n -= 1\n    return n\n```"], "num_tokens": [40, 40, 40, 40, 40, 40, 40, 40, 40, 32]}
{"item": {"task_id": 910, "text": "Write a function to validate a gregorian date.", "code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "test_list": ["assert check_date(11,11,2002)==True", "assert check_date(13,11,2002)==False", "assert check_date('11','11','2002')==True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_date(day, month, year):\n    try:\n        datetime.datetime(int(year), int(month), int(day))\n        return True\n    except ValueError:\n        return False\n```", "\ndef check_date(day, month, year):\n    if not isinstance(day, int) or not isinstance(month, int) or not isinstance(year, int):\n        return False\n    if year < 1:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month == 2:\n        if year % 4!= 0:\n            if day > 28:\n                return False\n        elif year % 100!= 0:\n            if day > 29:\n                return False\n        elif year % 400!= 0:\n            if day > 28:\n                return False\n        else:\n            if day > 29:\n                return False\n    else:\n        if day > 30:\n            return False\n    return True\n```", "\ndef check_date(day, month, year):\n    if not (1 <= int(day) <= 31):\n        return False\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month) in (4, 6, 9, 11) and int(day) > 30:\n        return False\n    if int(month) == 2:\n        if int(year) % 4!= 0:\n            if int(day) > 28:\n                return False\n        elif int(year) % 100!= 0:\n            if int(day) > 29:\n                return False\n        elif int(year) % 400!= 0:\n            if int(day) > 28:\n                return False\n        else:\n            if int(day) > 29:\n                return False\n    return True\n```", "\ndef check_date(day, month, year):\n    try:\n        date = f'{day}/{month}/{year}'\n        datetime.datetime.strptime(date, '%d/%m/%Y')\n        return True\n    except ValueError:\n        return False\n```", "\ndef check_date(day, month, year):\n    try:\n        datetime.datetime(int(year), int(month), int(day))\n        return True\n    except ValueError:\n        return False\n```", "\ndef check_date(day, month, year):\n    if type(day)!=int or type(month)!=int or type(year)!=int:\n        return False\n    if day<1 or day>31:\n        return False\n    if month<1 or month>12:\n        return False\n    if month in [1,3,5,7,8,10,12]:\n        if day>31:\n            return False\n    elif month==2:\n        if year%4==0 and (year%100!=0 or year%400==0):\n            if day>29:\n                return False\n        else:\n            if day>28:\n                return False\n    else:\n        if day>30:\n            return False\n    return True\n```", "\ndef check_date(day, month, year):\n    try:\n        day=int(day)\n        month=int(month)\n        year=int(year)\n        if day < 1 or day > 31:\n            return False\n        if month < 1 or month > 12:\n            return False\n        if year < 1:\n            return False\n        if month in [1,3,5,7,8,10,12]:\n            if day > 31:\n                return False\n        elif month == 2:\n            if day > 29 or (day == 29 and year % 4!= 0):\n                return False\n        elif month in [4,6,9,11]:\n            if day > 30:\n                return False\n        return True\n    except ValueError:\n        return False\n```", "\ndef check_date(day, month, year):\n    if not (1 <= day <= 31 and 1 <= month <= 12 and 1 <= int(year)):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month == 2:\n        return 1 <= day <= 29 if year % 4 == 0 and year % 100!= 0 or year % 400 == 0 else 1 <= day <= 28\n    else:\n        return 1 <= day <= 30\n```", "\ndef check_date(day, month, year):\n    if isinstance(day, str):\n        day = int(day)\n    if isinstance(month, str):\n        month = int(month)\n    if isinstance(year, str):\n        year = int(year)\n    if day < 1 or day > 31:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month == 2:\n        if day > 28:\n            return False\n        elif day == 28 and not is_leap_year(year):\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    return True\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n```", "\ndef check_date(day, month, year):\n    if isinstance(day, str) or isinstance(month, str) or isinstance(year, str):\n        day, month, year = map(int, [day, month, year])\n    if 1 <= day <= 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if 1 <= day <= 31:\n                return True\n        elif month == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                if 1 <= day <= 29:\n                    return True\n            else:\n                if 1 <= day <= 28:\n                    return True\n        else:\n            if 1 <= day <= 30:\n                return True\n    return False\n```"], "num_tokens": [39, 214, 180, 51, 39, 157, 171, 138, 220, 183]}
{"item": {"task_id": 911, "text": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "code": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "test_list": ["assert maximum_product( [12, 74, 9, 50, 61, 41])==225700", "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375", "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport heapq\ndef maximum_product(nums):\n    return max(nums[0]*nums[1]*nums[2], nums[0]*nums[1]*nums[-1], nums[0]*nums[-1]*nums[-2], nums[-1]*nums[-2]*nums[-3])\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    return max(nums[0]*nums[1]*nums[2], nums[0]*nums[-1]*nums[-2], nums[-1]*nums[-2]*nums[-3])\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    return max(nums[0]*nums[1]*nums[2], nums[0]*nums[-1]*nums[-2], nums[-1]*nums[-2]*nums[-3])\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n    heapq.heappush(max_heap, float('-inf'))\n    max1 = heapq.heappop(max_heap)\n    max2 = heapq.heappop(max_heap)\n    max3 = heapq.heappop(max_heap)\n    return max1 * max2 * max3\n```", "\nimport heapq\ndef maximum_product(arr):\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n    return max(heap[0]*heap[1]*heap[2], heap[0]*heap[1]*heap[-1])\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    return max(nums[0] * nums[1] * nums[2], nums[0] * nums[1] * nums[-1], nums[0] * nums[-1] * nums[-2], nums[-1] * nums[-2] * nums[-3])\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    nums = [-x for x in nums]\n    heapq.heapify(nums)\n    heapq.heapify([-x for x in nums])\n    return max(heapq.heappop(nums) * heapq.heappop(nums) * heapq.heappop([-nums]))\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    heapq.heapify(nums)\n    max1 = heapq.heappop(nums)\n    max2 = heapq.heappop(nums)\n    max3 = heapq.heappop(nums)\n    return max1 * max2 * max3\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    return max(nums[0] * nums[1] * nums[2], \n               max(nums[0] * nums[1] * max(nums[2], min(nums)), \n                   nums[0] * max(nums[1], nums[2]) * min(nums)))\n```", "\nimport heapq\n\ndef maximum_product(nums):\n    return max(nums[0]*nums[1]*nums[2], max(nums)*min(nums))\n```"], "num_tokens": [62, 50, 50, 88, 57, 70, 63, 58, 69, 32]}
{"item": {"task_id": 912, "text": "Write a function to find ln, m lobb number.", "code": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "test_list": ["assert int(lobb_num(5, 3)) == 35", "assert int(lobb_num(3, 2)) == 5", "assert int(lobb_num(4, 2)) == 20"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef lobb_num(m, n):\n    return sum(range(1, m+1)) * n\n```", "\ndef lobb_num(m, n):\n    return sum((m + 1) * (m // i + 1) for i in range(1, n + 1))\n```", "\ndef lobb_num(n, m):\n    return sum(i % m for i in range(1, n+1))\n```", "\ndef lobb_num(m, n):\n    return sum(i * (10 ** (m - 1)) for i in range(1, n + 1))\n```", "\ndef lobb_num(m, n):\n    return m * (m + 1) // 2 * n\n```", "\ndef lobb_num(m, n):\n    return sum([i for i in range(1, m+1) if i % n == 0])\n```", "\ndef lobb_num(m, n):\n    return m * (2 ** (n - 1)) + n - 1\n```", "\ndef lobb_num(m, n):\n    return int(sum([i * (m // i) for i in range(1, min(m, n) + 1)]))\n```", "\ndef lobb_num(m, n):\n    return int(m * n * (m + n + 1) / 2)", "\ndef lobb_num(m, n):\n    return int(sum(range(1, m+1)) * n)\n```"], "num_tokens": [25, 41, 28, 37, 27, 35, 30, 40, 29, 26]}
{"item": {"task_id": 913, "text": "Write a function to check for a number at the end of a string.", "code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "test_list": ["assert end_num('abcdef')==False", "assert end_num('abcdef7')==True", "assert end_num('abc')==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef end_num(s):\n    return s and s[-1].isdigit()\n```", "\ndef end_num(s):\n    return s and s[-1].isdigit()\n```", "\ndef end_num(s):\n    return s[-1].isdigit()\n```", "\ndef end_num(s):\n    return s and s[-1].isdigit()", "\ndef end_num(s):\n    return s and s[-1].isdigit()\n```", "\ndef end_num(s):\n    return s and s[-1].isdigit()\n```", "\ndef end_num(s):\n    return s and s[-1].isdigit()\n```", "\ndef end_num(s):\n    return s and s[-1].isdigit()", "\ndef end_num(s):\n    return s and s[-1].isdigit()\n```", "\ndef end_num(s):\n    return s and s[-1].isdigit()\n```"], "num_tokens": [18, 18, 16, 17, 18, 18, 18, 17, 18, 18]}
{"item": {"task_id": 914, "text": "Write a python function to check whether the given string is made up of two alternating characters or not.", "code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "test_list": ["assert is_Two_Alter(\"abab\") == True", "assert is_Two_Alter(\"aaaa\") == False", "assert is_Two_Alter(\"xyz\") == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_Two_Alter(s):\n    if len(set(s))!= 2:\n        return False\n    return s[::2] == s[1::2]\n```", "\ndef is_Two_Alter(s):\n    if len(s) % 2!= 0:\n        return False\n    char1 = s[0]\n    for char in s[1:]:\n        if char!= char1 and char!= char1.lower():\n            return False\n        char1 = char\n    return True\n```", "\ndef is_Two_Alter(s):\n    return len(set(s)) == 2 and len(set(s[::2])) == 1 and len(set(s[1::2])) == 1\n```", "\ndef is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    char1 = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= char1 and s[i-1]!= char1:\n            return False\n    return True\n```", "\ndef is_Two_Alter(s):\n    if len(set(s)) > 2:\n        return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            return False\n    return True\n```", "\ndef is_Two_Alter(s):\n    if len(set(s))!= 2:\n        return False\n    return s.count(s[0]) == s.count(s[1])\n```", "\ndef is_Two_Alter(s):\n    if len(set(s)) > 2:\n        return False\n    if len(set(s)) == 1:\n        return False\n    return True\n```", "\ndef is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    prev = s[0]\n    for char in s[1:]:\n        if char == prev:\n            return False\n        prev = char\n    return True\n```", "\ndef is_Two_Alter(s):\n    if len(set(s))!= 2:\n        return False\n    return len(set(s)) == 2 and len(set(s)) == len(set(s[::2])) == len(set(s[1::2]))\n```", "\ndef is_Two_Alter(s):\n    if len(set(s))!= 2:\n        return False\n    return len(set(s)) == 2 and len(set(s)) == len(s) // 2 + len(s) % 2\n```"], "num_tokens": [38, 69, 43, 66, 55, 39, 42, 57, 55, 53]}
{"item": {"task_id": 915, "text": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "code": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ", "test_list": ["assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]", "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]", "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nrearrange_numbs = lambda lst: sorted(lst, key=lambda x: (abs(x), x))\n```", "\nrearrange_numbs = lambda lst: sorted(lst, key=lambda x: 0 if x>=0 else 1)\n```", "\nrearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x<0, x))\n```", "\nrearrange_numbs = lambda lst: sorted([x for x in lst if x>=0] + [x for x in lst if x<0])\n```", "\nrearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x<0, x))\n```", "\nrearrange_numbs = lambda nums: sorted(nums, key=abs)[:len(nums)//2] + sorted(nums, key=abs)[len(nums)//2:]\n```", "\nrearrange_numbs = lambda nums: sorted(nums, key=lambda x:0 if x>=0 else 1)\n```", "\nrearrange_numbs = lambda lst: sorted(lst, key=lambda x: 1 if x>=0 else -1)\n```", "\narr = [i for i in sorted(arr) if i >= 0] + [i for i in sorted(arr) if i < 0][::-1]\n```", "\nrearrange_numbs = lambda nums: sorted(nums, key=lambda x: (x >= 0, x))\n```"], "num_tokens": [25, 29, 26, 36, 26, 37, 28, 29, 37, 27]}
{"item": {"task_id": 916, "text": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "code": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False", "test_list": ["assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)", "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)", "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_triplet_array(arr, target_sum, max_num):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                if current_sum <= max_num:\n                    return (arr[i], arr[left], arr[right])\n                left += 1\n                right -= 1\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n```", "\ndef find_triplet_array(arr, target_sum, given_sum):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == given_sum:\n                    return (arr[i], arr[j], arr[k])\n    return None\n```", "\ndef find_triplet_array(arr, target, sum_val):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == sum_val:\n                return (arr[i], arr[left], arr[right])\n            elif total < sum_val:\n                left += 1\n            else:\n                right -= 1\n    return None\n```", "\ndef find_triplet_array(arr, target, total):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None\n```", "\ndef find_triplet_array(arr, target_sum, target_value):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                if current_sum == target_value:\n                    return (arr[i], arr[left], arr[right])\n                if current_sum < target_value:\n                    left += 1\n                else:\n                    right -= 1\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n```", "\ndef find_triplet_array(arr, target, max_sum):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None\n```", "\ndef find_triplet_array(arr, target_sum, max_sum):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return ()\n```", "\ndef find_triplet_array(arr, target_sum, total_sum):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    for i in range(len(arr) - 2):\n        if arr[i] + arr[i + 1] > total_sum:\n            break\n        if arr[i] + arr[i + 1] == target_sum:\n            return (arr[i], arr[i + 1], arr[i + 2])\n    return None\n```", "\ndef find_triplet_array(arr, target_sum, total):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n```", "\ndef find_triplet_array(arr, target_sum, given_sum):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == given_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < given_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n```"], "num_tokens": [137, 81, 113, 113, 148, 114, 116, 182, 116, 117]}
{"item": {"task_id": 917, "text": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "code": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')", "test_list": ["assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')", "assert text_uppercase_lowercase(\"aA\")==('Not matched!')", "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef text_uppercase_lowercase(text):\n    for i in range(1, len(text)):\n        if text[i-1].isupper() and text[i].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(1, len(text)):\n        if text[i-1].isupper() and text[i].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(1, len(text)):\n        if text[i-1].isupper() and text[i].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(len(text)-1):\n        if text[i].isupper() and text[i+1].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(1, len(text)):\n        if text[i-1].isupper() and text[i].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(len(text) - 1):\n        if text[i].isupper() and text[i+1].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(1, len(text)):\n        if text[i-1].isupper() and text[i].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(1, len(text)):\n        if text[i-1].isupper() and text[i].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(len(text)-1):\n        if text[i].isupper() and text[i+1].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```", "\ndef text_uppercase_lowercase(text):\n    for i in range(len(text)-1):\n        if text[i].isupper() and text[i+1].islower():\n            return 'Found a match!'\n    return 'Not matched!'\n```"], "num_tokens": [51, 51, 51, 50, 51, 52, 51, 51, 50, 50]}
{"item": {"task_id": 918, "text": "Write a function to count coin change.", "code": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "test_list": ["assert coin_change([1, 2, 3],3,4)==4", "assert coin_change([4,5,6,7,8,9],6,9)==2", "assert coin_change([4,5,6,7,8,9],6,4)==1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef coin_change(coins, amount, target):\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, target + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[target] if dp[target]!= float('inf') else -1\n```", "\ndef coin_change(coins, amount, max_coin):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        if coin <= max_coin:\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount]!= float('inf') else -1\n```", "\ndef coin_change(coins, total, max_coin):\n    dp = [float('inf')] * (total + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, total + 1):\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[total] if dp[total] <= max_coin else -1\n```", "\ndef coin_change(coins, amount, max_coin):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            if i - coin <= max_coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount]!= float('inf') else -1\n```", "\ndef coin_change(coins, amount, target):\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, target + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[target] if dp[target]!= float('inf') else -1\n```", "\ndef coin_change(coins, amount, max_coin):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        if coin <= max_coin:\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount]!= float('inf') else -1\n```", "\ndef coin_change(coins, amount, max_coin):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        if coin <= max_coin:\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount]!= float('inf') else -1\n```", "\ndef coin_change(coins, amount, max_coin):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        if coin <= max_coin:\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount]!= float('inf') else -1\n```", "\ndef coin_change(coins, amount, max_coins):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] <= max_coins else -1\n```", "\ndef coin_change(coins, amount, max_coin):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        if coin <= max_coin:\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount]!= float('inf') else -1\n```"], "num_tokens": [91, 101, 99, 103, 91, 101, 101, 101, 95, 101]}
{"item": {"task_id": 919, "text": "Write a python function to multiply all items in the list.", "code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "test_list": ["assert multiply_list([1,-2,3]) == -6", "assert multiply_list([1,2,3,4]) == 24", "assert multiply_list([3,1,2,3]) == 18"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n```", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n```", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n```", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n```", "\ndef multiply_list(lst):\n    result = 1\n    for item in lst:\n        result *= item\n    return result\n```", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n```", "\ndef multiply_list(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result"], "num_tokens": [27, 27, 29, 29, 29, 27, 29, 29, 29, 27]}
{"item": {"task_id": 920, "text": "Write a function to remove all tuples with all none values in the given tuple list.", "code": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "test_list": ["assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'", "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'", "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_tuple(lst):\n    return [t for t in lst if any(t)]\n```", "\ndef remove_tuple(lst):\n    return [t for t in lst if any(t)]\n```", "\ndef remove_tuple(lst):\n    return [t for t in lst if any(t)]\n```", "\ndef remove_tuple(tuples):\n    return [t for t in tuples if any(t)]\n```", "\ndef remove_tuple(tuples):\n    return [t for t in tuples if any(t)]\n```", "\ndef remove_tuple(tuples):\n    return [t for t in tuples if any(t)]\n```", "\ndef remove_tuple(lst):\n    return [t for t in lst if any(t)]\n```", "\ndef remove_tuple(tuples):\n    return [t for t in tuples if any(t)]\n```", "\ndef remove_tuple(tuples):\n    return [t for t in tuples if any(t)]\n```", "\ndef remove_tuple(lst):\n    return [t for t in lst if any(t)]\n```"], "num_tokens": [20, 20, 20, 21, 21, 21, 20, 21, 21, 20]}
{"item": {"task_id": 921, "text": "Write a function to perform chunking of tuples each of size n.", "code": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ", "test_list": ["assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]", "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]", "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuples[i:i+n] for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuple(tuples[i:i+n]) for i in range(0, len(tuples), n)]\n```", "\ndef chunk_tuples(tuples, n):\n    return [tuples[i:i+n] for i in range(0, len(tuples), n)]\n```"], "num_tokens": [34, 34, 34, 34, 34, 34, 33, 34, 34, 33]}
{"item": {"task_id": 922, "text": "Write a function to find a pair with the highest product from a given array of integers.", "code": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ", "test_list": ["assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)", "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)", "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_product(arr):\n    arr.sort()\n    return arr[-1], arr[-2]\n```", "\ndef max_product(arr):\n    arr.sort()\n    return arr[-1], arr[-2]\n```", "\ndef max_product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])\n```", "\ndef max_product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max1, max2\n```", "\ndef max_product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max1, max2 = num, max1\n        elif num > max2:\n            max2 = num\n    return max2, max1\n```", "\ndef max_product(arr):\n    arr.sort()\n    return arr[-1], arr[-2]\n```", "\ndef max_product(arr):\n    arr.sort()\n    return arr[-1], arr[-2]\n```", "\ndef max_product(arr):\n    arr.sort()\n    return arr[-1], arr[-2]\n```", "\ndef max_product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max1, max2\n```", "\ndef max_product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1, max2\n```"], "num_tokens": [22, 22, 23, 71, 65, 22, 22, 22, 71, 66]}
{"item": {"task_id": 923, "text": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "code": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "test_list": ["assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9", "assert super_seq(\"feek\", \"eke\", 4, 3) == 5", "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return m + n - dp[m][n]\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    i, j = m, n\n    res = []\n    while i > 0 and j > 0:\n        if str1[i - 1] == str2[j - 1]:\n            res.append(str1[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return len(str1) - i + len(res)\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n] + 1\n```", "\ndef super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n] + 1\n```"], "num_tokens": [153, 153, 153, 141, 240, 143, 153, 153, 157, 166]}
{"item": {"task_id": 924, "text": "Write a function to find maximum of two numbers.", "code": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "test_list": ["assert max_of_two(10,20)==20", "assert max_of_two(19,15)==19", "assert max_of_two(-10,-20)==-10"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```", "\ndef max_of_two(a, b):\n    return max(a, b)\n```"], "num_tokens": [18, 18, 18, 18, 18, 18, 18, 18, 18, 18]}
{"item": {"task_id": 925, "text": "Write a python function to calculate the product of all the numbers of a given tuple.", "code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "test_list": ["assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864", "assert mutiple_tuple((1,2,3)) == 6", "assert mutiple_tuple((-2,-4,-6)) == -48"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef multiple_tuple(t):\n    result = 1\n    for num in t:\n        result *= num\n    return result\n```", "\ndef multiple_tuple(t):\n    return functools.reduce(lambda x, y: x * y, t)", "\ndef mutiple_tuple(t):\n    import math\n    return math.prod(t)\n```", "\ndef mutiple_tuple(t):\n    return functools.reduce(lambda x, y: x*y, t, 1)", "\ndef multiple_tuple(tup):\n    return functools.reduce(lambda x, y: x * y, tup)", "\ndef mutiple_tuple(t):\n    return math.prod(t)\n```", "\ndef mutiple_tuple(t):\n    return eval('*'.join(map(str, t)))\n```", "\ndef mutiple_tuple(t):\n    result = 1\n    for num in t:\n        result *= num\n    return result\n```", "\ndef multiple_tuple(tup):\n    result = 1\n    for num in tup:\n        result *= num\n    return result\n```", "\ndef multiple_tuple(t):\n    return eval('*'.join(map(str, t)))\n```"], "num_tokens": [29, 22, 19, 25, 23, 15, 20, 30, 30, 19]}
{"item": {"task_id": 926, "text": "Write a function to find n-th rencontres number.", "code": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "test_list": ["assert rencontres_number(7, 2) == 924", "assert rencontres_number(3, 0) == 2", "assert rencontres_number(3, 1) == 3"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef rencontres_number(n, k):\n    if k < 0 or k >= n:\n        return 0\n    if k == 0:\n        return 1\n    if n == 1:\n        return 1\n    return sum(rencontres_number(n-1, i) * rencontres_number(1, k-1-i) for i in range(k+1))\n```", "\ndef rencontres_number(n, k):\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if n == 1:\n        return 0\n    r = [0] * (n + 1)\n    r[0] = 1\n    for i in range(1, n):\n        r[i] = sum(r[j] for j in range(i))\n    return sum(r[j] for j in range(k, n))\n```", "\ndef rencontres_number(n, k):\n    if n == 1:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return rencontres_number(n - 1, k - 1) + (n - 1) * rencontres_number(n - 1, k)\n```", "\ndef rencontres_number(n, k):\n    if k >= n:\n        return 0\n    if k == 0:\n        return 1\n    return sum(rencontres_number(n - 1, i) * (n - i - 1) for i in range(k)) % (n * (n - 1))\n```", "\ndef rencontres_number(n, k):\n    if n == 1:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return rencontres_number(n-1, k-1) + (n-1)*rencontres_number(n-1, k)\n```", "\ndef rencontres_number(n, k):\n    if k == 0:\n        return 1\n    else:\n        return sum(rencontres_number(n - 1, i) * rencontres_number(n - 1, k - 1 - i) for i in range(k + 1))\n```", "\ndef rencontres_number(n, k):\n    if k < 0 or k >= n:\n        return 0\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    total = 0\n    for i in range(n):\n        total += rencontres_number(n-1, k-1) if i!= k else rencontres_number(n-1, k)\n    return total\n```", "\ndef rencontres_number(n, k):\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return rencontres_number(n-1, k-1) + (n-1) * rencontres_number(n-1, k)\n```", "\ndef rencontres_number(n, k):\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    if n == 2:\n        return 2\n    total = 0\n    for i in range(n):\n        total += (-1)**i * math.comb(n-1, i) * rencontres_number(n-1, k-1-i)\n    return total\n```", "\ndef rencontres_number(n, k):\n    if k == 0:\n        return 1\n    if k >= n:\n        return 0\n    a = [0] * (n + 1)\n    a[0] = 1\n    for i in range(1, n):\n        b = [0] * (n + 1)\n        for j in range(n):\n            b[j] = a[j]\n        for j in range(n):\n            b[j] = b[j] + b[(j + 1) % n]\n        a = b\n    return a[k]\n```"], "num_tokens": [82, 106, 68, 72, 64, 63, 93, 63, 92, 129]}
{"item": {"task_id": 927, "text": "Write a function to calculate the height of the given binary tree.", "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1", "test_list": ["assert (max_height(root)) == 3", "assert (max_height(root1)) == 5 ", "assert (max_height(root2)) == 4"], "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot1 = Node(1);  \r\nroot1.left = Node(2);  \r\nroot1.right = Node(3);  \r\nroot1.left.left = Node(4);  \r\nroot1.right.left = Node(5);  \r\nroot1.right.right = Node(6);  \r\nroot1.right.right.right= Node(7);  \r\nroot1.right.right.right.right = Node(8)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(6)\r\nroot2.left.left.right = Node(7)", "challenge_test_list": []}, "text": ["\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1\n```", "\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        return max(left_height, right_height) + 1\n```", "\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1\n```", "\nclass Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        return 1 + max(max_height(root.left), max_height(root.right))\n```", "\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        if left_height > right_height:\n            return left_height + 1\n        else:\n            return right_height + 1\n```", "\nclass Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        return max(left_height, right_height) + 1\n```", "\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        if left_height > right_height:\n            return left_height + 1\n        else:\n            return right_height + 1\n```", "\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        return max(left_height, right_height) + 1\n```", "\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        return 1 + max(max_height(root.left), max_height(root.right))\n```", "\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        return max(left_height, right_height) + 1\n```"], "num_tokens": [83, 83, 83, 74, 97, 89, 97, 83, 68, 83]}
{"item": {"task_id": 928, "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)", "test_list": ["assert change_date_format('2026-01-02')=='02-01-2026'", "assert change_date_format('2021-01-04')=='04-01-2021'", "assert change_date_format('2030-06-06')=='06-06-2030'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef change_date_format(date):\n    return date[8:10] + '-' + date[5:7] + '-' + date[:4]\n```", "\ndef change_date_format(date):\n    return '{:02}-{:02}-{}'.format(*map(str, date[8:2:-1]))\n```", "\ndef change_date_format(date_str):\n    day, month, year = date_str.split('-')\n    return f'{day}-{month}-{year}'\n```", "\ndef change_date_format(date):\n    day, month, year = date.split('-')\n    return f'{day}-{month}-{year}'\n```", "\ndef change_date_format(date):\n    day, month, year = date.split('-')\n    return f'{day}-{month}-{year}'\n```", "\ndef change_date_format(date):\n    day, month, year = date.split('-')\n    return f'{day}-{month}-{year}'\n```", "\ndef change_date_format(date):\n    day, month, year = date.split('-')\n    return f'{day}-{month}-{year}'\n```", "\ndef change_date_format(date):\n    day, month, year = date.split('-')\n    return f'{day}-{month}-{year}'\n```", "\ndef change_date_format(date_str):\n    day, month, year = date_str.split('-')\n    return f'{day}-{month}-{year}'\n```", "\ndef change_date_format(date):\n    day, month, year = date.split('-')\n    return f'{day}-{month}-{year}'\n```"], "num_tokens": [33, 32, 32, 30, 30, 30, 30, 30, 32, 30]}
{"item": {"task_id": 929, "text": "Write a function to count repeated items of a tuple.", "code": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "test_list": ["assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3", "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2", "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_tuplex(tuplex, item):\n    return tuplex.count(item)\n```", "\ndef count_tuplex(tuplex, num):\n    return tuplex.count(num)\n```", "\ndef count_tuplex(tuplex, x):\n    return tuplex.count(x)\n```", "\ndef count_tuplex(tuplex, item):\n    return tuplex.count(item)\n```", "\ndef count_tuplex(tup, n):\n    return tup.count(n)\n```", "\ndef count_tuplex(tuplex, n):\n    return tuplex.count(n)\n```", "\ndef count_tuplex(tuplex, num):\n    return tuplex.count(num)\n```", "\ndef count_tuplex(tuplex, item):\n    return tuplex.count(item)\n```", "\ndef count_tuplex(tuplex, item):\n    return tuplex.count(item)\n```", "\ndef count_tuplex(tuplex, item):\n    return tuplex.count(item)\n```"], "num_tokens": [21, 21, 21, 21, 19, 21, 21, 21, 21, 21]}
{"item": {"task_id": 930, "text": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "code": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')", "test_list": ["assert text_match(\"msb\") == 'Not matched!'", "assert text_match(\"a0c\") == 'Found a match!'", "assert text_match(\"abbc\") == 'Found a match!'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef text_match(s):\n    pattern = re.compile(r'a(b*)')\n    match = pattern.match(s)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    pattern = re.compile('a(b*)')\n    match = pattern.fulltext(text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile('a(b*)')\n    match = pattern.fulltext(s)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile('a(b*)')\n    if pattern.match(s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    if re.match(r'a(b*)', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_match(text):\n    pattern = re.compile('a*b')\n    if re.fullmatch(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile(r\"a(b*)\")\n    if pattern.fullmatch(s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "\nimport re\n\ndef text_match(text):\n    pattern = re.compile(r'^a(b*)')\n    if pattern.fullmatch(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(text):\n    pattern = re.compile('a(b*)')\n    match = pattern.fulltext(text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```", "\nimport re\n\ndef text_match(s):\n    pattern = re.compile(r'^a(b*)')\n    if pattern.fullmatch(s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"], "num_tokens": [48, 49, 49, 43, 37, 45, 43, 45, 49, 45]}
{"item": {"task_id": 931, "text": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "code": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total", "test_list": ["assert sum_series(7)==784", "assert sum_series(5)==225", "assert sum_series(15)==14400"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum([i**3 for i in range(1, n+1)])\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```", "\ndef sum_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```"], "num_tokens": [25, 25, 25, 25, 25, 26, 25, 25, 25, 25]}
{"item": {"task_id": 932, "text": "Write a function to remove duplicate words from a given list of strings.", "code": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "test_list": ["assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']", "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']", "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_duplic_list(lst):\n    return list(dict.fromkeys(lst))\n```", "\ndef remove_duplic_list(lst):\n    seen = set()\n    return [word for word in lst if not (word in seen or seen.add(word))]\n```", "\ndef remove_duplic_list(lst):\n    return list(dict.fromkeys(lst))\n```", "\ndef remove_duplic_list(lst):\n    return list(dict.fromkeys(lst))\n```", "\ndef remove_duplic_list(lst):\n    return list(set(lst))\n```", "\ndef remove_duplic_list(lst):\n    return list(set([x for x in lst]))\n```", "\ndef remove_duplic_list(lst):\n    return list(dict.fromkeys(lst))\n```", "\ndef remove_duplic_list(lst):\n    return list(dict.fromkeys(lst))\n```", "\ndef remove_duplic_list(lst):\n    return list(dict.fromkeys(lst))\n```", "\ndef remove_duplic_list(lst):\n    return list(dict.fromkeys(lst))\n```"], "num_tokens": [18, 34, 18, 18, 16, 21, 18, 18, 18, 18]}
{"item": {"task_id": 933, "text": "Write a function to convert camel case string to snake case string by using regex.", "code": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "test_list": ["assert camel_to_snake('GoogleAssistant') == 'google_assistant'", "assert camel_to_snake('ChromeCast') == 'chrome_cast'", "assert camel_to_snake('QuadCore') == 'quad_core'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower().lstrip('_')\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower()\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower()\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower()\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower()\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower().lstrip('_')\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower()\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower()\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower().lstrip('_')\n```", "\nimport re\n\ndef camel_to_snake(s):\n    return re.sub('([A-Z])', r'_\\1', s).lower()\n```"], "num_tokens": [36, 32, 32, 32, 32, 36, 32, 32, 36, 32]}
{"item": {"task_id": 934, "text": "Write a function to find the nth delannoy number.", "code": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "test_list": ["assert dealnnoy_num(3, 4) == 129", "assert dealnnoy_num(3, 3) == 63", "assert dealnnoy_num(4, 5) == 681"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef dealnnoy_num(n, k):\n    if n == 1:\n        return 1\n    elif k == 1:\n        return 1\n    else:\n        return dealnnoy_num(n-1, 1) + dealnnoy_num(n-1, k-1) + dealnnoy_num(n-1, k)", "\ndef dealnnoy_num(n, k):\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(1, min(i+1, k+1)):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1]\n    return dp[n][k]\n```", "\ndef dealnnoy_num(n, k):\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    result = 0\n    for i in range(1, k):\n        result += dealnnoy_num(n-1, i) * dealnnoy_num(1, k-i)\n    return result\n```", "\ndef dealnnoy_num(n, k):\n    if k == 1 or k == n:\n        return 1\n    elif k == 2:\n        return n\n    else:\n        return dealnnoy_num(n-1, k-1) + dealnnoy_num(n-1, k) + dealnnoy_num(n-1, k-1)\n```", "\ndef dealnnoy_num(m, n):\n    if m == 1:\n        return 1\n    elif m == 2:\n        return n\n    else:\n        return sum(dealnnoy_num(i, n-1) * dealnnoy_num(m-i, n-1) for i in range(1, m))\n```", "\ndef dealnnoy_num(n, m):\n    if n == 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return sum(dealnnoy_num(i, m-1) * dealnnoy_num(n-i, m-1) for i in range(1, n))\n```", "\ndef dealnnoy_num(m, n):\n    if m == 1 or n == 1:\n        return 1\n    elif n > m:\n        return dealnnoy_num(m, n-1) + dealnnoy_num(m-1, n-1)\n    else:\n        return dealnnoy_num(m-1, n) + dealnnoy_num(m-1, n-1)\n```", "\ndef dealnnoy_num(m, n):\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return a * m * (m - 1) * (m - 2) *... * 1\n```", "\ndef dealnnoy_num(n, k):\n    if n == 1:\n        return 1\n    elif k == 1:\n        return 1\n    else:\n        return sum(dealnnoy_num(i, k-1) * dealnnoy_num(n-i, k) for i in range(1, n))\n```", "\ndef dealnnoy_num(n, m):\n    if n == 1 or m == 1:\n        return 1\n    if n == 2:\n        if m == 2:\n            return 2\n        elif m == 3:\n            return 4\n        else:\n            return 0\n    if m == 2:\n        return 0\n    result = 0\n    for i in range(1, m + 1):\n        result += dealnnoy_num(n - 1, i) * dealnnoy_num(1, m - i + 1)\n    return result\n```"], "num_tokens": [79, 113, 83, 84, 75, 76, 93, 70, 74, 135]}
{"item": {"task_id": 935, "text": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "test_list": ["assert series_sum(6)==91", "assert series_sum(7)==140", "assert series_sum(12)==650"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```", "\ndef series_sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```"], "num_tokens": [25, 25, 25, 25, 25, 25, 25, 25, 25, 25]}
{"item": {"task_id": 936, "text": "Write a function to re-arrange the given tuples based on the given ordered list.", "code": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ", "test_list": ["assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]", "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]", "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef re_arrange_tuples(tuples, order):\n    return tuple(t for t, o in sorted(zip(tuples, order), key=lambda x: order.index(x[1])))\n```", "\ndef re_arrange_tuples(tuples, ordered_list):\n    return [tuples[i-1] for i in ordered_list]\n```", "\ndef re_arrange_tuples(tuples, order):\n    return [tuples[i-1] for i in order]\n```", "\ndef re_arrange_tuples(tuples, ordered_list):\n    return tuple(t for _, t in sorted(zip(ordered_list, tuples)))\n```", "\ndef re_arrange_tuples(tuples, order):\n    return tuple(t for _, t in sorted(zip(order, tuples)))\n```", "\ndef re_arrange_tuples(tuples, order):\n    return [tuple(t) for i, t in sorted(zip(order, tuples))]\n```", "\ndef re_arrange_tuples(tuples, order):\n    return [tuples[i-1] for i in order]\n```", "\ndef re_arrange_tuples(tuples, order):\n    return [t for _, t in sorted(zip(order, tuples))]\n```", "\ndef re_arrange_tuples(tuples, order):\n    return [tuples[i-1] for i in order]\n```", "\ndef re_arrange_tuples(tuples, ordered_list):\n    return [tuples[i-1] for i in ordered_list]\n```"], "num_tokens": [39, 29, 27, 30, 27, 30, 27, 27, 27, 29]}
{"item": {"task_id": 937, "text": "Write a function to count the most common character in a given string.", "code": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char", "test_list": ["assert max_char(\"hello world\")==('l')", "assert max_char(\"hello \")==('l')", "assert max_char(\"python pr\")==('p')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_char(s):\n    return max(set(s), key=s.count)\n```", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).keys(), key=Counter(s).get)\n```", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).keys(), key=Counter(s).get)\n```", "\ndef max_char(s):\n    return max(set(s), key=s.count)", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).most_common(1)[0][0])\n```", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).keys(), key=s.count)\n```", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).most_common(1)[0][0])\n```", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).keys(), key=s.count)\n```", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).keys(), key=s.count)\n```", "\nfrom collections import Counter\n\ndef max_char(s):\n    return max(Counter(s).keys(), key=s.count)\n```"], "num_tokens": [18, 29, 29, 17, 29, 26, 29, 26, 26, 26]}
{"item": {"task_id": 938, "text": "Write a function to find three closest elements from three sorted arrays.", "code": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]", "test_list": ["assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)", "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)", "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_closet(arr1, arr2, arr3, m, n, p):\n    i, j, k = 0, 0, 0\n    min_sum = float('inf')\n    result = (0, 0, 0)\n    while i < m and j < n and k < p:\n        total = abs(arr1[i] - arr2[j]) + abs(arr1[i] - arr3[k]) + abs(arr2[j] - arr3[k])\n        if total < min_sum:\n            min_sum = total\n            result = (arr1[i], arr2[j], arr3[k])\n        if arr1[i] <= arr2[j] and arr1[i] <= arr3[k]:\n            i += 1\n        elif arr2[j] <= arr1[i] and arr2[j] <= arr3[k]:\n            j += 1\n        else:\n            k += 1\n    return result\n```", "\ndef find_closet(arr1, arr2, arr3, m, n, k):\n    i, j, idx = 0, 0, 0\n    min_sum = float('inf')\n    result = []\n    while i < m and j < n:\n        if abs(arr1[i] + arr2[j] + arr3[0] - k) < min_sum:\n            min_sum = abs(arr1[i] + arr2[j] + arr3[0] - k)\n            result = [arr1[i], arr2[j], arr3[0]]\n        if arr1[i] + arr2[j] + arr3[0] < k:\n            i += 1\n        else:\n            j += 1\n    while j < n:\n        if abs(arr1[i] + arr2[j] + arr3[0] - k) < min_sum:\n            min_sum = abs(arr1[i] + arr2[j] + arr3[0] - k)\n            result = [arr1[i], arr2[j], arr3[0]]\n        j += 1\n    while i < m:\n        if abs(arr1[i] + arr2[j] + arr3[0] - k) < min_sum:\n            min_sum = abs(arr1[i] + arr2[j] + arr3[0] - k)\n            result = [arr1[i], arr2[j], arr3[0]]\n        i += 1\n    return tuple(result)\n```", "\ndef find_closet(arr1, arr2, arr3, n, m, k):\n    arr1 = arr1[:n]\n    arr2 = arr2[:m]\n    arr3 = arr3[:k]\n    arr1.sort()\n    arr2.sort()\n    arr3.sort()\n    i = j = 0\n    result = []\n    for _ in range(3):\n        if i < n and j < m and k < len(arr3):\n            if abs(arr1[i] - arr3[k-1]) <= abs(arr2[j] - arr3[k-1]):\n                result.append(arr1[i])\n                i += 1\n            else:\n                result.append(arr2[j])\n                j += 1\n        elif i < n:\n            result.append(arr1[i])\n            i += 1\n        elif j < m:\n            result.append(arr2[j])\n            j += 1\n        else:\n            result.append(arr3[k-1])\n            k -= 1\n    return tuple(result)\n```", "\ndef find_closet(arr1, arr2, arr3, k1, k2, k3):\n    return sorted([arr1[k1-1], arr2[k2-1], arr3[k3-1]], key=abs)[0:3]\n```", "\ndef find_closest(arr1, arr2, arr3, m, n, k):\n    i, j = 0, 0\n    res = []\n    for _ in range(k):\n        if i < m and j < n:\n            if i == 0 or arr1[i-1] + 1 < arr2[j] or j == 0 or arr2[j-1] + 1 < arr1[i]:\n                res.append(min(arr1[i], arr2[j]))\n                i += 1 if arr1[i-1] < arr2[j-1] else j += 1\n            else:\n                res.append(arr1[i-1] + 1)\n                i += 1\n        elif i < m:\n            res.append(arr1[i])\n            i += 1\n        else:\n            res.append(arr2[j])\n            j += 1\n    return tuple(sorted(res)[-3:])\n```", "\ndef find_closet(arr1, arr2, arr3, n1, n2, n3):\n    return tuple(sorted([arr1[i-1] for i in sorted([i for i in range(1, min(n1, n2, n3)+1) if i <= min(n1, n2, n3) and abs(arr1[i-1]-arr2[i-1]) + abs(arr1[i-1]-arr3[i-1]) == min([abs(arr1[i-1]-arr2[j-1]) + abs(arr1[i-1]-arr3[k-1]) for j in range(1, n2+1) for k in range(1, n3+1)]))], key=lambda x:abs(x-arr2[0]))[:3])\n```", "\ndef find_closet(arr1, arr2, arr3, m, n, k):\n    i, j, res = 0, 0, []\n    for _ in range(k):\n        if i < m and (j >= n or arr1[i] < arr2[j]):\n            res.append(arr1[i])\n            i += 1\n        elif j < n and (i >= m or arr2[j] < arr3[j]):\n            res.append(arr2[j])\n            j += 1\n        else:\n            res.append(arr3[j])\n            j += 1\n    return tuple(res)\n```", "\ndef find_closet(arr1, arr2, arr3, m, n, k):\n    i, j, res = 0, 0, []\n    for _ in range(k):\n        if i < m and j < n:\n            if arr1[i] < arr2[j]:\n                res.append(arr1[i])\n                i += 1\n            else:\n                res.append(arr2[j])\n                j += 1\n        elif i < m:\n            res.append(arr1[i])\n            i += 1\n        else:\n            res.append(arr2[j])\n            j += 1\n    res.sort()\n    return tuple(res[-3:])\n```", "\ndef find_closet(arr1, arr2, arr3, k1, k2, k3):\n    return sorted([arr1[k1-1], arr2[k2-1], arr3[k3-1]])[:3]\n```", "\ndef find_closet(arr1, arr2, arr3, k1, k2, k3):\n    return sorted([arr1[i-1] for i in sorted([k1, k2, k3])], key=lambda x:abs(x-10))\n```"], "num_tokens": [204, 320, 218, 59, 197, 174, 131, 140, 54, 60]}
{"item": {"task_id": 939, "text": "Write a function to sort a list of dictionaries using lambda function.", "code": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models", "test_list": ["assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]", "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])", "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])\n```", "\ndef sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])\n```", "\ndef sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])\n```", "\ndef sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])\n```", "\nsorted_models = lambda l: sorted(l, key=lambda x: x['model'])\n```", "\nsorted_models = lambda models: sorted(models, key=lambda x: x['model'])\n```", "\ndef sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])\n```", "\ndef sorted_models(lst):\n    return sorted(lst, key=lambda x: x['model'])\n```", "\ndef sorted_models(lst):\n    return sorted(lst, key=lambda x: x['model'])\n```", "\ndef sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])\n```"], "num_tokens": [21, 21, 21, 21, 20, 20, 21, 21, 21, 21]}
{"item": {"task_id": 940, "text": "Write a function to sort the given array by using heap sort.", "code": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n", "test_list": ["assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]", "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]", "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```", "\ndef heap_sort(arr):\n    heap = [0] + arr\n    n = len(heap)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(heap, i, n)\n    for i in range(n-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    return heap[1:]\n\ndef heapify(heap, i, n):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    largest = i\n    if left < n and heap[left] > heap[largest]:\n        largest = left\n    if right < n and heap[right] > heap[largest]:\n        largest = right\n    if largest!= i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify(heap, largest, n)\n```", "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```", "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```", "\ndef heap_sort(arr):\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n```", "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```", "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```", "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```", "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```", "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```"], "num_tokens": [186, 203, 192, 186, 44, 186, 186, 192, 186, 193]}
{"item": {"task_id": 941, "text": "Write a function to count the elements in a list until an element is a tuple.", "code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "test_list": ["assert count_elim([10,20,30,(10,20),40])==3", "assert count_elim([10,(20,30),(10,20),40])==1", "assert count_elim([(10,(20,30,(10,20),40))])==0"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef count_elim(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n```", "\ndef count_elim(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n```"], "num_tokens": [40, 40, 40, 40, 40, 40, 40, 40, 40, 40]}
{"item": {"task_id": 942, "text": "Write a function to check if any list element is present in the given list.", "code": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "test_list": ["assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True", "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True", "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(nums, lst):\n    return any(num in lst for num in nums)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```", "\ndef check_element(lst, elements):\n    return any(i in elements for i in lst)\n```"], "num_tokens": [21, 21, 21, 21, 21, 21, 21, 21, 21, 21]}
{"item": {"task_id": 943, "text": "Write a function to combine two given sorted lists using heapq module.", "code": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists", "test_list": ["assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]", "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    heap = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            heapq.heappush(heap, list1[i])\n            i += 1\n        else:\n            heapq.heappush(heap, list2[j])\n            j += 1\n    while i < len(list1):\n        heapq.heappush(heap, list1[i])\n        i += 1\n    while j < len(list2):\n        heapq.heappush(heap, list2[j])\n        j += 1\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result\n```", "\nimport heapq\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    return sorted(list(heapq.merge(list1, list2)))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    return sorted(list(heapq.merge(list1, list2)))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))\n```", "\nimport heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))\n```"], "num_tokens": [27, 165, 27, 27, 28, 27, 27, 28, 27, 27]}
{"item": {"task_id": 944, "text": "Write a function to separate and print the numbers and their position of a given string.", "code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "test_list": ["assert num_position(\"there are 70 flats in this apartment\")==10", "assert num_position(\"every adult have 32 teeth\")==17", "assert num_position(\"isha has 79 chocolates in her bag\")==9"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef find_position(s):\n    for i, char in enumerate(s):\n        if char.isdigit():\n            return i\n```", "\ndef find_num_pos(s):\n    s = s.replace(\" \", \"\")\n    for i, char in enumerate(s):\n        if char.isdigit():\n            return i\n```", "\ndef find_position(s):\n    for i, char in enumerate(s):\n        if char.isdigit():\n            return i\n```", "\ndef find_last_number(s):\n    for i in range(len(s)):\n        if s[i].isdigit():\n            return i\n```", "\ndef find_last_number(s):\n    for i, char in enumerate(s):\n        if char.isdigit():\n            return i\n```", "\ndef find_num_position(s):\n    for i, char in enumerate(s):\n        if char.isdigit():\n            return i\n```", "\ndef find_position(s):\n    for i, char in enumerate(s):\n        if char.isdigit():\n            return i\n```", "\ndef num_position(s):\n    for i, char in enumerate(s):\n        if char.isdigit():\n            return i\n```", "\ndef find_position(s):\n    numbers = []\n    for i, char in enumerate(s):\n        if char.isdigit():\n            numbers.append(i)\n    return numbers[-1] + 1\n```", "\nimport re\n\ndef num_position(s):\n    for match in re.finditer(r'\\d+', s):\n        start, end = match.start(), match.end()\n        print(f\"Number: {s[start:end]}, Position: {start+1}\")\n    return start+1\n```"], "num_tokens": [26, 35, 26, 28, 27, 27, 26, 26, 41, 59]}
{"item": {"task_id": 945, "text": "Write a function to convert the given tuples into set.", "code": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ", "test_list": ["assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}", "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}", "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef tuple_to_set(t):\n    return set(t)\n```", "\ndef tuple_to_set(t):\n    return set(t)\n```", "\ndef tuple_to_set(t):\n    return set(t)\n```", "\ndef tuple_to_set(t):\n    return set(t)\n```", "\ndef tuple_to_set(t):\n    return set(t)", "\ndef tuple_to_set(t):\n    return set(t)", "\ndef tuple_to_set(t):\n    return set(t)\n```", "\ndef tuple_to_set(t):\n    return set(t)\n```", "\ndef tuple_to_set(t):\n    return set(t)\n```", "\ndef tuple_to_set(t):\n    return set(t)"], "num_tokens": [14, 14, 14, 14, 13, 13, 14, 14, 14, 13]}
{"item": {"task_id": 946, "text": "Write a function to find the most common elements and their counts of a specified text.", "code": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem", "test_list": ["assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ", "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]", "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nfrom collections import Counter\nfrom operator import itemgetter\n\ndef most_common_elem(text, n):\n    counter = Counter(text.lower())\n    return sorted(counter.items(), key=itemgetter(1), reverse=True)[:n]\n```", "\nfrom collections import Counter\n\ndef most_common_elem(text, n):\n    return Counter(text).most_common(n)\n```", "\nfrom collections import Counter\n\ndef most_common_elem(text, n):\n    return Counter(text.lower()).most_common(n)\n```", "\nfrom collections import Counter\ndef most_common_elem(text, n):\n    counter = Counter(text)\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)[:n]\n```", "\nfrom collections import Counter\n\ndef most_common_elem(text, n):\n    count = Counter(text)\n    return [(char, freq) for char, freq in count.most_common(n)]\n```", "\nfrom collections import Counter\nfrom operator import itemgetter\n\ndef most_common_elem(text, n):\n    counts = Counter(text).most_common()\n    return [x for x in counts if x[1] >= n]\n```", "\nfrom collections import Counter\ndef most_common_elem(text,n):\n    c = Counter(text.lower())\n    return [item for item in c.most_common(n)]\n```", "\nfrom collections import Counter\ndef most_common_elem(text,n):\n    count = Counter(text)\n    return sorted(count.items(),key=lambda x: x[1],reverse=True)[:n]\n```", "\nfrom collections import Counter\n\ndef most_common_elem(text, n):\n    return Counter(text).most_common(n)\n```", "\nfrom collections import Counter\n\ndef most_common_elem(text, n):\n    return Counter(text).most_common(n)\n```"], "num_tokens": [46, 25, 26, 41, 40, 47, 35, 40, 25, 25]}
{"item": {"task_id": 947, "text": "Write a python function to find the length of the shortest word.", "code": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min", "test_list": ["assert len_log([\"win\",\"lose\",\"great\"]) == 3", "assert len_log([\"a\",\"ab\",\"abc\"]) == 1", "assert len_log([\"12\",\"12\",\"1234\"]) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef len_log(lst):\n    return min(len(word) for word in lst)", "\ndef len_log(lst):\n    return min(len(word) for word in lst)", "\ndef len_log(words):\n    return min(len(word) for word in words)", "\ndef len_log(words):\n    return len(min(words, key=len))", "\ndef len_log(lst):\n    return min(len(word) for word in lst)", "\ndef len_log(lst):\n    return len(min(lst, key=len))", "\ndef len_log(words):\n    return len(min(words, key=len))\n```", "\ndef len_log(words):\n    return min(len(word) for word in words)", "\ndef len_log(words):\n    return len(min(words, key=len))", "\ndef len_log(words):\n    return min(len(word) for word in words)"], "num_tokens": [18, 18, 18, 16, 18, 16, 17, 18, 16, 18]}
{"item": {"task_id": 948, "text": "Write a function to get an item of a tuple.", "code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "test_list": ["assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')", "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')", "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_item(t, index):\n    try:\n        return t[index]\n    except IndexError:\n        return t[index % len(t)]\n```", "\ndef get_item(tup, index):\n    return tup[index % len(tup)]\n```", "\ndef get_item(t, index):\n    return t[index % len(t)]\n```", "\ndef get_item(t, index):\n    return t[index % len(t)]\n```", "\ndef get_item(t, index):\n    try:\n        return t[index]\n    except IndexError:\n        return t[index % len(t)]\n```", "\ndef get_item(t, index):\n    return t[index]\n```", "\ndef get_item(t, n):\n    return t[n]\n```", "\ndef get_item(t, n):\n    return t[n]\n```", "\ndef get_item(t, index):\n    return t[index % len(t)]\n```", "\ndef get_item(t, i):\n    return t[i % len(t)]\n```"], "num_tokens": [30, 20, 18, 18, 30, 15, 15, 15, 18, 18]}
{"item": {"task_id": 949, "text": "Write a function to sort the given tuple list basis the total digits in tuple.", "code": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))", "test_list": ["assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'", "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'", "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sort_list(lst):\n    return str(sorted(lst, key=lambda x: sum(int(digit) for digit in ''.join(map(str, x)))).__str__())\n```", "\ndef sort_list(tuples_list):\n    return str(sorted(tuples_list, key=lambda x: sum(len(str(i)) for i in x)))\n```", "\ndef sort_list(tuples):\n    return str(sorted(tuples, key=lambda x: sum(len(str(i)) for i in x)))\n```", "\ndef sort_list(tuples_list):\n    return str(sorted(tuples_list, key=lambda x: sum(len(str(i)) for i in x)))\n```", "\ndef sort_list(lst):\n    return str(lst).replace('), ', '),\\n') + ')'\n```", "\ndef sort_list(tuples):\n    return str(sorted(tuples, key=lambda x: sum(map(len, map(str, x))))\n```", "\ndef sort_list(tuples):\n    return str(sorted(tuples, key=lambda x: sum(len(str(i)) for i in x)))\n```", "\ndef sort_list(lst):\n    return str(sorted(lst, key=lambda x: sum(map(len, map(str, x))))\n```", "\ndef sort_list(lst):\n    return str(sorted(lst, key=lambda x: sum(len(str(i)) for i in x)))\n```", "\ndef sort_list(tuples_list):\n    return str(sorted(tuples_list, key=sum(map(len, map(str, tuple)))).__repr__)[1:-1]\n```"], "num_tokens": [38, 32, 30, 32, 24, 29, 30, 27, 28, 37]}
{"item": {"task_id": 950, "text": "Write a function to display sign of the chinese zodiac for given year.", "code": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign", "test_list": ["assert chinese_zodiac(1997)==('Ox')", "assert chinese_zodiac(1998)==('Tiger')", "assert chinese_zodiac(1994)==('Dog')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef chinese_zodiac(year):\n    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return zodiac_signs[(year-4)%12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return zodiac_signs[year % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return zodiac_signs[year % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return zodiac_signs[year % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey']\n    return zodiac_signs[year % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_animals = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey']\n    return zodiac_animals[(year - 4) % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return zodiac[year % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_animals = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey']\n    return zodiac_animals[year % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_names = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return zodiac_names[year % 12]\n```", "\ndef chinese_zodiac(year):\n    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']\n    return zodiac_signs[year % 12]\n```"], "num_tokens": [72, 71, 71, 71, 74, 78, 67, 74, 69, 71]}
{"item": {"task_id": 951, "text": "Write a function to find the maximum of similar indices in two lists of tuples.", "code": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ", "test_list": ["assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]", "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]", "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef max_similar_indices(list1, list2):\n    return [t for t in list1 if t in list2]\n```", "\ndef max_similar_indices(list1, list2):\n    return [tup for tup in list1 if tup in list2]\n```", "\ndef max_similar_indices(list1, list2):\n    return [tup for tup in list1 if tup in list2]\n```", "\ndef max_similar_indices(list1, list2):\n    return [t for t in zip(list1, list2) if t[0][1] >= t[1][1]]\n```", "\ndef max_similar_indices(list1, list2):\n    return [x for x in list2 if x in list1]\n```", "\ndef max_similar_indices(list1, list2):\n    return [x for x in list2 if x in list1]\n```", "\ndef max_similar_indices(list1, list2):\n    return [t for t in zip(list1, list2) if t[0][0] == t[1][0]]\n```", "\ndef max_similar_indices(list1, list2):\n    return [max(i for i in zip(list1, list2) if i[0] == i[1])]\n```", "\ndef max_similar_indices(list1, list2):\n    return [max((i, j) for i, j in list1 + list2 if (i, j) in list2) for _ in list1 + list2]\n```", "\ndef max_similar_indices(list1, list2):\n    return [tup for tup in list1 if tup in list2]\n```"], "num_tokens": [29, 30, 30, 42, 29, 29, 42, 39, 52, 30]}
{"item": {"task_id": 952, "text": "Write a function to compute the value of ncr mod p.", "code": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "test_list": ["assert nCr_mod_p(10, 2, 13) == 6", "assert nCr_mod_p(11, 3, 14) == 11", "assert nCr_mod_p(18, 14, 19) == 1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r > p:\n        return 0\n    if r * 2 > p:\n        r = p - r\n    res = 1\n    for i in range(1, r + 1):\n        res = (res * (n - i + 1)) % p\n    return res", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    res = 1\n    for i in range(1, r + 1):\n        res = (res * (n - i + 1)) % p\n    return res\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    res = 1\n    for i in range(1, r+1):\n        res = (res * (n-i+1)) % p\n    return res\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    if r > n - r:\n        r = n - r\n    res = 1\n    for i in range(1, r + 1):\n        res = res * (n - i + 1) % p * pow(i, p - 2, p) % p % p\n    return res\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    res = 1\n    for i in range(1, r + 1):\n        res = (res * (n - i + 1)) % p\n    return res\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    res = 1\n    for i in range(1, r + 1):\n        res = (res * (n - i + 1)) % p\n    return res\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r > p:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    inv = pow(1, p - 2, p)\n    res = 1\n    for i in range(1, r + 1):\n        res = (res * (n - i + 1) * inv) % p\n    return res\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n or r > p or n < 0 or r < 0:\n        return 0\n    result = 1\n    for i in range(1, r + 1):\n        result = (result * (n - i + 1)) % p\n    return result\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    if r > n // 2:\n        r = n - r\n    res = 1\n    for i in range(1, r + 1):\n        res = res * (n - i + 1) % p * pow(i, p - 2, p) % p % p\n    return res\n```", "\ndef nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    res = 1\n    for i in range(1, r + 1):\n        res = (res * (n - i + 1)) % p\n    return res\n```"], "num_tokens": [90, 81, 62, 110, 65, 65, 109, 79, 111, 65]}
{"item": {"task_id": 953, "text": "Write a python function to find the minimun number of subsets with distinct elements.", "code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "test_list": ["assert subset([1, 2, 3, 4],4) == 1", "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2", "assert subset([1, 2, 3 ],3) == 1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef subset(lst, n):\n    return len(set([frozenset(i) for i in [lst[i:] for i in range(len(lst))]])) >= n\n```", "\ndef subset(nums, k):\n    nums = set(nums)\n    return len([set(x) for x in [nums] if len(x) == k])", "\ndef subset(nums, k):\n    nums = set(nums)\n    return len(nums) if k >= len(nums) else k\n```", "\ndef subset(lst, k):\n    if k > len(set(lst)):\n        return -1\n    return len({frozenset(i) for i in [lst[i:] for i in range(len(lst)-k+1)]})\n```", "\ndef subset(nums, k):\n    nums = list(set(nums))\n    nums.sort()\n    count = 0\n    while nums:\n        count += 1\n        nums = [x for x in nums if nums.count(x) > 1]\n        nums = [x for x in nums if nums.count(x) == 1]\n    return count\n```", "\ndef subset(nums, k):\n    nums = set(nums)\n    return len(nums) if k <= len(nums) else -1\n```", "\ndef subset(nums, k):\n    if k > len(set(nums)):\n        return 0\n    return 1\n```", "\ndef subset(nums, k):\n    nums = set(nums)\n    return k - len(nums) + 1\n```", "\ndef subset(nums, k):\n    nums = set(nums)\n    return len(nums) // (2**k) + (1 if len(nums) % (2**k) else 0)", "\ndef subset(nums, k):\n    return len(set(nums)[:k]) + 1 if k > 0 else 0\n```"], "num_tokens": [39, 34, 29, 51, 76, 30, 27, 26, 42, 29]}
{"item": {"task_id": 954, "text": "Write a function that gives profit amount if the given amount has profit else return none.", "code": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None", "test_list": ["assert profit_amount(1500,1200)==300", "assert profit_amount(100,200)==None", "assert profit_amount(2000,5000)==None"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef profit_amount(cost, selling):\n    if cost < selling:\n        return selling - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, sell):\n    if cost < sell:\n        return sell - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, selling_price):\n    if cost < selling_price:\n        return selling_price - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, selling_price):\n    if cost < selling_price:\n        return selling_price - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, amount):\n    if cost < amount:\n        return amount - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, selling_price):\n    if selling_price > cost:\n        return selling_price - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, selling):\n    if cost < selling:\n        return selling - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, selling_price):\n    if cost < selling_price:\n        return selling_price - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, sell):\n    if sell > cost:\n        return sell - cost\n    else:\n        return None\n```", "\ndef profit_amount(cost, selling):\n    if cost < selling:\n        return selling - cost\n    else:\n        return None\n```"], "num_tokens": [29, 29, 32, 32, 29, 32, 29, 32, 29, 29]}
{"item": {"task_id": 955, "text": "Write a function to find out, if the given number is abundant.", "code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "test_list": ["assert is_abundant(12)==True", "assert is_abundant(13)==False", "assert is_abundant(9)==False"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef is_abundant(n):\n    return sum(i for i in range(1, n) if n % i == 0) > n\n```", "\ndef is_abundant(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum > n\n```", "\ndef is_abundant(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum > n\n```", "\ndef is_abundant(n):\n    sum_divisors = sum(i for i in range(1, n) if n % i == 0)\n    return sum_divisors > n\n```", "\ndef is_abundant(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum > n\n```", "\ndef is_abundant(n):\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n\n```", "\ndef is_abundant(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum > n\n```", "\ndef is_abundant(n):\n    return sum(i for i in range(1, n) if n % i == 0) > n\n```", "\ndef is_abundant(n):\n    sum_divisors = sum(i for i in range(1, n) if n % i == 0)\n    return sum_divisors > n\n```", "\ndef is_abundant(n):\n    sum_divisors = sum(i for i in range(1, n) if n % i == 0)\n    return sum_divisors > n\n```"], "num_tokens": [34, 46, 46, 42, 46, 52, 46, 34, 42, 42]}
{"item": {"task_id": 956, "text": "Write a function to split the given string at uppercase letters by using regex.", "code": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))", "test_list": ["assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']", "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']", "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\nimport re\n\ndef split_list(s):\n    return re.split('([A-Z])', s).removeprefix(' ').removesuffix(' ')\n```", "\nimport re\n\ndef split_list(s):\n    return re.split('([A-Z])', s).strip('[').strip(']').split()\n```", "\nimport re\n\ndef split_list(s):\n    return re.split('(?=[A-Z])', s)", "\nimport re\n\ndef split_list(s):\n    return re.split(r'(?=[A-Z])', s)\n```", "\nimport re\n\ndef split_list(s):\n    return re.split('(?=[A-Z])', s)", "\nimport re\n\ndef split_list(s):\n    return re.split('([A-Z])', s).removeprefix('').split()", "\nimport re\ndef split_list(s):\n    return re.split('([A-Z])', s).removeprefix(' ').removesuffix(' ')\n```", "\nimport re\ndef split_list(s):\n    return re.split('(?=[A-Z])', s)", "\nimport re\n\ndef split_list(s):\n    return re.split('(?=[A-Z])', s)", "\nimport re\n\ndef split_list(s):\n    return re.split('([A-Z])', s).split()\n```"], "num_tokens": [32, 32, 23, 25, 23, 27, 32, 23, 23, 25]}
{"item": {"task_id": 957, "text": "Write a python function to get the position of rightmost set bit.", "code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "test_list": ["assert get_First_Set_Bit_Pos(12) == 3", "assert get_First_Set_Bit_Pos(18) == 2", "assert get_First_Set_Bit_Pos(16) == 5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1 - bin(n).count('0')\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1 - bin(n).count('0')\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1 - ((1 << (n.bit_length() - 1)).&n).bit_length()\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1 - bin(n).count('1')\n```", "\ndef get_First_Set_Bit_Pos(n):\n    return n.bit_length() - 1\n```"], "num_tokens": [29, 22, 29, 22, 22, 22, 40, 22, 29, 22]}
{"item": {"task_id": 958, "text": "Write a function to convert an integer into a roman numeral.", "code": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num", "test_list": ["assert int_to_roman(1)==(\"I\")", "assert int_to_roman(50)==(\"L\")", "assert int_to_roman(4)==(\"IV\")"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```", "\ndef int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```"], "num_tokens": [164, 164, 164, 164, 164, 164, 164, 164, 164, 164]}
{"item": {"task_id": 959, "text": "Write a python function to find the average of a list.", "code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "test_list": ["assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75", "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75", "assert Average([1,2,3]) == 2"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)", "\ndef Average(lst):\n    return sum(lst) / len(lst)"], "num_tokens": [15, 15, 15, 15, 15, 15, 15, 15, 15, 15]}
{"item": {"task_id": 960, "text": "Write a function to solve tiling problem.", "code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "test_list": ["assert get_noOfways(4)==3", "assert get_noOfways(3)==2", "assert get_noOfways(5)==5"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef get_noOfways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_noOfways(n-1) + get_noOfways(n-2)\n```", "\ndef get_noOfways(n):\n    if n <= 2:\n        return n\n    a, b = 2, 3\n    for _ in range(3, n):\n        a, b = b, a + b\n    return b\n```", "\ndef get_noOfways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```", "\ndef get_noOfways(n):\n    if n <= 2:\n        return n\n    a, b = 2, 3\n    for _ in range(3, n):\n        a, b = b, a + b\n    return b\n```", "\ndef get_noOfways(n):\n    if n <= 2:\n        return n\n    a, b = 2, 3\n    for _ in range(3, n):\n        a, b = b, a+b\n    return b\n```", "\ndef get_noOfways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```", "\ndef get_noOfways(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    ways = [0]*(n+1)\n    ways[1] = 1\n    ways[2] = 2\n    for i in range(3, n+1):\n        ways[i] = ways[i-1] + ways[i-2]\n    return ways[n]\n```", "\ndef get_noOfways(n):\n    if n <= 2:\n        return n\n    a, b = 2, 3\n    for _ in range(3, n):\n        a, b = b, a + b\n    return b\n```", "\ndef get_noOfways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```", "\ndef get_noOfways(n):\n    if n <= 2:\n        return n\n    else:\n        a, b = 2, 3\n        for _ in range(3, n):\n            a, b = b, a + b\n        return b\n```"], "num_tokens": [56, 57, 73, 57, 56, 73, 95, 57, 73, 60]}
{"item": {"task_id": 961, "text": "Write a function to convert a roman numeral to an integer.", "code": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val", "test_list": ["assert roman_to_int('MMMCMLXXXVI')==3986", "assert roman_to_int('MMMM')==4000", "assert roman_to_int('C')==100"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            int_val += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            int_val += roman[s[i]]\n    return int_val\n```", "\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            int_val += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            int_val += roman[s[i]]\n    return int_val\n```", "\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            int_val += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            int_val += roman[s[i]]\n    return int_val\n```", "\ndef roman_to_int(s):\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman_numerals[s[i]] > roman_numerals[s[i - 1]]:\n            int_val += roman_numerals[s[i]] - 2 * roman_numerals[s[i - 1]]\n        else:\n            int_val += roman_numerals[s[i]]\n    return int_val\n```", "\ndef roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n            int_val += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n        else:\n            int_val += roman_dict[s[i]]\n    return int_val\n```", "\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            int_val += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            int_val += roman[s[i]]\n    return int_val\n```", "\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            result += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            result += roman[s[i]]\n    return result\n```", "\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            result += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            result += roman[s[i]]\n    return result", "\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            int_val += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            int_val += roman[s[i]]\n    return int_val\n```", "\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n            int_val += roman[s[i]] - 2 * roman[s[i - 1]]\n        else:\n            int_val += roman[s[i]]\n    return int_val\n```"], "num_tokens": [124, 124, 124, 136, 130, 124, 120, 118, 124, 124]}
{"item": {"task_id": 962, "text": "Write a python function to find the sum of all even natural numbers within the range l and r.", "code": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "test_list": ["assert sum_Even(2,5) == 6", "assert sum_Even(3,8) == 18", "assert sum_Even(4,6) == 10"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)", "\ndef sum_Even(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 == 0)"], "num_tokens": [33, 33, 33, 33, 33, 33, 33, 33, 33, 33]}
{"item": {"task_id": 963, "text": "Write a function to calculate the discriminant value.", "code": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)", "test_list": ["assert discriminant_value(4,8,2)==(\"Two solutions\",32)", "assert discriminant_value(5,7,9)==(\"no real solution\",-131)", "assert discriminant_value(0,0,9)==(\"one solution\",0)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", d)\n    else:\n        return (\"no real solution\", d)\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", 0)\n    else:\n        return (\"no real solution\", d)\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", 0)\n    else:\n        return (\"no real solution\", d)\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", d)\n    else:\n        return (\"no real solution\", d)\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", 0)\n    else:\n        return (\"no real solution\", d)", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", 0)\n    else:\n        return (\"no real solution\", d)\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return \"Two solutions\", d\n    elif d == 0:\n        return \"one solution\", d\n    else:\n        return \"no real solution\", d\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return \"Two solutions\", d\n    elif d == 0:\n        return \"one solution\", d\n    else:\n        return \"no real solution\", d\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", d)\n    else:\n        return (\"no real solution\", d)\n```", "\ndef discriminant_value(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return (\"Two solutions\", d)\n    elif d == 0:\n        return (\"one solution\", d)\n    else:\n        return (\"no real solution\", d)"], "num_tokens": [67, 68, 68, 67, 67, 68, 67, 67, 67, 66]}
{"item": {"task_id": 964, "text": "Write a python function to check whether the length of the word is even or not.", "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "test_list": ["assert word_len(\"program\") == False", "assert word_len(\"solution\") == True", "assert word_len(\"data\") == True"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef word_len(word):\n    return len(word) % 2 == 0", "\ndef word_len(word):\n    return len(word) % 2 == 0", "\ndef word_len(word):\n    return len(word) % 2 == 0\n```", "\ndef word_len(word):\n    return len(word) % 2 == 0", "\ndef word_len(word):\n    return len(word) % 2 == 0", "\ndef word_len(word):\n    return len(word) % 2 == 0", "\ndef word_len(word):\n    return len(word) % 2 == 0\n```", "\ndef word_len(word):\n    return len(word) % 2 == 0", "\ndef word_len(word):\n    return len(word) % 2 == 0", "\ndef word_len(word):\n    return len(word) % 2 == 0"], "num_tokens": [18, 18, 20, 18, 18, 18, 20, 18, 18, 18]}
{"item": {"task_id": 965, "text": "Write a function to convert camel case string to snake case string.", "code": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "test_list": ["assert camel_to_snake('PythonProgram')==('python_program')", "assert camel_to_snake('pythonLanguage')==('python_language')", "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef camel_to_snake(s):\n    s = s[0].lower()\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            s = s[:i] + '_' + s[i].lower() + s[i+1:]\n    return s\n```", "\ndef camel_to_snake(s):\n    result = ''\n    for i, c in enumerate(s):\n        if i > 0 and c.isupper():\n            result += '_' + c.lower()\n        else:\n            result += c.lower()\n    return result\n```", "\ndef camel_to_snake(s):\n    result = ''\n    for i, c in enumerate(s):\n        if c.isupper():\n            if result:\n                result += '_'\n            result += c.lower()\n        else:\n            result += c\n    return result\n```", "\ndef camel_to_snake(s):\n    s = ''.join('_{0}'.format(char.lower() if i > 0 and char.isupper() else char) for i, char in enumerate(s))\n    return s.lstrip('_')\n```", "\ndef camel_to_snake(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += '_' + char.lower()\n        else:\n            result += char\n    return result\n```", "\ndef camel_to_snake(s):\n    result = ''\n    for c in s:\n        if c.isupper():\n            if result:\n                result += '_'\n            result += c.lower()\n        else:\n            result += c\n    return result\n```", "\ndef camel_to_snake(s):\n    s = ''.join(['_'+i.lower() if i.isupper() else i for i in s]).lstrip('_')\n    return s\n```", "\ndef camel_to_snake(s):\n    return ''.join(['_'+i.lower() if i.isupper() else i for i in s]).lstrip('_')\n```", "\ndef camel_to_snake(s):\n    return ''.join(['_'+i.lower() if i.isupper() else i for i in s]).lstrip('_')\n```", "\ndef camel_to_snake(s):\n    result = ''\n    for c in s:\n        if c.isupper():\n            if result:\n                result += '_'\n            result += c.lower()\n        else:\n            result += c\n    return result\n```"], "num_tokens": [63, 55, 56, 51, 46, 53, 40, 35, 35, 53]}
{"item": {"task_id": 966, "text": "Write a function to remove an empty tuple from a list of tuples.", "code": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1", "test_list": ["assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ", "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ", "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t and all(t)]\n```", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t]\n```", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t and (not isinstance(t, tuple) or any(t))]\n```", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t or (isinstance(t, tuple and all(t))]\n```", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t or (hasattr(t, '__len__') and t)]\n```", "\ndef remove_empty(lst):\n    return [t for t in lst if t]", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t and (not isinstance(t, tuple) or t)]\n```", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t and all(t)]\n```", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t or (isinstance(t, str))]\n```", "\ndef remove_empty(tuples_list):\n    return [t for t in tuples_list if t and not all(isinstance(x, tuple) for x in t)]\n```"], "num_tokens": [25, 22, 33, 32, 34, 18, 32, 25, 29, 34]}
{"item": {"task_id": 967, "text": "Write a python function to accept the strings which contains all vowels.", "code": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ", "test_list": ["assert check(\"SEEquoiaL\") == 'accepted'", "assert check('program') == \"not accepted\"", "assert check('fine') == \"not accepted\""], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char in vowels:\n            return 'accepted'\n    return \"not accepted\"\n```", "\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char not in vowels:\n            return \"not accepted\"\n    return 'accepted'", "\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    if all(c in vowels for c in s):\n        return 'accepted'\n    else:\n        return \"not accepted\"", "\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    return 'accepted' if all(c in vowels for c in s) else \"not accepted\"\n```", "\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    if all(c in vowels for c in s):\n        return 'accepted'\n    else:\n        return \"not accepted\"", "\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char not in vowels:\n            return \"not accepted\"\n    return 'accepted'\n```", "\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char not in vowels:\n            return \"not accepted\"\n    return 'accepted'\n```", "\ndef check(s):\n    if all(c.lower() in 'aeiou' for c in s):\n        return 'accepted'\n    else:\n        return \"not accepted\"\n```", "\ndef check(s):\n    vowels = 'aeiouAEIOU'\n    if all(char in vowels for char in s):\n        return 'accepted'\n    else:\n        return \"not accepted\"", "\ndef check(s):\n    return 'accepted' if all(c in 'aeiou' for c in s) else \"not accepted\"\n```"], "num_tokens": [40, 40, 41, 37, 41, 41, 41, 37, 41, 30]}
{"item": {"task_id": 968, "text": "Write a python function to find maximum possible value for the given periodic function.", "code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "test_list": ["assert floor_Max(11,10,9) == 9", "assert floor_Max(5,7,4) == 2", "assert floor_Max(2,2,1) == 1"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef floor_Max(a, b, c):\n    return min(a, b, c)", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```", "\nimport math\n\ndef floor_Max(a, b, c):\n    return math.floor((a+b+c)/3)\n```", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```", "\ndef floor_Max(a, b, c):\n    return min(a, b, c)\n```"], "num_tokens": [20, 21, 21, 21, 21, 21, 21, 26, 21, 21]}
{"item": {"task_id": 969, "text": "Write a function to join the tuples if they have similar initial elements.", "code": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ", "test_list": ["assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]", "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]", "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in sorted(tuples):\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    result.append(tuple(temp))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in tuples:\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    result.append(tuple(temp))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    current = []\n    for t in sorted(tuples):\n        if not current or t[0] == current[-1][0]:\n            current.append(t)\n        else:\n            result.append(tuple(current))\n            current = [t]\n    if current:\n        result.append(tuple(current))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in sorted(tuples):\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    if temp:\n        result.append(tuple(temp))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in sorted(tuples):\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    result.append(tuple(temp))\n    return [x for x in result if len(x) > 1]\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in sorted(tuples):\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    if temp:\n        result.append(tuple(temp))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in sorted(tuples):\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    if temp:\n        result.append(tuple(temp))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in tuples:\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    result.append(tuple(temp))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in sorted(tuples):\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    result.append(tuple(temp))\n    return result\n```", "\ndef join_tuples(tuples):\n    result = []\n    temp = []\n    for t in sorted(tuples):\n        if not temp or t[0] == temp[-1][0]:\n            temp.append(t)\n        else:\n            result.append(tuple(temp))\n            temp = [t]\n    result.append(tuple(temp))\n    return result\n```"], "num_tokens": [71, 69, 75, 75, 83, 75, 75, 69, 71, 71]}
{"item": {"task_id": 970, "text": "Write a function to find minimum of two numbers.", "code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "test_list": ["assert min_of_two(10,20)==10", "assert min_of_two(19,15)==15", "assert min_of_two(-10,-20)==-20"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```", "\ndef min_of_two(a, b):\n    return min(a, b)\n```"], "num_tokens": [18, 18, 18, 18, 18, 18, 18, 18, 18, 18]}
{"item": {"task_id": 971, "text": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "test_list": ["assert maximum_segments(7, 5, 2, 5) == 2", "assert maximum_segments(17, 2, 1, 3) == 17", "assert maximum_segments(18, 16, 3, 6) == 6"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```", "\ndef maximum_segments(n, a, b, c):\n    return min(n // a, n // b, n // c)\n```"], "num_tokens": [29, 29, 29, 29, 29, 29, 29, 29, 29, 29]}
{"item": {"task_id": 972, "text": "Write a function to concatenate the given two tuples to a nested tuple.", "code": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ", "test_list": ["assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)", "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)", "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```", "\ndef concatenate_nested(t1, t2):\n    return t1 + t2\n```", "\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```", "\ndef concatenate_nested(t1, t2):\n    return t1 + t2", "\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```", "\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```", "\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```", "\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```", "\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```", "\ndef concatenate_nested(t1, t2):\n    return (*t1, *t2)\n```"], "num_tokens": [22, 20, 22, 18, 22, 22, 22, 22, 22, 22]}
{"item": {"task_id": 973, "text": "Write a python function to left rotate the string.", "code": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ", "test_list": ["assert left_rotate(\"python\",2) == \"thonpy\"   ", "assert left_rotate(\"bigdata\",3 ) == \"databig\" ", "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef left_rotate(s, n):\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    n = n % len(s)\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    n = n % len(s)\n    return s[n:] + s[:n]", "\ndef left_rotate(s, n):\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    n = n % len(s)\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    return s[n:] + s[:n]\n```", "\ndef left_rotate(s, n):\n    return s[n:] + s[:n]\n```"], "num_tokens": [20, 20, 20, 28, 27, 20, 20, 28, 20, 20]}
{"item": {"task_id": 974, "text": "Write a function to find the minimum total path sum in the given triangle.", "code": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "test_list": ["assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6", "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ", "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"], "test_setup_code": "", "challenge_test_list": []}, "text": ["\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] = triangle[i][j] + min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    n = len(triangle)\n    dp = triangle[:]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] += min(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]\n```", "\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] = triangle[i][j] + min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] = triangle[i][j] + min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]\n```", "\ndef min_sum_path(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] = triangle[i][j] + min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n```"], "num_tokens": [78, 83, 72, 78, 78, 72, 72, 74, 75, 78]}
